<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Login</title>

  <!-- Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Droid+Serif:wght@400;700&display=swap" rel="stylesheet">

  <!-- Font Awesome (CSP-safe) -->
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"/>

  <script src="https://accounts.google.com/gsi/client" async defer></script>

  <style>

      #errorPopupContainer {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        background: rgba(0, 0, 0, 0.4);
        font-family: 'Montserrat', sans-serif;
      }

      #errorPopupContainer * {
        box-sizing: border-box;
        font-family: inherit;
        margin: 0;
        padding: 0;
      }

      #errorPopupBox {
        max-width: 400px;
        width: 90%;
        padding: 30px;
        border-radius: 10px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(6px);
        border: 1px solid rgba(0, 0, 0, 0.1);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        text-align: center;
      }

      #errorPopupBox h1 {
        font-size: 3rem;
        font-weight: 700;
        color: #e74c3c;
      }

      #errorPopupBox h2 {
        font-size: 1.5rem;
        font-weight: 700;
        color: #333;
        margin: 10px 0;
      }

      #errorMessage {
        font-size: 1rem;
        color: #666;
        background-color: #ffffff;
        padding: 15px;
        border-radius: 5px;
        margin: 20px 0;
        border-left: 4px solid #e74c3c;
        text-align: left;
        word-wrap: break-word;
      }

      #closeErrorPopup {
        display: inline-block;
        margin-top: 10px;
        padding: 10px 24px;
        background-color: #3498db;
        color: #fff;
        text-decoration: none;
        border-radius: 5px;
        font-weight: bold;
        transition: background-color 0.3s ease, transform 0.2s ease;
        cursor: pointer;
      }

      #closeErrorPopup:hover {
        background-color: #2980b9;
        transform: translateY(-2px);
      }

       #flashMessageContainer {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 9998;
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      max-width: 420px;
      padding: 0 1rem;
      pointer-events: none;
    }

    .flash-message {
      padding: 1rem 1.25rem;
      margin-bottom: 0.75rem;
      border-radius: 8px;
      font-weight: 600;
      width: 100%;
      text-align: center;
      pointer-events: all;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      animation: fadeIn 0.4s ease;
    }

    .flash-success {
      background-color: #d1fae5;
      color: #065f46;
      border: 1px solid #10b981;
    }

    .flash-error {
      background-color: #fee2e2;
      color: #991b1b;
      border: 1px solid #ef4444;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    * { box-sizing: border-box; }

    body {
      font-family: 'Droid Serif', serif;
      background-color: #fef7ed;
      margin: 0;
      padding: 1rem;
      color: #333;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .container {
      width: 100%;
      max-width: 420px;
      background: #ffffff;
      padding: 2.5rem;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      border-top: 5px solid #1e40af;
    }

    .header-with-button {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .home-icon-btn {
      display: flex;
      justify-content: center;
      align-items: center;
      width: 36px;
      height: 36px;
      background-color: #1e40af;
      color: #fff;
      border-radius: 6px;
      text-decoration: none;
      font-size: 1.1rem;
      transition: background-color 0.3s ease;
    }

    .home-icon-btn:hover {
      background-color: #172554;
    }

    h2 {
      color: #1e40af;
      font-family: 'Inter', sans-serif;
      font-size: 1.75rem;
      margin: 0;
    }

    form {
      display: flex;
      flex-direction: column;
      gap: 1.25rem;
    }

    .form-group {
      display: flex;
      flex-direction: column;
    }

    label {
      margin-bottom: 0.5rem;
      font-weight: 600;
      color: #4b5563;
      font-size: 0.9rem;
    }

    input {
      padding: 0.75rem 1rem;
      font-size: 1rem;
      font-family: 'Droid Serif', serif;
      border: 1px solid #d1d5db;
      border-radius: 8px;
      transition: border-color 0.3s, box-shadow 0.3s;
    }

    input:focus {
      outline: none;
      border-color: #f97316;
      box-shadow: 0 0 0 3px rgba(249, 115, 22, 0.2);
    }

    button[type="submit"] {
      background-color: #1e40af;
      color: white;
      padding: 0.8rem;
      border: none;
      border-radius: 8px;
      font-size: 1.1rem;
      font-weight: 600;
      font-family: 'Inter', sans-serif;
      cursor: pointer;
      transition: background-color 0.3s ease;
      margin-top: 1rem;
    }

    button[type="submit"]:hover {
      background-color: #1c3d90;
    }

    .form-footer {
      text-align: center;
      margin-top: 1.5rem;
      font-size: 0.95rem;
      font-weight: 600;
      color: #b91c1c; /* Attention-grabbing red */
    }

    .forgot-password {
      text-align: right;
      margin-top: 0.5rem;
      font-size: 0.9rem;
    }

    .form-footer a, .forgot-password a {
      color: #1e40af;
      text-decoration: none;
      font-weight: 600;
    }

    .form-footer a:hover, .forgot-password a:hover {
      text-decoration: underline;
    }

    .google-wrapper {
      margin-top: 1.5rem;
    }

    @media (max-width: 500px) {
      body {
        padding: 0;
      }

      .container {
        margin: 0;
        border-radius: 0;
        min-height: 100vh;
        box-shadow: none;
        padding: 2rem 1.5rem;
      }

      h2 {
        font-size: 1.5rem;
      }
    }
  </style>
</head>
<body>

<div class="container">
  <div class="header-with-button">
    <a href="/" class="home-icon-btn" title="Go Home">
      <i class="fas fa-home"></i>
    </a>
    <h2>Login to Campus</h2>
  </div>

  <form id="loginForm">
    <div class="form-group">
      <label for="identifier">Email *</label>
      <input type="email" id="identifier" name="identifier" required placeholder="Enter your email" />
    </div>
    <div class="form-group">
      <label for="password">Password *</label>
      <input type="password" id="password" name="password" required placeholder="Enter your password" />
      <div class="forgot-password">
        <a href="/Student/forgot-password">Forgot Password?</a>
      </div>
    </div>
    <button type="submit">Login</button>
  </form>

  <div class="google-wrapper">
    <div id="g_id_signin"></div>
  </div>

  <div class="form-footer">
    Logging in for the first time? your password is same as your email or continue with google.
  </div>
</div>

<script>
  <div id="flashMessageContainer" style="position: fixed; top: 20px; left: 50%; transform: translateX(-50%); z-index: 9999;"></div>
  const loginForm = document.getElementById('loginForm');
  loginForm.addEventListener('submit', async function (e) {
    e.preventDefault();
    const identifier = document.getElementById('identifier').value.trim();
    const password = document.getElementById('password').value.trim();
    try {
      const ip = await getClientIP();
      const userAgent = navigator.userAgent;
      const res = await fetch('/Student/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'x-forwarded-for': ip, 'userAgent': userAgent },
        body: JSON.stringify({ identifier, password })
      });
      
      if (!res.ok) {
        const contentType = res.headers.get('Content-Type') || '';

        if (contentType.includes('text/html')) {
          const html = await res.text();
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = html;

          const popup = tempDiv.querySelector('#errorPopupContainer');
          const scripts = tempDiv.querySelectorAll('script');

          if (popup) {
            document.body.prepend(popup);

            // Re-execute any inline scripts inside the error page
            scripts.forEach((script) => {
              const newScript = document.createElement('script');
              if (script.src) {
                newScript.src = script.src;
              } else {
                newScript.textContent = script.textContent;
              }
              document.body.appendChild(newScript);
            });
          } else {
            // alert('An unknown error occurred.');
            showFlashMessage('error', 'An unknown error occurred.');
          }

          return;
        }

        // alert('Server error: unexpected content type.');
        showFlashMessage('error', 'Server error: unexpected content type.');
      }


      const data = await res.json();
      if (res.ok && data.token) {
        if (isUserEnrolled(data.token)) {
          localStorage.setItem('token', data.token);
            // alert('Login successful!');
            showFlashMessage('success', 'Login successful!');
            // window.location.href = '/Student/dashboard';
            setTimeout(() => window.location.href = '/Student/dashboard', 1500);
          }
      } else {
        // alert(data.message || 'Login failed.');
        showFlashMessage('error', 'Login failed.');
      }
    } catch (err) {
      console.error('Login error:', err);
      // alert('Something went wrong. Try again.');
      showFlashMessage('error', 'Something went wrong. Try again.');
    }
  });

  window.onload = function () {
    google.accounts.id.initialize({
      client_id: '386508050197-iluerjae4ua3i4jgd4k4taio51mav3bt.apps.googleusercontent.com',
      callback: handleGoogleResponse,
    });
    google.accounts.id.renderButton(
      document.getElementById("g_id_signin"),
      { theme: "outline", size: "large", width: "358" }
    );
  };

  async function handleGoogleResponse(response) {
    try {
      const ip = await getClientIP();
      const userAgent = navigator.userAgent;
      const res = await fetch('/Student/google-login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'x-forwarded-for': ip, 'userAgent': userAgent },
        body: JSON.stringify({ tokenId: response.credential }),
      });

       if (!res.ok) {
        const contentType = res.headers.get('Content-Type') || '';

        if (contentType.includes('text/html')) {
          const html = await res.text();
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = html;

          const popup = tempDiv.querySelector('#errorPopupContainer');
          const scripts = tempDiv.querySelectorAll('script');

          if (popup) {
            document.body.prepend(popup);

            // Re-execute any inline scripts inside the error page
            scripts.forEach((script) => {
              const newScript = document.createElement('script');
              if (script.src) {
                newScript.src = script.src;
              } else {
                newScript.textContent = script.textContent;
              }
              document.body.appendChild(newScript);
            });
          } else {
            // alert('An unknown error occurred.');
            showFlashMessage('error', 'An unknown error occurred.');
          }

          return;
        }

        // alert('Server error: unexpected content type.');
        showFlashMessage('error', 'Server error: unexpected content type.');
      }


      const data = await res.json();
      // console.log('Google login response:', data);
      if (res.ok && data.token) {
        if (isUserEnrolled(data.token)) {
          localStorage.setItem('token', data.token);
          setTimeout(() => window.location.href = '/Student/dashboard', 1500);
          // window.location.href = '/Student/dashboard';
        } else {
          // alert('You are not authorized to access this page.');
          showFlashMessage('error', 'You are not authorized to access this page.');
        }
      } else {
        // alert(data.message || 'Google login failed.');
        showFlashMessage('error', 'Google login failed. Please try again.');
      }
    } catch (err) {
      console.error('Google login failed:', err);
      // alert('Google login failed. Please try again.');
      showFlashMessage('error', 'Google login failed. Please try again.');
    }
  }

  function isUserEnrolled(token) {
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.isEnrolled === true;
      // console.log('User enrollment status:', payload.isEnrolled);
    } catch (err) {
      console.error('Token decode failed:', err);
      return false;
    }
  }

  async function getClientIP() {
    const res = await fetch('https://api.ipify.org?format=json');
    const data = await res.json();
    return data.ip;
  }

  function showFlashMessage(type, message, duration = 4000) {
    const container = document.getElementById('flashMessageContainer');
    const msg = document.createElement('div');
    msg.classList.add('flash-message');
    msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
    msg.textContent = message;

    container.appendChild(msg);

    setTimeout(() => {
      msg.style.opacity = '0';
      msg.style.transform = 'translateY(-10px)';
      setTimeout(() => msg.remove(), 500);
    }, duration);
    }
    async function getClientIP() {
    const res = await fetch('https://api.ipify.org?format=json');
    const data = await res.json();
    return data.ip;
  }

</script>

</body>
</html>
