<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Edit & Finalize Student Details</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; background-color: #f3f4f6; padding: 2rem; }
    .container { max-width: 1000px; margin: auto; background: white; padding: 2rem; border-radius: 10px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }
    h2, h3 { color: #1f2937; margin-bottom: 1rem; grid-column: 1 / -1; }
    form { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 1rem; }
    label { font-weight: 600; margin-bottom: 0.3rem; display: block; }
    input, select, textarea { width: 100%; padding: 0.6rem; border-radius: 6px; border: 1px solid #d1d5db; }
    button { grid-column: 1 / -1; padding: 0.75rem; background: #2563eb; color: white; font-weight: 600; border: none; border-radius: 8px; margin-top: 1.5rem; cursor: pointer; }
    button:hover { background: #1d4ed8; }

     #errorPopupContainer {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        background: rgba(0, 0, 0, 0.4);
        font-family: 'Montserrat', sans-serif;
      }

      #errorPopupContainer * {
        box-sizing: border-box;
        font-family: inherit;
        margin: 0;
        padding: 0;
      }

      #errorPopupBox {
        max-width: 400px;
        width: 90%;
        padding: 30px;
        border-radius: 10px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(6px);
        border: 1px solid rgba(0, 0, 0, 0.1);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        text-align: center;
      }

      #errorPopupBox h1 {
        font-size: 3rem;
        font-weight: 700;
        color: #e74c3c;
      }

      #errorPopupBox h2 {
        font-size: 1.5rem;
        font-weight: 700;
        color: #333;
        margin: 10px 0;
      }

      #errorMessage {
        font-size: 1rem;
        color: #666;
        background-color: #ffffff;
        padding: 15px;
        border-radius: 5px;
        margin: 20px 0;
        border-left: 4px solid #e74c3c;
        text-align: left;
        word-wrap: break-word;
      }

      #closeErrorPopup {
        display: inline-block;
        margin-top: 10px;
        padding: 10px 24px;
        background-color: #3498db;
        color: #fff;
        text-decoration: none;
        border-radius: 5px;
        font-weight: bold;
        transition: background-color 0.3s ease, transform 0.2s ease;
        cursor: pointer;
      }

      #closeErrorPopup:hover {
        background-color: #2980b9;
        transform: translateY(-2px);
      }
      
       #flashMessageContainer {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 9998;
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      max-width: 420px;
      padding: 0 1rem;
      pointer-events: none;
    }

    .flash-message {
      padding: 1rem 1.25rem;
      margin-bottom: 0.75rem;
      border-radius: 8px;
      font-weight: 600;
      width: 100%;
      text-align: center;
      pointer-events: all;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      animation: fadeIn 0.4s ease;
    }

    .flash-success {
      background-color: #d1fae5;
      color: #065f46;
      border: 1px solid #10b981;
    }

    .flash-error {
      background-color: #fee2e2;
      color: #991b1b;
      border: 1px solid #ef4444;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }

  </style>
</head>
<body>

<div id="flashMessageContainer" style="position: fixed; top: 20px; left: 50%; transform: translateX(-50%); z-index: 9999;"></div>
<div class="container">
  <h2>Complete & Verify Student Record</h2>
  <form id="finalizeStudentForm" action="/admin/finalize-student/<%= student._id %>" method="POST" enctype="multipart/form-data">
     <h3>Personal Information</h3>
    <label>First Name</label>
    <input type="text" name="firstName" value="<%= student.firstName %>" required>

    <label>Middle Name</label>
    <input type="text" name="middleName" value="<%= student.middleName %>">

    <label>Last Name</label>
    <input type="text" name="lastName" value="<%= student.lastName %>" required>

    <label>Gender</label>
    <select name="gender" required>
      <option value="male" <%= student.gender === 'male' ? 'selected' : '' %>>Male</option>
      <option value="female" <%= student.gender === 'female' ? 'selected' : '' %>>Female</option>
    </select>

    <label>Date of Birth</label>
    <input type="date" name="dob" value="<%= student.dob?.toISOString().split('T')[0] %>" required>

    <label>Student Email</label>
    <input type="email" name="studentEmail" value="<%= student.studentEmail %>">

    <label>Phone</label>
    <input type="tel" name="studentPhone" value="<%= student.studentPhone %>" required>

    <label>Aadhaar Number</label>
    <input type="text" name="aadhaarNumber" value="<%= student.aadhaarNumber %>">

    <label>Caste</label>
    <input type="text" name="caste" value="<%= student.caste %>">

    <label>Sub Caste</label>
    <input type="text" name="subCaste" value="<%= student.subCaste %>">

    <label>Religion</label>
    <input type="text" name="religion" value="<%= student.religion %>">

    <label>BPL/APL Status</label>
    <select name="bplAplStatus">
      <option value="">Select</option>
      <option value="BPL" <%= student.bplAplStatus === 'BPL' ? 'selected' : '' %>>BPL</option>
      <option value="APL" <%= student.bplAplStatus === 'APL' ? 'selected' : '' %>>APL</option>
    </select>

    <!-- Guardian Info -->
    <h3>Guardian Details</h3>
    <label>Guardian 1 Name</label>
    <input type="text" name="guardian1Name" value="<%= student.guardian1Name %>" required>

    <label>Relation</label>
    <select name="guardian1Relation" required>
      <option value="">Select</option>
      <option value="Father" <%= student.guardian1Relation === 'Father' ? 'selected' : '' %>>Father</option>
      <option value="Mother" <%= student.guardian1Relation === 'Mother' ? 'selected' : '' %>>Mother</option>
      <option value="Brother" <%= student.guardian1Relation === 'Brother' ? 'selected' : '' %>>Brother</option>
      <option value="Sister" <%= student.guardian1Relation === 'Sister' ? 'selected' : '' %>>Sister</option>
      <option value="Other" <%= student.guardian1Relation === 'Other' ? 'selected' : '' %>>Other</option>
    </select>

    <label>Guardian 1 Phone</label>
    <input type="tel" name="guardian1Phone" value="<%= student.guardian1Phone %>" required>

    <label>Guardian 1 Email</label>
    <input type="email" name="guardian1Email" value="<%= student.guardian1Email %>">

    <label>Guardian 1 Occupation</label>
    <input type="text" name="guardian1Occupation" value="<%= student.guardian1Occupation %>">

    <label>Guardian 1 Income</label>
    <input type="number" name="guardian1Income" value="<%= student.guardian1Income %>">

    <label>Guardian 2 Name</label>
    <input type="text" name="guardian2Name" value="<%= student.guardian2Name %>">

    <label>Guardian 2 Relation</label>
    <input type="text" name="guardian2Relation" value="<%= student.guardian2Relation %>">

    <label>Guardian 2 Occupation</label>
    <input type="text" name="guardian2Occupation" value="<%= student.guardian2Occupation %>">

    <label>Guardian 2 Income</label>
    <input type="number" name="guardian2Income" value="<%= student.guardian2Income %>">

    <!-- Address -->
    <h3>Address</h3>
    <label>Address Line 1</label>
    <input type="text" name="address1" value="<%= student.address1 %>" required>

    <label>Address Line 2</label>
    <input type="text" name="address2" value="<%= student.address2 %>">

    <label>City</label>
    <input type="text" name="city" value="<%= student.city %>">

    <label>Block</label>
    <input type="text" name="block" value="<%= student.block %>">

    <label>District</label>
    <input type="text" name="district" value="<%= student.district %>" required>

    <label>State</label>
    <input type="text" name="state" value="<%= student.state %>" required>

    <label>Zipcode</label>
    <input type="text" name="zipcode" value="<%= student.zipcode %>" required>

    <label>Country</label>
    <input type="text" name="country" value="<%= student.country || 'India' %>">

    <!-- Institutional Fields -->
    <h3>Institutional Information</h3>
    <label>Registration Number</label>
    <input type="text" name="registration_number" value="<%= student.registration_number %>">

    <label>Enrollment Number</label>
    <input type="text" name="enrollmentNumber" value="<%= student.enrollmentNumber %>">

    <label>Class Assigned</label>
    <input type="text" name="classAssigned" value="<%= student.classAssigned %>">

    <label>Course</label>
    <input type="text" name="course" value="<%= student.course %>">

    <label>Academic Year</label>
    <input type="text" name="academicYear" value="<%= student.academicYear %>">

    <label>Academic Session</label>
    <input type="text" name="academicSession" value="<%= student.academicSession %>">

    <label>Batch</label>
    <input type="text" name="batch" value="<%= student.batch %>">

    <label>Joining Date</label>
    <input type="date" name="joiningDate" value="<%= student.joiningDate?.toISOString().split('T')[0] %>">

    <label>Current Semester</label>
    <input type="text" name="currentSemester" value="<%= student.currentSemester %>">

    <label>Subjects (comma separated)</label>
    <input type="text" name="subjects" value="<%= student.subjects?.join(', ') %>">

    <!-- Family Members -->
    <h3>Family Members</h3>
    <% for (let i = 0; i < 6; i++) { const member = student.familyMembers?.[i] || {}; %>
      <label>Member <%= i+1 %> Name</label>
      <input type="text" name="familyMembers[<%= i %>][name]" value="<%= member.name || '' %>">

      <label>Age</label>
      <input type="number" name="familyMembers[<%= i %>][age]" value="<%= member.age || '' %>">

      <label>Relation</label>
      <input type="text" name="familyMembers[<%= i %>][relation]" value="<%= member.relation || '' %>">

      <label>Education</label>
      <input type="text" name="familyMembers[<%= i %>][education]" value="<%= member.education || '' %>">

      <label>Other Info</label>
      <input type="text" name="familyMembers[<%= i %>][otherInfo]" value="<%= member.otherInfo || '' %>">
      <hr style="grid-column: 1 / -1;">
    <% } %>

    <label>Total Family Members</label>
    <input type="number" name="totalFamilyMembers" value="<%= student.totalFamilyMembers %>">

    <!-- Hostel/Transport -->
    <h3>Hostel & Transport</h3>
    <label>Is Hostel Resident?</label>
    <select name="isHostelResident">
      <option value="false" <%= !student.isHostelResident ? 'selected' : '' %>>No</option>
      <option value="true" <%= student.isHostelResident ? 'selected' : '' %>>Yes</option>
    </select>

    <label>Hostel Joining Date</label>
    <input type="date" name="hostelJoiningDate" value="<%= student.hostelJoiningDate?.toISOString().split('T')[0] %>">

    <label>Hostel Duration (months)</label>
    <input type="number" name="hostelDurationMonths" value="<%= student.hostelDurationMonths %>">

    <label>Hostel within Campus?</label>
    <select name="hostelWithinCampus">
      <option value="false" <%= !student.hostelWithinCampus ? 'selected' : '' %>>No</option>
      <option value="true" <%= student.hostelWithinCampus ? 'selected' : '' %>>Yes</option>
    </select>

    <label>Requires Transport?</label>
    <select name="isTransportResident">
      <option value="false" <%= !student.isTransportResident ? 'selected' : '' %>>No</option>
      <option value="true" <%= student.isTransportResident ? 'selected' : '' %>>Yes</option>
    </select>

    <!-- Bank Info -->
    <h3>Bank Details</h3>
    <label>Bank Account Number</label>
    <input type="text" name="bankAccountNumber" value="<%= student.bankAccountNumber %>">

    <label>IFSC Code</label>
    <input type="text" name="ifscCode" value="<%= student.ifscCode %>">

    <label>Bank Name</label>
    <input type="text" name="bankName" value="<%= student.bankName %>">

    <label>Bank Branch</label>
    <input type="text" name="bankBranch" value="<%= student.bankBranch %>">

    <label>Aadhaar Linked to Bank?</label>
    <select name="isAadhaarLinkedToBank">
      <option value="false" <%= !student.isAadhaarLinkedToBank ? 'selected' : '' %>>No</option>
      <option value="true" <%= student.isAadhaarLinkedToBank ? 'selected' : '' %>>Yes</option>
    </select>

    <!-- Uploads -->
    <h3>Upload</h3>
    <label>Student Photo</label>
    <input type="file" name="profileImage" accept="image/*">

    <label>Upload Supporting Documents (PDF/Image)</label>
    <input type="file" name="documents" multiple>

    <button type="submit">Save & Finalize</button>
    <button type="submit">Save & Finalize</button>
  </form>
</div>

<script>
  const form = document.getElementById('finalizeStudentForm');
  const errorContainer = document.getElementById('errorPopupContainer');
  const errorMessage = document.getElementById('errorMessage');
  const closePopup = document.getElementById('closePopup');

  closePopup.addEventListener('click', () => {
    errorContainer.style.display = 'none';
  });

  form.addEventListener('submit', async function (e) {
    e.preventDefault();

    const formData = new FormData(form);

    try {
      const response = await fetch(form.action, {
        method: 'POST',
        body: formData,
      });

        if (!res.ok) {
        const contentType = res.headers.get('Content-Type') || '';

        if (contentType.includes('text/html')) {
          const html = await res.text();
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = html;
         
          const popup = tempDiv.querySelector('#errorPopupContainer');
          const scripts = tempDiv.querySelectorAll('script');

          if (popup) {
            document.body.prepend(popup);

            // Re-execute any inline scripts inside the error page
            scripts.forEach((script) => {
              const newScript = document.createElement('script');
              if (script.src) {
                newScript.src = script.src;
              } else {
                newScript.textContent = script.textContent;
              }
              document.body.appendChild(newScript);
            });
          } else {
            // alert('An unknown error occurred.');
            showFlashMessage('error', 'An unknown error occurred.');
          }

          return;
        }

        // alert('Server error: unexpected content type.');
        showFlashMessage('error', 'Unexpected content type.');
      }

         else {
        // Redirect on success
        showFlashMessage('success', 'Admission successful.');
        setTimeout(() => window.location.href = '/admin/students', 1500);
        // window.location.href = '/admin/students'; // ✅ update to your desired success redirect
      }
    } catch (err) {
      showFlashMessage('error', 'Failed to submit form. Please try again.');
    }
  });

  function showFlashMessage(type, message, duration = 4000) {
    const container = document.getElementById('flashMessageContainer');
    const msg = document.createElement('div');
    msg.classList.add('flash-message');
    msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
    msg.textContent = message;

    container.appendChild(msg);

    setTimeout(() => {
      msg.style.opacity = '0';
      msg.style.transform = 'translateY(-10px)';
      setTimeout(() => msg.remove(), 500);
    }, duration);
    }
    async function getClientIP() {
    const res = await fetch('https://api.ipify.org?format=json');
    const data = await res.json();
    return data.ip;
  }


</script>
</body>
</html>
