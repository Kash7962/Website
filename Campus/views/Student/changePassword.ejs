<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Change Password</title>
  <style>

        #errorPopupContainer {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        background: rgba(0, 0, 0, 0.4);
        font-family: 'Montserrat', sans-serif;
      }

      #errorPopupContainer * {
        box-sizing: border-box;
        font-family: inherit;
        margin: 0;
        padding: 0;
      }

      #errorPopupBox {
        max-width: 400px;
        width: 90%;
        padding: 30px;
        border-radius: 10px;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(6px);
        border: 1px solid rgba(0, 0, 0, 0.1);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        text-align: center;
      }

      #errorPopupBox h1 {
        font-size: 3rem;
        font-weight: 700;
        color: #e74c3c;
      }

      #errorPopupBox h2 {
        font-size: 1.5rem;
        font-weight: 700;
        color: #333;
        margin: 10px 0;
      }

      #errorMessage {
        font-size: 1rem;
        color: #666;
        background-color: #ffffff;
        padding: 15px;
        border-radius: 5px;
        margin: 20px 0;
        border-left: 4px solid #e74c3c;
        text-align: left;
        word-wrap: break-word;
      }

      #closeErrorPopup {
        display: inline-block;
        margin-top: 10px;
        padding: 10px 24px;
        background-color: #3498db;
        color: #fff;
        text-decoration: none;
        border-radius: 5px;
        font-weight: bold;
        transition: background-color 0.3s ease, transform 0.2s ease;
        cursor: pointer;
      }

      #closeErrorPopup:hover {
        background-color: #2980b9;
        transform: translateY(-2px);
      }

       #flashMessageContainer {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 9998;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 420px;
    padding: 0 1rem;
    pointer-events: none;
  }

  .flash-message {
    padding: 1rem 1.25rem;
    margin-bottom: 0.75rem;
    border-radius: 8px;
    font-weight: 600;
    width: 100%;
    text-align: center;
    pointer-events: all;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    animation: fadeIn 0.4s ease;
  }

  .flash-success {
    background-color: #d1fae5;
    color: #065f46;
    border: 1px solid #10b981;
  }

  .flash-error {
    background-color: #fee2e2;
    color: #991b1b;
    border: 1px solid #ef4444;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

    body {
      font-family: Arial, sans-serif;
      background-color: #f4f4f4;
      padding: 2rem;
    }

    .container {
      max-width: 400px;
      margin: auto;
      background: #fff;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    h2 {
      text-align: center;
      margin-bottom: 1.5rem;
    }

    input, button {
      width: 100%;
      padding: 0.6rem;
      margin: 0.5rem 0;
      font-size: 1rem;
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    button {
      background-color: #28a745;
      color: white;
      cursor: pointer;
      font-weight: bold;
    }

    button:hover {
      background-color: #218838;
    }
  </style>
</head>
<body>
  <div id="flashMessageContainer" style="position: fixed; top: 20px; left: 50%; transform: translateX(-50%); z-index: 9999;"></div>
  <div class="container">
    <h2>Change Password</h2>
    <input type="password" id="currentPassword" placeholder="Current Password" required />
    <input type="password" id="newPassword" placeholder="New Password" required />
    <button id="submitChange">Change Password</button>
  </div>

  <script>
    function parseJwt(token) {
      try {
        return JSON.parse(atob(token.split('.')[1]));
      } catch (e) {
        return null;
      }
    }

    document.getElementById('submitChange').addEventListener('click', async () => {
      const currentPassword = document.getElementById('currentPassword').value.trim();
      const newPassword = document.getElementById('newPassword').value.trim();
      const token = localStorage.getItem('token');

      if (!token || !currentPassword || !newPassword) {
        // return alert('All fields are required and you must be logged in
        return  showFlashMessage('error', 'All fields are required and you must be logged in');
      }

      const decoded = parseJwt(token);
      const _id = decoded?._id;

      if (!_id) return alert('Invalid token.');

      try {
        const res = await fetch('/Student/change-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`
          },
          body: JSON.stringify({ _id, currentPassword, newPassword })
        });

        if (!res.ok) {
        const contentType = res.headers.get('Content-Type') || '';

        if (contentType.includes('text/html')) {
          const html = await res.text();
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = html;

          const popup = tempDiv.querySelector('#errorPopupContainer');
          const scripts = tempDiv.querySelectorAll('script');

          if (popup) {
            document.body.prepend(popup);

            // Re-execute any inline scripts inside the error page
            scripts.forEach((script) => {
              const newScript = document.createElement('script');
              if (script.src) {
                newScript.src = script.src;
              } else {
                newScript.textContent = script.textContent;
              }
              document.body.appendChild(newScript);
            });
          } else {
            // alert('An unknown error occurred.');
             showFlashMessage('error', 'An unknown error occurred.');
          }

          return;
        }

        // alert('Server error: unexpected content type.');
         showFlashMessage('error', 'Server error: unexpected content type.');
      }

        const data = await res.json();
        // alert('Password updated successfully!');
         showFlashMessage('success', 'Password updated successfully!');
        // window.history.back(); // Redirect to dashboard after successful change
        setTimeout(() => window.location.history.back(), 1500);
      } catch (err) {
        console.error(err);
        // alert('Error updating password.');
         showFlashMessage('error', 'Error updating password.');
      }
    });

    function showFlashMessage(type, message, duration = 4000) {
    const container = document.getElementById('flashMessageContainer');
    const msg = document.createElement('div');
    msg.classList.add('flash-message');
    msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
    msg.textContent = message;

    container.appendChild(msg);

    setTimeout(() => {
      msg.style.opacity = '0';
      msg.style.transform = 'translateY(-10px)';
      setTimeout(() => msg.remove(), 500);
    }, duration);
    }
    async function getClientIP() {
    const res = await fetch('https://api.ipify.org?format=json');
    const data = await res.json();
    return data.ip;
  }

  </script>
</body>
</html>
