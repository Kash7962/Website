<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Upload Assignment</title>
  <style>

    #errorPopupContainer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    background: rgba(0, 0, 0, 0.4);
    font-family: 'Montserrat', sans-serif;
  }

  #errorPopupContainer * {
    box-sizing: border-box;
    font-family: inherit;
    margin: 0;
    padding: 0;
  }

  #errorPopupBox {
    max-width: 400px;
    width: 90%;
    padding: 30px;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(6px);
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    text-align: center;
  }

  #errorPopupBox h1 {
    font-size: 3rem;
    font-weight: 700;
    color: #e74c3c;
  }

  #errorPopupBox h2 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #333;
    margin: 10px 0;
  }

  #errorMessage {
    font-size: 1rem;
    color: #666;
    background-color: #ffffff;
    padding: 15px;
    border-radius: 5px;
    margin: 20px 0;
    border-left: 4px solid #e74c3c;
    text-align: left;
    word-wrap: break-word;
  }

  #closeErrorPopup {
    display: inline-block;
    margin-top: 10px;
    padding: 10px 24px;
    background-color: #3498db;
    color: #fff;
    text-decoration: none;
    border-radius: 5px;
    font-weight: bold;
    transition: background-color 0.3s ease, transform 0.2s ease;
    cursor: pointer;
  }

  #closeErrorPopup:hover {
    background-color: #2980b9;
    transform: translateY(-2px);
  }

   #flashMessageContainer {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 9998;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 420px;
    padding: 0 1rem;
    pointer-events: none;
  }

  .flash-message {
    padding: 1rem 1.25rem;
    margin-bottom: 0.75rem;
    border-radius: 8px;
    font-weight: 600;
    width: 100%;
    text-align: center;
    pointer-events: all;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    animation: fadeIn 0.4s ease;
  }

  .flash-success {
    background-color: #d1fae5;
    color: #065f46;
    border: 1px solid #10b981;
  }

  .flash-error {
    background-color: #fee2e2;
    color: #991b1b;
    border: 1px solid #ef4444;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      background-color: #f4f4f4;
    }

    h2, h3 {
      color: #333;
      text-align: center;
    }

    form {
      max-width: 600px;
      margin: 0 auto 30px auto;
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }

    label {
      display: block;
      margin-top: 15px;
      font-weight: bold;
    }

    input[type="text"],
    input[type="date"],
    select,
    input[type="file"] {
      width: 100%;
      padding: 8px;
      margin-top: 5px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }

    button {
      margin-top: 20px;
      padding: 10px 20px;
      background-color: #007BFF;
      border: none;
      color: white;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background-color: #0056b3;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 40px;
      background-color: white;
    }

    table th,
    table td {
      padding: 10px;
      text-align: center;
      border: 1px solid #ccc;
    }

    img {
      max-height: 80px;
      object-fit: contain;
    }

    form.delete-form {
      display: inline;
    }

    .pdf-link {
      text-decoration: none;
      color: #007BFF;
    }

    .pdf-link:hover {
      text-decoration: underline;
    }
  </style>
</head>
<body>
  <div id="flashMessageContainer" style="position: fixed; top: 20px; left: 50%; transform: translateX(-50%); z-index: 9999;"></div>
  <h2>Upload Assignment</h2>

  <form action="/Staff/Teaching/assignments" method="POST" enctype="multipart/form-data">
    <label for="title">Assignment Title:</label>
    <input type="text" name="title" id="title" required>

    <label for="classAssigned">Select Class:</label>
    <select name="classAssigned" id="classAssigned" required>
      <% if (user.classAssigned && Array.isArray(user.classAssigned)) { %>
        <% user.classAssigned.forEach(cls => { %>
          <option value="<%= cls %>"><%= cls %></option>
        <% }); %>
      <% } %>
    </select>

    <label for="submissionDate">Submission Date:</label>
    <input type="date" name="submissionDate" id="submissionDate" required>

    <label for="file">Upload File (PDF/Image):</label>
    <input type="file" name="file" id="file" accept=".pdf, image/*" required>

    <button type="submit">Upload Assignment</button>
  </form>

  <h3>Your Uploaded Assignments</h3>
  <table>
    <thead>
      <tr>
        <th>Title</th>
        <th>Class</th>
        <th>Submission Date</th>
        <th>File</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <% if (assignments.length > 0) { %>
        <% assignments.forEach(a => { %>
          <tr>
            <td><%= a.title %></td>
            <td><%= a.classAssigned %></td>
            <td><%= new Date(a.submissionDate).toLocaleDateString() %></td>
            <td>
              <% if (a.file.endsWith('.pdf')) { %>
                <a href="/uploads/teaching/assignment/<%= a.file %>" target="_blank" class="pdf-link">View PDF</a>
              <% } else { %>
                <img src="/uploads/teaching/assignment/<%= a.file %>" alt="Assignment Image">
              <% } %>
            </td>
            <td>
              <form action="/Staff/Teaching/assignments/delete/<%= a._id %>" method="POST" class="delete-form" onsubmit="return confirm('Are you sure you want to delete this assignment?');">
                <button type="submit">Delete</button>
              </form>
            </td>
          </tr>
        <% }); %>
      <% } else { %>
        <tr>
          <td colspan="5">No assignments uploaded yet.</td>
        </tr>
      <% } %>
    </tbody>
  </table>

  <script>
    console.log('Assignment page loaded.');

    const token = localStorage.getItem('token');
    const teacherId = JSON.parse(atob(token.split('.')[1]))._id;

    let user = null;

    async function fetchTeacherData() {
      try {
        const res = await fetch(`/Staff/Teaching/update-profile`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

           if (!res.ok) {
                const contentType = res.headers.get('Content-Type') || '';

                if (contentType.includes('text/html')) {
                const html = await res.text();
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;

                const popup = tempDiv.querySelector('#errorPopupContainer');
                const scripts = tempDiv.querySelectorAll('script');

                if (popup) {
                    document.body.prepend(popup);

                    // Re-execute any inline scripts inside the error page
                    scripts.forEach((script) => {
                    const newScript = document.createElement('script');
                    if (script.src) {
                        newScript.src = script.src;
                    } else {
                        newScript.textContent = script.textContent;
                    }
                    document.body.appendChild(newScript);
                    });
                } else {
                    // alert('An unknown error occurred.');
                    showFlashMessage('error', 'An unknown error occurred. Please try again later.');
                }

                return;
                }

                // alert('Server error: unexpected content type.');
                showFlashMessage('error', 'Server error: unexpected content type.');
            }
          user = await res.json();
        // console.log('Fetched teacher:', user);

        // Example: populate class dropdown dynamically if needed
        const classDropdown = document.getElementById('classAssigned');
        if (Array.isArray(user.classAssigned)) {
          classDropdown.innerHTML = '';
          user.classAssigned.forEach(cls => {
            const opt = document.createElement('option');
            opt.value = cls;
            opt.textContent = cls;
            classDropdown.appendChild(opt);
          });
        }

      } catch (err) {
        console.error('Error fetching teacher data:', err);
      }
    }
    function showFlashMessage(type, message, duration = 4000) {
    const container = document.getElementById('flashMessageContainer');
    const msg = document.createElement('div');
    msg.classList.add('flash-message');
    msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
    msg.textContent = message;

    container.appendChild(msg);

    setTimeout(() => {
      msg.style.opacity = '0';
      msg.style.transform = 'translateY(-10px)';
      setTimeout(() => msg.remove(), 500);
    }, duration);
    }
    async function getClientIP() {
    const res = await fetch('https://api.ipify.org?format=json');
    const data = await res.json();
    return data.ip;
  }
    fetchTeacherData();
  </script>
</body>
</html>
