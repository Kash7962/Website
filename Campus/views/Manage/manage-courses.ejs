<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Manage Course Materials</title>
  <link rel="stylesheet" href="/css/styles.css" />
  <style>

    #errorPopupContainer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    background: rgba(0, 0, 0, 0.4);
    font-family: 'Montserrat', sans-serif;
  }

  #errorPopupContainer * {
    box-sizing: border-box;
    font-family: inherit;
    margin: 0;
    padding: 0;
  }

  #errorPopupBox {
    max-width: 400px;
    width: 90%;
    padding: 30px;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(6px);
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    text-align: center;
  }

  #errorPopupBox h1 {
    font-size: 3rem;
    font-weight: 700;
    color: #e74c3c;
  }

  #errorPopupBox h2 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #333;
    margin: 10px 0;
  }

  #errorMessage {
    font-size: 1rem;
    color: #666;
    background-color: #ffffff;
    padding: 15px;
    border-radius: 5px;
    margin: 20px 0;
    border-left: 4px solid #e74c3c;
    text-align: left;
    word-wrap: break-word;
  }

  #closeErrorPopup {
    display: inline-block;
    margin-top: 10px;
    padding: 10px 24px;
    background-color: #3498db;
    color: #fff;
    text-decoration: none;
    border-radius: 5px;
    font-weight: bold;
    transition: background-color 0.3s ease, transform 0.2s ease;
    cursor: pointer;
  }

  #closeErrorPopup:hover {
    background-color: #2980b9;
    transform: translateY(-2px);
  }

   #flashMessageContainer {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 9998;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 420px;
    padding: 0 1rem;
    pointer-events: none;
  }

  .flash-message {
    padding: 1rem 1.25rem;
    margin-bottom: 0.75rem;
    border-radius: 8px;
    font-weight: 600;
    width: 100%;
    text-align: center;
    pointer-events: all;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    animation: fadeIn 0.4s ease;
  }

  .flash-success {
    background-color: #d1fae5;
    color: #065f46;
    border: 1px solid #10b981;
  }

  .flash-error {
    background-color: #fee2e2;
    color: #991b1b;
    border: 1px solid #ef4444;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

    body {
      font-family: Arial, sans-serif;
      background: #f9f9f9;
      padding: 2rem;
    }

    h1 {
      font-size: 2rem;
      margin-bottom: 1.5rem;
    }

    form {
      background: white;
      padding: 1.5rem;
      border-radius: 6px;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
      margin-bottom: 2rem;
    }

    label {
      font-weight: bold;
      display: block;
      margin-top: 1rem;
    }

    input, button {
      padding: 0.5rem;
      margin-top: 0.5rem;
      width: 100%;
      box-sizing: border-box;
    }

    button {
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1rem;
    }

    .card {
      background: #fff;
      border: 1px solid #ccc;
      padding: 1rem;
      border-radius: 6px;
      box-shadow: 0 1px 4px rgba(0,0,0,0.1);
    }

    iframe, img {
      width: 100%;
      height: 200px;
      object-fit: contain;
      border: 1px solid #ddd;
      margin-top: 0.5rem;
    }

    .btn {
      display: block;
      width: 100%;
      padding: 0.5rem;
      margin-top: 0.75rem;
      border-radius: 4px;
      cursor: pointer;
      border: none;
    }

    .delete-btn {
      background: #dc3545;
      color: white;
      display: none;
    }

    .download-btn {
      background: #28a745;
      color: white;
      text-align: center;
      text-decoration: none;
    }
  </style>
</head>
<body>
  <div id="flashMessageContainer" style="position: fixed; top: 20px; left: 50%; transform: translateX(-50%); z-index: 9999;"></div>
  <h1>Manage Course Materials</h1>

  <!-- Upload Form -->
  <form id="uploadForm" enctype="multipart/form-data">
    <label for="courseName">Course Material Name</label>
    <input type="text" name="courseName" id="courseName" required />

    <label for="file">Upload PDF/Image</label>
    <input type="file" name="file" id="file" accept="application/pdf,image/*" required />

    <button type="submit">Upload</button>
  </form>

  <!-- Display Course Materials -->
  <div class="grid" id="materialsGrid">
    <% files.forEach(file => { %>
      <div class="card" id="card-<%= file._id %>">
        <p><strong><%= file.courseName %></strong></p>

        <% if (file.filename.endsWith('.pdf')) { %>
          <iframe src="/uploads/teaching/courses/<%= file.filename %>" frameborder="0"></iframe>
        <% } else { %>
          <img src="/uploads/teaching/courses/<%= file.filename %>" alt="Course Material" />
        <% } %>

        <p>Uploaded by: <%= file.uploadedBy.name %></p>
        <p>Uploaded on: <%= new Date(file.uploadedAt).toLocaleString() %></p>

        <!-- Download Button -->
        <a
          href="/uploads/teaching/courses/<%= file.filename %>"
          class="btn download-btn"
          download="<%= file.courseName %>"
        >
          Download
        </a>

        <!-- Delete Button -->
        <button
          class="btn delete-btn"
          data-email="<%= file.uploadedBy.email %>"
          data-id="<%= file._id %>"
        >
          Delete
        </button>
      </div>
    <% }) %>
  </div>

  <script>
  const token = localStorage.getItem("token");
  let user = null;
  let _id, username, email;

  if (token) {
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      user = payload;

      // Now safely assign values
      _id = user._id;
      username = user.username;
      email = user.email;

    } catch (e) {
      console.error("Failed to decode token:", e);
    }
  }
  console.log("User:", user.id, user.username, user.email);

  // If token is missing or invalid, stop here
  if (!user) {
    // alert("You are not logged in. Please log in again.");
     showFlashMessage('error', 'You are not logged in. Please log in again.');
    // window.location.href = "/Staff/login";
    setTimeout(() => window.location.href = "/Staff/login", 1500);
  }

  // Upload Logic
  const uploadForm = document.getElementById('uploadForm');
  uploadForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData();
    formData.append("courseName", document.getElementById("courseName").value);
    formData.append("file", document.getElementById("file").files[0]);
    formData.append("userId", _id);
    formData.append("username", username);
    formData.append("email", email);

    try {
      const res = await fetch('/Staff/Teaching/upload-course', {
        method: 'POST',
        body: formData
      });
       if (!res.ok) {
                const contentType = res.headers.get('Content-Type') || '';

                if (contentType.includes('text/html')) {
                const html = await res.text();
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;

                const popup = tempDiv.querySelector('#errorPopupContainer');
                const scripts = tempDiv.querySelectorAll('script');

                if (popup) {
                    document.body.prepend(popup);

                    // Re-execute any inline scripts inside the error page
                    scripts.forEach((script) => {
                    const newScript = document.createElement('script');
                    if (script.src) {
                        newScript.src = script.src;
                    } else {
                        newScript.textContent = script.textContent;
                    }
                    document.body.appendChild(newScript);
                    });
                } else {
                    // alert('An unknown error occurred.');
                    showFlashMessage('error', 'An unknown error occurred. Please try again later.');
                }

                return;
                }

                // alert('Server error: unexpected content type.');
                showFlashMessage('error', 'Server error: unexpected content type.');
            }
      const result = await res.text();
      if (res.ok) {
        alert("Upload successful!");
         showFlashMessage('success', 'Upload successful!');
        location.reload();
      } else {
        // alert("Upload failed: " + result);
         showFlashMessage('error', 'Upload failed');
      }
    } catch (err) {
      // alert("Upload error");
       showFlashMessage('error', 'Upload error');
    }
  });

  // Show delete buttons only for uploader
  document.querySelectorAll(".delete-btn").forEach(btn => {
    if (btn.dataset.email === email) {
      btn.style.display = "block";
      btn.addEventListener("click", () => deleteMaterial(btn.dataset.id));
    }
  });

  // Delete Logic
  async function deleteMaterial(id) {
    if (!confirm("Are you sure you want to delete this material?")) return;

    try {
      const res = await fetch("/Staff/Teaching/manage-courses/delete", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id, email })
      });
       if (!res.ok) {
                const contentType = res.headers.get('Content-Type') || '';

                if (contentType.includes('text/html')) {
                const html = await res.text();
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;

                const popup = tempDiv.querySelector('#errorPopupContainer');
                const scripts = tempDiv.querySelectorAll('script');

                if (popup) {
                    document.body.prepend(popup);

                    // Re-execute any inline scripts inside the error page
                    scripts.forEach((script) => {
                    const newScript = document.createElement('script');
                    if (script.src) {
                        newScript.src = script.src;
                    } else {
                        newScript.textContent = script.textContent;
                    }
                    document.body.appendChild(newScript);
                    });
                } else {
                    // alert('An unknown error occurred.');
                    showFlashMessage('error', 'An unknown error occurred. Please try again later.');
                }

                return;
                }

                // alert('Server error: unexpected content type.');
                showFlashMessage('error', 'Server error: unexpected content type.');
            }

      const result = await res.text();
      if (res.ok) {
        // alert("Deleted successfully");
        showFlashMessage('success', 'Deleted successfully');
        document.getElementById(`card-${id}`).remove();
      } else {
        // alert("Delete failed: " + result);
        showFlashMessage('error', 'Delete failed');
      }
    } catch (err) {
      // alert("Delete error");
      showFlashMessage('error', 'Delete error');
    }
  }

  function showFlashMessage(type, message, duration = 4000) {
    const container = document.getElementById('flashMessageContainer');
    const msg = document.createElement('div');
    msg.classList.add('flash-message');
    msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
    msg.textContent = message;

    container.appendChild(msg);

    setTimeout(() => {
      msg.style.opacity = '0';
      msg.style.transform = 'translateY(-10px)';
      setTimeout(() => msg.remove(), 500);
    }, duration);
    }
    async function getClientIP() {
    const res = await fetch('https://api.ipify.org?format=json');
    const data = await res.json();
    return data.ip;
  }

</script>
</body>
</html>
