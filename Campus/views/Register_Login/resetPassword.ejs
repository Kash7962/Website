<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Reset Password</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Droid+Serif:wght@400;700&display=swap" rel="stylesheet">
    <style>
        /* Import fonts */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Droid+Serif:wght@400;700&display=swap');

        /* Reset and base styles */
        
        #errorPopupContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            background: rgba(0, 0, 0, 0.4);
            font-family: 'Montserrat', sans-serif;
        }

        #errorPopupContainer * {
            box-sizing: border-box;
            font-family: inherit;
            margin: 0;
            padding: 0;
        }

        #errorPopupBox {
            max-width: 400px;
            width: 90%;
            padding: 30px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        #errorPopupBox h1 {
            font-size: 3rem;
            font-weight: 700;
            color: #e74c3c;
        }

        #errorPopupBox h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin: 10px 0;
        }

        #errorMessage {
            font-size: 1rem;
            color: #666;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #e74c3c;
            text-align: left;
            word-wrap: break-word;
        }

        #closeErrorPopup {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 24px;
            background-color: #3498db;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s ease, transform 0.2s ease;
            cursor: pointer;
        }

        #closeErrorPopup:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }
        
         #flashMessageContainer {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9998;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 420px;
            padding: 0 1rem;
            pointer-events: none;
        }

        .flash-message {
            padding: 1rem 1.25rem;
            margin-bottom: 0.75rem;
            border-radius: 8px;
            font-weight: 600;
            width: 100%;
            text-align: center;
            pointer-events: all;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: fadeIn 0.4s ease;
        }

        .flash-success {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #10b981;
        }

        .flash-error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #ef4444;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Droid Serif', serif;
            background-color: #fef7ed; /* Light background from your main site */
            margin: 0;
            padding: 1rem;
            color: #333;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .container {
            width: 100%;
            max-width: 420px;
            background: #ffffff;
            padding: 2.5rem;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border-top: 5px solid #f97316; /* Orange accent color */
        }

        h2 {
            text-align: center;
            color: #1e40af; /* Blue from your theme */
            margin-bottom: 2rem;
            font-family: 'Inter', sans-serif;
            font-size: 1.75rem;
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 1.25rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        label {
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #4b5563;
            font-size: 0.9rem;
        }

        input {
            padding: 0.75rem 1rem;
            font-size: 1rem;
            font-family: 'Droid Serif', serif;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            transition: border-color 0.3s, box-shadow 0.3s;
        }

        input:focus {
            outline: none;
            border-color: #f97316;
            box-shadow: 0 0 0 3px rgba(249, 115, 22, 0.2);
        }

        button[type="submit"] {
            background-color: #f97316; /* Orange button */
            color: white;
            padding: 0.8rem;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            font-family: 'Inter', sans-serif;
            cursor: pointer;
            transition: background-color 0.3s ease;
            margin-top: 1rem;
        }

        button[type="submit"]:hover {
            background-color: #ea580c;
        }

        .footer-text {
            text-align: center;
            margin-top: 1.5rem;
            font-size: 0.95rem;
        }

        .footer-text a {
            color: #1e40af;
            text-decoration: none;
            font-weight: 600;
        }

        .footer-text a:hover {
            text-decoration: underline;
        }

        @media (max-width: 500px) {
            body {
                padding: 0;
            }
            .container {
                margin: 0;
                border-radius: 0;
                min-height: 100vh;
                box-shadow: none;
                padding: 2rem 1.5rem;
            }
            h2 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
<div id="flashMessageContainer" style="position: fixed; top: 20px; left: 50%; transform: translateX(-50%); z-index: 9999;"></div>
<div class="container">
    <h2>Reset Your Password</h2>

    <form id="resetPasswordForm">
        <div class="form-group">
            <label for="newPassword">New Password *</label>
            <input type="password" id="newPassword" name="newPassword" required placeholder="Enter new password" />
        </div>
        <div class="form-group">
            <label for="confirmPassword">Confirm New Password *</label>
            <input type="password" id="confirmPassword" name="confirmPassword" required placeholder="Re-enter new password" />
        </div>
        <button type="submit">Reset Password</button>
    </form>

    <div class="footer-text">
        Already reset? <a href="/Staff/login">Go back to login</a>
    </div>
</div>

<script>
    const form = document.getElementById('resetPasswordForm');

    form.addEventListener('submit', async function (e) {
        e.preventDefault();

        const params = new URLSearchParams(window.location.search);
        const token = params.get('token');
        const newPassword = document.getElementById('newPassword').value.trim();
        const confirmPassword = document.getElementById('confirmPassword').value.trim();

        if (!token) {
            // alert("Invalid or missing token. Please request a new reset link.");
            showFlashMessage('error', 'Invalid or missing token. Please request a new reset link.');
            return;
        }

        if (!newPassword || newPassword !== confirmPassword) {
            // alert("Passwords do not match.");
            showFlashMessage('error', 'Passwords do not match.');
            return;
        }

        try {
            const res = await fetch('/Staff/reset-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ token, newPassword }),
            });
            
            if (!res.ok) {
                const contentType = res.headers.get('Content-Type') || '';

                if (contentType.includes('text/html')) {
                const html = await res.text();
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;

                const popup = tempDiv.querySelector('#errorPopupContainer');
                const scripts = tempDiv.querySelectorAll('script');

                if (popup) {
                    document.body.prepend(popup);

                    // Re-execute any inline scripts inside the error page
                    scripts.forEach((script) => {
                    const newScript = document.createElement('script');
                    if (script.src) {
                        newScript.src = script.src;
                    } else {
                        newScript.textContent = script.textContent;
                    }
                    document.body.appendChild(newScript);
                    });
                } else {
                    // alert('An unknown error occurred.');
                    showFlashMessage('error', 'An unknown error occurred. Please try again later.');
                }

                return;
                }

                // alert('Server error: unexpected content type.');
                showFlashMessage('error', 'Server error: unexpected content type.');
            }


            const data = await res.json();

            if (res.ok) {
                // alert(data.message || "Password reset successful! You can now log in with your new password.");
                showFlashMessage('success', 'Password reset successful! You can now log in with your new password.');
                // window.location.href = "/Staff/login";
                setTimeout(() => window.location.href = '/Staff/login', 1500);
            } else {
                // alert(data.message || "Password reset failed. The link may have expired.");
                showFlashMessage('error', 'Password reset failed. The link may have expired.');
                
            }

        } catch (err) {
            console.error("Reset error:", err);
            // alert("An error occurred. Please try again.");
            showFlashMessage('error', 'An error occurred. Please try again.');
        }
    });

    function showFlashMessage(type, message, duration = 4000) {
    const container = document.getElementById('flashMessageContainer');
    const msg = document.createElement('div');
    msg.classList.add('flash-message');
    msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
    msg.textContent = message;

    container.appendChild(msg);

    setTimeout(() => {
      msg.style.opacity = '0';
      msg.style.transform = 'translateY(-10px)';
      setTimeout(() => msg.remove(), 500);
    }, duration);
    }
    async function getClientIP() {
    const res = await fetch('https://api.ipify.org?format=json');
    const data = await res.json();
    return data.ip;
  }
</script>

</body>
</html>