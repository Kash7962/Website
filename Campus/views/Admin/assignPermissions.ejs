<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Assign Permissions</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        /* --- STYLES FOR CONSISTENT LOOK AND FEEL --- */
        
        /* Popups and Flash Messages */
        #flashMessageContainer {
            position: fixed; top: 20px; left: 50%;
            transform: translateX(-50%); z-index: 9998; display: flex;
            flex-direction: column; align-items: center; width: 100%;
            max-width: 420px; padding: 0 1rem; pointer-events: none;
        }
        .flash-message {
            padding: 1rem 1.25rem; margin-bottom: 0.75rem; border-radius: 8px;
            font-weight: 600; width: 100%; text-align: center; pointer-events: all;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: fadeIn 0.4s ease;
        }
        .flash-success { background-color: #d1fae5; color: #065f46; border: 1px solid #10b981; }
        .flash-error { background-color: #fee2e2; color: #991b1b; border: 1px solid #ef4444; }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
          #errorPopupContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            background: rgba(0, 0, 0, 0.4);
            font-family: 'Montserrat', sans-serif;
        }

        #errorPopupContainer * {
            box-sizing: border-box;
            font-family: inherit;
            margin: 0;
            padding: 0;
        }

        #errorPopupBox {
            max-width: 400px;
            width: 90%;
            padding: 30px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        #errorPopupBox h1 {
            font-size: 3rem;
            font-weight: 700;
            color: #e74c3c;
        }

        #errorPopupBox h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin: 10px 0;
        }

        #errorMessage {
            font-size: 1rem;
            color: #666;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #e74c3c;
            text-align: left;
            word-wrap: break-word;
        }

        #closeErrorPopup {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 24px;
            background-color: #3498db;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s ease, transform 0.2s ease;
            cursor: pointer;
        }

        #closeErrorPopup:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

        /* Main Page Styles */
        * {
            box-sizing: border-box; margin: 0; padding: 0;
        }
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #fef7ed;
            margin: 0; padding: 2rem; color: #333; min-height: 100vh;
            display: flex; justify-content: center; align-items: center;
        }
        .container {
            width: 100%; max-width: 700px; background: #ffffff;
            padding: 2.5rem; border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border-top: 5px solid #1e40af; /* Blue accent */
        }
        h1 {
            text-align: center; color: #1e40af; margin-bottom: 2.5rem;
            font-family: 'Inter', sans-serif; font-size: 2rem;
        }
        .form-group { margin-bottom: 1.5rem; }
        label {
            display: block; margin-bottom: 0.5rem; font-weight: 600;
            color: #4b5563; font-size: 0.9rem;
        }
        input[type="text"] {
            width: 100%; padding: 0.75rem 1rem; font-size: 1rem;
            font-family: 'Poppins', sans-serif;
            border: 1px solid #d1d5db; border-radius: 8px;
        }
        input[readonly] {
            background-color: #f3f4f6; color: #6b7280; cursor: not-allowed;
        }
        
        /* Permissions Section */
        #permissionsContainer h3 {
            font-family: 'Inter', sans-serif; font-size: 1.25rem; font-weight: 700;
            color: #1e40af; border-bottom: 2px solid #e2e8f0;
            padding-bottom: 0.75rem; margin-bottom: 1.5rem;
        }
        .permissions-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }
        .permission-item {
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            padding: 1rem;
            border-radius: 8px;
            display: flex;
            align-items: center;
            transition: background-color 0.2s ease;
        }
        .permission-item:hover {
            background-color: #f1f5f9;
        }
        .permission-item label {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            width: 100%;
            margin: 0;
            font-weight: 500;
            color: #374151;
            cursor: pointer;
        }
        .permission-item input[type="checkbox"] {
            width: 1.25em;
            height: 1.25em;
            accent-color: #1e40af;
            cursor: pointer;
        }

        /* Form Actions */
        .form-actions {
            margin-top: 2rem;
            text-align: center;
        }
        .btn-submit {
            background-color: #1e40af; color: white;
            padding: 0.8rem 2rem; border: none; border-radius: 8px;
            font-size: 1.1rem; font-weight: 600;
            font-family: 'Inter', sans-serif; cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .btn-submit:hover { background-color: #1c3d90; }
        
        @media (max-width: 600px) {
            body { padding: 0; }
            .container {
                margin: 0; border-radius: 0; min-height: 100vh;
                box-shadow: none; padding: 2rem 1.5rem;
            }
            h1 { font-size: 1.5rem; }
            .permissions-grid { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <div id="flashMessageContainer"></div>
    <div class="container">
        <h1>Assign Permissions to Staff</h1>

        <form id="permissionForm">
            <div class="form-group">
                <label for="staffId">Staff ID</label>
                <input type="text" id="staffId" name="staffId" value="<%= staffId %>" readonly />
            </div>

            <div id="permissionsContainer">
                <h3>Assign Permissions</h3>
                <div class="permissions-grid">
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="enroll_students" <%= permissions.includes('enroll_students') ? 'checked' : '' %> />
                            Enroll Students
                        </label>
                    </div>
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="edit_students" <%= permissions.includes('edit_students') ? 'checked' : '' %> />
                            Edit Students
                        </label>
                    </div>
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="students_payment" <%= permissions.includes('students_payment') ? 'checked' : '' %> />
                            Manage Students Payment
                        </label>
                    </div>
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="document_students" <%= permissions.includes('document_students') ? 'checked' : '' %> />
                            Manage Students Documents
                        </label>
                    </div>
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="result_students" <%= permissions.includes('result_students') ? 'checked' : '' %> />
                            Manage Students Results
                        </label>
                    </div>
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="manage_leaves" <%= permissions.includes('manage_leaves') ? 'checked' : '' %> />
                            Manage Leaves
                        </label>
                    </div>
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="manage_staff_attendance" <%= permissions.includes('manage_staff_attendance') ? 'checked' : '' %> />
                            Manage Staff Attendance
                        </label>
                    </div>
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="manage_calendar" <%= permissions.includes('manage_calendar') ? 'checked' : '' %> />
                            Manage Calendar
                        </label>
                    </div>
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="manage_curriculum" <%= permissions.includes('manage_curriculum') ? 'checked' : '' %> />
                            Manage Curriculum
                        </label>
                    </div>
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="manage_curriculum_teacher" <%= permissions.includes('manage_curriculum_teacher') ? 'checked' : '' %> />
                            Manage Curriculum Teachers
                        </label>
                    </div>
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="manage_inventory" <%= permissions.includes('manage_inventory') ? 'checked' : '' %> />
                            Manage Inventory
                        </label>
                    </div>
                    <div class="permission-item">
                        <label>
                            <input type="checkbox" name="permissions[]" value="create_procurement" <%= permissions.includes('create_procurement') ? 'checked' : '' %> />
                            Create Procurement
                        </label>
                    </div>
                    
                    </div>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn-submit">Save Permissions</button>
            </div>
        </form>
    </div>

    <script>
        // Your original JavaScript logic is preserved below
          window.onload = async () => {
            const token = localStorage.getItem('token');
            try {
                const res = await fetch('/Auth/verify-token', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (!res.ok) {
                    const contentType = res.headers.get('Content-Type') || '';
                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;
                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');
                        if (popup) {
                            document.body.prepend(popup);
                            scripts.forEach((script) => {
                                const newScript = document.createElement('script');
                                if (script.src) newScript.src = script.src;
                                else newScript.textContent = script.textContent;
                                document.body.appendChild(newScript);
                            });
                        } else {
                            showFlashMessage('error', 'An unknown error occurred.');
                        }
                        setTimeout(() => {
                            window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');
                        setTimeout(() => {
                            window.location.href = '/Staff/login';
                        }, 1500);
                    }
                }
            } catch (err) {
                showFlashMessage('error', 'An unknown error occurred.');
             }
              try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                const role = payload.role;
                if (role !== 'Super Admin' && role !== 'Admin') {
                    showFlashMessage('error', 'Unauthorized access.');
                    setTimeout(() => window.location.href = '/Admin/dashboard', 1500);
                }
            } catch (err) {
                console.error('Failed to decode JWT:', err);
                showFlashMessage('error', 'Invalid token.');
            }
            }
        async function handleServerError(res) {
            const contentType = res.headers.get('Content-Type') || '';
            if (contentType.includes('text/html')) {
                const html = await res.text();
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;
                const popup = tempDiv.querySelector('#errorPopupContainer');
                if (popup) {
                    document.body.prepend(popup);
                    const scripts = tempDiv.querySelectorAll('script');
                    scripts.forEach((script) => {
                        const newScript = document.createElement('script');
                        if (script.src) newScript.src = script.src;
                        else newScript.textContent = script.textContent;
                        document.body.appendChild(newScript);
                    });
                } else {
                    showFlashMessage('error', 'An unknown error occurred.');
                }
            } else {
                showFlashMessage('error', 'Server error: unexpected content type.');
            }
        }

        function showFlashMessage(type, message, duration = 4000) {
            const container = document.getElementById('flashMessageContainer');
            const msg = document.createElement('div');
            msg.classList.add('flash-message');
            msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
            msg.textContent = message;
            container.appendChild(msg);
            setTimeout(() => {
                msg.style.opacity = '0';
                setTimeout(() => msg.remove(), 500);
            }, duration);
        }

        
        document.getElementById('permissionForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const form = new FormData(e.target);
            const staffId = form.get('staffId');

            const selectedPermissions = [];
            document.querySelectorAll('input[name="permissions[]"]:checked').forEach((checkbox) => {
                selectedPermissions.push(checkbox.value);
            });

            try {
                const res = await fetch('/Admin/staff/staff-access', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ staffId, permissions: selectedPermissions })
                });
                if(!res.ok) {
                    await handleServerError(res);
                    return;
                }
                if (res.ok) {
                    showFlashMessage('success', 'Permissions updated successfully!');
                    setTimeout(() => window.location.href = '/Admin/staff/get', 1500);
                } else {
                    await handleServerError(res);
                }
            } catch (err) {
                console.error(err);
                showFlashMessage('error', 'Something went wrong.');
            }
        });
    </script>
</body>
</html>