<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Assign Permissions</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 2rem;
    }

    form {
      max-width: 600px;
      margin: auto;
    }

    label, input, select, textarea, button {
      display: block;
      width: 100%;
      margin-bottom: 1rem;
      padding: 0.5rem;
    }


    #errorPopupContainer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    background: rgba(0, 0, 0, 0.4);
    font-family: 'Montserrat', sans-serif;
  }

  #errorPopupContainer * {
    box-sizing: border-box;
    font-family: inherit;
    margin: 0;
    padding: 0;
  }

  #errorPopupBox {
    max-width: 400px;
    width: 90%;
    padding: 30px;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(6px);
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    text-align: center;
  }

  #errorPopupBox h1 {
    font-size: 3rem;
    font-weight: 700;
    color: #e74c3c;
  }

  #errorPopupBox h2 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #333;
    margin: 10px 0;
  }

  #errorMessage {
    font-size: 1rem;
    color: #666;
    background-color: #ffffff;
    padding: 15px;
    border-radius: 5px;
    margin: 20px 0;
    border-left: 4px solid #e74c3c;
    text-align: left;
    word-wrap: break-word;
  }

  #closeErrorPopup {
    display: inline-block;
    margin-top: 10px;
    padding: 10px 24px;
    background-color: #3498db;
    color: #fff;
    text-decoration: none;
    border-radius: 5px;
    font-weight: bold;
    transition: background-color 0.3s ease, transform 0.2s ease;
    cursor: pointer;
  }

  #closeErrorPopup:hover {
    background-color: #2980b9;
    transform: translateY(-2px);
  }

   #flashMessageContainer {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 9998;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 420px;
    padding: 0 1rem;
    pointer-events: none;
  }

  .flash-message {
    padding: 1rem 1.25rem;
    margin-bottom: 0.75rem;
    border-radius: 8px;
    font-weight: 600;
    width: 100%;
    text-align: center;
    pointer-events: all;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    animation: fadeIn 0.4s ease;
  }

  .flash-success {
    background-color: #d1fae5;
    color: #065f46;
    border: 1px solid #10b981;
  }

  .flash-error {
    background-color: #fee2e2;
    color: #991b1b;
    border: 1px solid #ef4444;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }

 #permissionForm {
  max-width: 600px;
  margin: 2rem auto;
  font-family: Arial, sans-serif;
  background-color: #fff;
  padding: 2rem;
  border: 1px solid #ccc;
  border-radius: 10px;
}

.form-group {
  margin-bottom: 1.5rem;
}

label {
  font-weight: bold;
  display: block;
  margin-bottom: 0.5rem;
}

input[type="text"] {
  width: 100%;
  padding: 0.6rem;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 1rem;
}

#permissionsContainer {
  margin-top: 1rem;
}

#permissionsContainer h3 {
  font-size: 1.2rem;
  margin-bottom: 1rem;
}

.permission-group {
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
}

.permission-group label {
  font-weight: normal;
  display: flex;
  align-items: center;
  gap: 0.6rem;
}

.permission-group input[type="checkbox"] {
  width: 18px;
  height: 18px;
  cursor: pointer;
  accent-color: #007bff;
}

.form-actions {
  margin-top: 2rem;
  text-align: center;
}

.btn-submit {
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  background-color: #007bff;
  border: none;
  border-radius: 6px;
  color: white;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.btn-submit:hover {
  background-color: #0056b3;
}




  </style>
</head>
<body>
  <div id="flashMessageContainer"></div>

  <h1>Assign Permissions to Staff</h1>

<form id="permissionForm">
  <div class="form-group">
    <label for="staffId">Staff ID</label>
    <input type="text" id="staffId" name="staffId" value="<%= staffId %>" readonly />
  </div>

  <div id="permissionsContainer">
    <h3>Assign Permissions</h3>
    <div class="permission-group">
      <label>
        <input type="checkbox" name="permissions[]" value="create_exam"
          <%= permissions.includes('create_exam') ? 'checked' : '' %> />
        Create Exam
      </label>
      <label>
        <input type="checkbox" name="permissions[]" value="view_results"
          <%= permissions.includes('view_results') ? 'checked' : '' %> />
        View Results
      </label>
      <label>
        <input type="checkbox" name="permissions[]" value="edit_profile"
          <%= permissions.includes('edit_profile') ? 'checked' : '' %> />
        Edit Profile
      </label>
      <label>
        <input type="checkbox" name="permissions[]" value="manage_attendance"
          <%= permissions.includes('manage_attendance') ? 'checked' : '' %> />
        Manage Attendance
      </label>
      <label>
        <input type="checkbox" name="permissions[]" value="view_library"
          <%= permissions.includes('view_library') ? 'checked' : '' %> />
        View Library
      </label>
      <!-- Add more checkboxes here as needed -->
    </div>
  </div>

  <div class="form-actions">
    <button type="submit" class="btn-submit">Save Permissions</button>
  </div>
</form>



  <script>
     window.onload = async () => {
      const token = localStorage.getItem('token');
      // if (!token) {
      //   showFlashMessage('error', 'No token found. Please log in.');
      //   return;
      // }

       try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
                    try {
                        const payload = JSON.parse(atob(token.split('.')[1]));
                        const role = payload.role;

                        if (role !== 'Super Admin' && role !== 'Admin') {
                        showFlashMessage('error', 'Unauthorized access.');
                        setTimeout(() => window.location.href = '/Admin/dashboard', 1500);
                        }
                    } catch (err) {
                        console.error('Failed to decode JWT:', err);
                        showFlashMessage('error', 'Invalid token.');
                    }
                 };
                
            

    async function handleServerError(res) {
    const contentType = res.headers.get('Content-Type') || '';

    if (contentType.includes('text/html')) {
      const html = await res.text();
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = html;

      const popup = tempDiv.querySelector('#errorPopupContainer');
      const scripts = tempDiv.querySelectorAll('script');

      if (popup) {
        document.body.prepend(popup);
        scripts.forEach((script) => {
          const newScript = document.createElement('script');
          if (script.src) newScript.src = script.src;
          else newScript.textContent = script.textContent;
          document.body.appendChild(newScript);
        });
      } else {
        showFlashMessage('error', 'An unknown error occurred.');
      }
    } else {
      showFlashMessage('error', 'Server error: unexpected content type.');
    }
  }

    function showFlashMessage(type, message, duration = 4000) {
      const container = document.getElementById('flashMessageContainer');
      const msg = document.createElement('div');
      msg.classList.add('flash-message', type === 'success' ? 'flash-success' : 'flash-error');
      msg.textContent = message;
      container.appendChild(msg);
      setTimeout(() => msg.remove(), duration);
    }

     let roleIndex = 1;

  document.getElementById('permissionForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    const form = new FormData(e.target);
    const staffId = form.get('staffId');

    // Collect all checked permissions
    const selectedPermissions = [];
    document.querySelectorAll('input[name="permissions[]"]:checked').forEach((checkbox) => {
      selectedPermissions.push(checkbox.value);
    });

    try {
      const res = await fetch('/Admin/staff/staff-access', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ staffId, permissions: selectedPermissions })
      });

      if (res.ok) {
        showFlashMessage('success', 'Permissions updated successfully!');
         setTimeout(() => window.location.href = '/Admin/staff/get', 1500);
      } else {
        await handleServerError(res);
      }
    } catch (err) {
      console.error(err);
      showFlashMessage('error', 'Something went wrong.');
    }
  });


  </script>
</body>
</html>
