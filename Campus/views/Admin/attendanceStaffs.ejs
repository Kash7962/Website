<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Admin Attendance Records</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #1e40af;
            --danger-red: #dc2626;
            --danger-red-dark: #b91c1c;
            --success-green: #16a34a;
            --text-dark: #1e293b;
            --text-light: #475569;
            --border-color: #e2e8f0;
            --background-light: #f8fafc;
            --background-white: #ffffff;
        }

        body {
            font-family: 'Inter', system-ui, sans-serif;
            background: var(--background-light);
            margin: 0;
            padding: 40px 20px;
            color: var(--text-dark);
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        h1 {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-blue);
            text-align: center;
            margin-bottom: 24px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: var(--background-white);
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            border: 1px solid var(--border-color);
            overflow: hidden;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 16px 24px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
            font-size: 0.875rem;
            vertical-align: middle;
        }

        tbody tr:last-child td {
            border-bottom: none;
        }

        th {
            background: var(--background-light);
            font-weight: 600;
            color: var(--text-light);
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.05em;
        }

        tbody tr:hover {
            background: #f9fafb;
        }
        
        td:last-child {
            text-align: center;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 6px 12px;
            border: 1px solid transparent;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 600;
            transition: all 0.2s ease-in-out;
            text-decoration: none;
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .btn-danger {
            background-color: var(--danger-red);
            color: var(--background-white);
        }

        .btn-danger:hover {
            background-color: var(--danger-red-dark);
        }

         #errorPopupContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            background: rgba(0, 0, 0, 0.4);
            font-family: 'Montserrat', sans-serif;
        }

        #errorPopupContainer * {
            box-sizing: border-box;
            font-family: inherit;
            margin: 0;
            padding: 0;
        }

        #errorPopupBox {
            max-width: 400px;
            width: 90%;
            padding: 30px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        #errorPopupBox h1 {
            font-size: 3rem;
            font-weight: 700;
            color: #e74c3c;
        }

        #errorPopupBox h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin: 10px 0;
        }

        #errorMessage {
            font-size: 1rem;
            color: #666;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #e74c3c;
            text-align: left;
            word-wrap: break-word;
        }

        #closeErrorPopup {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 24px;
            background-color: #3498db;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s ease, transform 0.2s ease;
            cursor: pointer;
        }

        #closeErrorPopup:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

            #flashMessageContainer {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9998;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 420px;
            padding: 0 1rem;
            pointer-events: none;
        }

        .flash-message {
            padding: 1rem 1.25rem;
            margin-bottom: 0.75rem;
            border-radius: 8px;
            font-weight: 600;
            width: 100%;
            text-align: center;
            pointer-events: all;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: fadeIn 0.4s ease;
        }

        .flash-success {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #10b981;
        }

        .flash-error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #ef4444;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

         .modal-backdrop {
          position: fixed;
          inset: 0;
          background: rgba(0, 0, 0, 0.6);
          display: none;
          justify-content: center;
          align-items: center;
          z-index: 1000;
        }

        .modal-backdrop.active {
          display: flex;
        }

        .modal-content {
          background: #fff;
          padding: 20px;
          border-radius: 10px;
          max-width: 400px;
          text-align: center;
          box-shadow: 0 4px 20px rgba(0,0,0,0.25);
        }

        .modal-actions {
          display: flex;
          justify-content: center;
          gap: 12px;
          margin-top: 20px;
        }

        .btn-secondary {
          background: #e5e7eb;
          color: #374151;
          padding: 8px 14px;
          border-radius: 8px;
          cursor: pointer;
          font-weight: 600;
          transition: background 0.2s ease;
        }

        .btn-secondary:hover {
          background: #d1d5db;
        }

        .btn-danger-solid {
          background: #ef4444;
          color: white;
          padding: 8px 14px;
          border-radius: 8px;
          cursor: pointer;
          font-weight: 600;
          transition: background 0.2s ease;
        }

        .btn-danger-solid:hover {
          background: #dc2626;
        }
    </style>
</head>
<body>
    <div id="flashMessageContainer"></div>
    <h1>All Attendance Records</h1>

    <div class="container">
        <table>
            <thead>
                <tr>
                    <th>Staff Name</th>
                    <th>Email</th>
                    <th>Date</th>
                    <th>Status</th>
                    <th>Check-In</th>
                    <th>Check-Out</th>
                    <th>Marked By</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="attendanceBody">
                <% attendanceRecords.forEach(record => { %>
                    <tr data-id="<%= record._id %>">
                        <td><%= record.staff?.name || 'N/A' %></td>
                        <td><%= record.staff?.email || 'N/A' %></td>
                        <td><%= record.date.toLocaleDateString() %></td>
                        <td><%= record.status %></td>
                        <td><%= record.checkInTime ? new Date(record.checkInTime).toLocaleTimeString() : '-' %></td>
                        <td><%= record.checkOutTime ? new Date(record.checkOutTime).toLocaleTimeString() : '-' %></td>
                        <td><%= record.markedBy %></td>
                        <td>
                        <!-- <td><button class="btn btn-danger">Delete</button> -->
                            <button id="deleteAllBtn" class="btn btn-danger" type="button" title="Delete record">Delete</button>
                            <div id="deleteModal" class="modal-backdrop">
                            <div class="modal-content">
                            <h3 id="deleteModalTitle">Are you sure?</h3>
                            <p id="deleteModalMessage">
                            This will delete <strong>the attendance record</strong>. This action cannot be undone.
                            </p>
                            <div class="modal-actions">
                            <button id="cancelDeleteBtn" class="btn-secondary">Cancel</button>
                            <button id="confirmDeleteBtn" class="btn-danger-solid">Delete</button>
                            </div>
                        </div>
                        </div>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
    </div>

    <script>
        window.onload = async () => {
            const token = localStorage.getItem('token');
            try {
                const res = await fetch('/Auth/verify-token', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    }
                });
                if (!res.ok) {
                    const contentType = res.headers.get('Content-Type') || '';
                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;
                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');
                        if (popup) {
                            document.body.prepend(popup);
                            scripts.forEach((script) => {
                                const newScript = document.createElement('script');
                                if (script.src) newScript.src = script.src;
                                else newScript.textContent = script.textContent;
                                document.body.appendChild(newScript);
                            });
                        } else {
                            showFlashMessage('error', 'An unknown error occurred.');
                        }
                        setTimeout(() => {
                            window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');
                        setTimeout(() => {
                            window.location.href = '/Staff/login';
                        }, 1500);
                    }
                }
            } catch (err) {
                showFlashMessage('error', 'An unknown error occurred.');
            }
             try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                const role = payload.role;
                if (role !== 'Super Admin') {
                    showFlashMessage('error', 'Unauthorized access.');
                    setTimeout(() => window.location.href = '/Admin/dashboard', 1500);
                }
            } catch (err) {
                console.error('Failed to decode JWT:', err);
                showFlashMessage('error', 'Invalid token.');
            }
        }
        // Flash message utility
        async function handleServerError(res) {
            const contentType = res.headers.get('Content-Type') || '';

            if (contentType.includes('text/html')) {
            const html = await res.text();
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = html;

            const popup = tempDiv.querySelector('#errorPopupContainer');
            const scripts = tempDiv.querySelectorAll('script');

            if (popup) {
                document.body.prepend(popup);
                scripts.forEach((script) => {
                const newScript = document.createElement('script');
                if (script.src) newScript.src = script.src;
                else newScript.textContent = script.textContent;
                document.body.appendChild(newScript);
                });
            } else {
                showFlashMessage('error', 'An unknown error occurred.');
            }
            } else {
            showFlashMessage('error', 'Server error: unexpected content type.');
            }
        } 

        function showFlashMessage(type, message, duration = 4000) {
            const container = document.getElementById('flashMessageContainer');
            const msg = document.createElement('div');
            msg.classList.add('flash-message');
            msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
            msg.textContent = message;

            container.appendChild(msg);

            setTimeout(() => {
            msg.style.opacity = '0';
            msg.style.transform = 'translateY(-10px)';
            setTimeout(() => msg.remove(), 500);
            }, duration);
        } 

        let recordToDelete = null; // store row temporarily

        function attachDeleteEvents() {
            const deleteButtons = document.querySelectorAll('.btn-danger');

            deleteButtons.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const row = e.target.closest('tr');
                    recordToDelete = {
                        row,
                        id: row.dataset.id
                    };
                    document.getElementById('deleteModal').classList.add('active'); // show modal
                });
            });
        }

        // Cancel delete
        document.getElementById('cancelDeleteBtn').addEventListener('click', () => {
            document.getElementById('deleteModal').classList.remove('active');
            recordToDelete = null;
        });

        // Confirm delete
        document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
            if (!recordToDelete) return;

            const { row, id } = recordToDelete;

            try {
                const res = await fetch(`/Admin/attendance/delete/${id}`, { method: 'DELETE' });
                if (!res.ok) {
                    await handleServerError(res);
                    return;
                }

                row.remove();
                showFlashMessage('success', 'Attendance record deleted successfully');
            } catch (err) {
                console.error(err);
                showFlashMessage('error', 'Network error while deleting record');
            } finally {
                document.getElementById('deleteModal').classList.remove('active');
                recordToDelete = null;
            }
        });

        document.addEventListener('DOMContentLoaded', attachDeleteEvents);

        // function attachDeleteEvents() {
        //     // Note: The selector is changed to '.btn-danger' to match the new class
        //     const deleteButtons = document.querySelectorAll('.btn-danger');
        //     deleteButtons.forEach(btn => {
        //         btn.addEventListener('click', async (e) => {
        //             const row = e.target.closest('tr');
        //             const id = row.dataset.id;
        //             if (!confirm('Are you sure you want to delete this attendance record?')) return;

        //             try {
        //                 const res = await fetch(`/Admin/attendance/delete/${id}`, { method: 'DELETE' });
        //                 if (!res.ok) {
        //                     const data = await res.json();
        //                     throw new Error(data.error || 'Failed to delete record');
        //                 }
        //                 row.remove();
        //                 showFlashMessage('success', 'Attendance record deleted successfully');
        //             } catch (err) {
        //                 console.error(err);
        //                 showFlashMessage('error', err.message);
        //             }
        //         });
        //     });
        // }

        // document.addEventListener('DOMContentLoaded', attachDeleteEvents);
    </script>
</body>
</html>