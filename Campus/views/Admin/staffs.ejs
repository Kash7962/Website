<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>All Staff Members</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    /* General Reset and Base */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  background-color: #f7f7f7;
  padding: 2rem;
  color: #333;
}

/* Flash Message */
 #errorPopupContainer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    background: rgba(0, 0, 0, 0.4);
    font-family: 'Montserrat', sans-serif;
  }

  #errorPopupContainer * {
    box-sizing: border-box;
    font-family: inherit;
    margin: 0;
    padding: 0;
  }

  #errorPopupBox {
    max-width: 400px;
    width: 90%;
    padding: 30px;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(6px);
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    text-align: center;
  }

  #errorPopupBox h1 {
    font-size: 3rem;
    font-weight: 700;
    color: #e74c3c;
  }

  #errorPopupBox h2 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #333;
    margin: 10px 0;
  }

  #errorMessage {
    font-size: 1rem;
    color: #666;
    background-color: #ffffff;
    padding: 15px;
    border-radius: 5px;
    margin: 20px 0;
    border-left: 4px solid #e74c3c;
    text-align: left;
    word-wrap: break-word;
  }

  #closeErrorPopup {
    display: inline-block;
    margin-top: 10px;
    padding: 10px 24px;
    background-color: #3498db;
    color: #fff;
    text-decoration: none;
    border-radius: 5px;
    font-weight: bold;
    transition: background-color 0.3s ease, transform 0.2s ease;
    cursor: pointer;
  }

  #closeErrorPopup:hover {
    background-color: #2980b9;
    transform: translateY(-2px);
  }

   #flashMessageContainer {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 9998;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 420px;
    padding: 0 1rem;
    pointer-events: none;
  }

  .flash-message {
    padding: 1rem 1.25rem;
    margin-bottom: 0.75rem;
    border-radius: 8px;
    font-weight: 600;
    width: 100%;
    text-align: center;
    pointer-events: all;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    animation: fadeIn 0.4s ease;
  }

  .flash-success {
    background-color: #d1fae5;
    color: #065f46;
    border: 1px solid #10b981;
  }

  .flash-error {
    background-color: #fee2e2;
    color: #991b1b;
    border: 1px solid #ef4444;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }
/* Staff Cards */
.staff-list {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1.5rem;
  margin-top: 2rem;
}

.staff-card {
  background-color: white;
  border: 1px solid #ddd;
  border-radius: 10px;
  padding: 1.2rem;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06);
}

.staff-card p {
  margin-bottom: 0.5rem;
}

/* Buttons and Forms */
.action-form {
  margin-top: 0.5rem;
}

button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 0.6rem 1rem;
  border-radius: 5px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: background-color 0.2s ease-in-out;
}

button:hover {
  background-color: #0056b3;
}

/* Confirm delete button override */
button[type="submit"]:contains("Delete") {
  background-color: #dc3545;
}

button[type="submit"]:contains("Delete"):hover {
  background-color: #a71d2a;
}

/* Responsive tweaks */
@media (max-width: 600px) {
  .staff-card {
    padding: 1rem;
  }

  button {
    width: 100%;
    margin-bottom: 0.5rem;
  }
}

  </style>
</head>
<body>
  <div id="flashMessageContainer"></div>

  <h1>Staff List</h1>
  <div class="staff-list">
    <% if (staffs.length === 0) { %>
      <p>No staff members found.</p>
    <% } else { %>
      <% staffs.forEach(staff => { %>
        <div class="staff-card">
          <p><strong>Name:</strong> <%= staff.name %></p>
          <p><strong>Email:</strong> <%= staff.email %></p>
          <p><strong>Phone:</strong> <%= staff.phone %></p>
          <p><strong>Department:</strong> <%= staff.department %></p>
          <p><strong>Authorized:</strong> <%= staff.isAuthorized ? 'Yes' : 'No' %></p>

          <form method="GET" action="/Admin/staff/edit/<%= staff._id %>" class="action-form">
            <button type="submit">‚úèÔ∏è Edit</button>
          </form>

          <form method="GET" action="/Admin/staff/permissions/<%= staff._id %>" class="action-form">
            <button type="submit">üîê Add Permissions</button>
          </form>

          <!-- <form method="D" action="/Admin/staff/delete/<%= staff._id %>" class="action-form">
            <button type="submit">üóëÔ∏è Delete</button>
          </form> -->
        </div>
      <% }) %>
    <% } %>
  </div>

  <script>
     window.onload = async () => {
      const token = localStorage.getItem('token');
      // if (!token) {
      //   showFlashMessage('error', 'No token found. Please log in.');
      //   return;
      // }

       try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
                    try {
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    const role = payload.role;

                    if (role !== 'Super Admin' && role !== 'Admin') {
                    showFlashMessage('error', 'Unauthorized access.');
                    setTimeout(() => window.location.href = '/Admin/dashboard', 1500);
                    }
                } catch (err) {
                    console.error('Failed to decode JWT:', err);
                    showFlashMessage('error', 'Invalid token.');
                }
                }

        document.querySelectorAll('form[action^="/Staff/delete"]').forEach(form => {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const confirmed = confirm('Are you sure you want to delete this staff member?');
            if (!confirmed) return;

            try {
            const res = await fetch(form.action, {
                method: 'POST',
                headers: {
                'Content-Type': 'application/json'
                }
            });

            if (!res.ok) return handleServerError(res);

            showFlashMessage('success', 'Staff member deleted.');
            setTimeout(() => location.reload(), 1500);
            } catch (err) {
            showFlashMessage('error', 'Error deleting staff member.');
            }
        });
        });

    async function handleServerError(res) {
    const contentType = res.headers.get('Content-Type') || '';

    if (contentType.includes('text/html')) {
      const html = await res.text();
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = html;

      const popup = tempDiv.querySelector('#errorPopupContainer');
      const scripts = tempDiv.querySelectorAll('script');

      if (popup) {
        document.body.prepend(popup);
        scripts.forEach((script) => {
          const newScript = document.createElement('script');
          if (script.src) newScript.src = script.src;
          else newScript.textContent = script.textContent;
          document.body.appendChild(newScript);
        });
      } else {
        showFlashMessage('error', 'An unknown error occurred.');
      }
    } else {
      showFlashMessage('error', 'Server error: unexpected content type.');
    }
  }
    function showFlashMessage(type, message, duration = 4000) {
      const container = document.getElementById('flashMessageContainer');
      const msg = document.createElement('div');
      msg.classList.add('flash-message');
      msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
      msg.textContent = message;

      container.appendChild(msg);

      setTimeout(() => {
        msg.style.opacity = '0';
        msg.style.transform = 'translateY(-10px)';
        setTimeout(() => msg.remove(), 500);
      }, duration);
    }
  </script>
</body>
</html>
