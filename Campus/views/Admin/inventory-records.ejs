<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title><%= pageTitle || 'Inventory Records' %></title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    /* Embedded CSS (not inline attributes) */
    body { font-family: Arial, Helvetica, sans-serif; margin: 0; padding: 0; background:#f7f7f8; color:#222; }
    header { padding: 1rem; background: #fff; border-bottom: 1px solid #e3e3e3; display:flex; justify-content:space-between; align-items:center;}
    .container { max-width:1100px; margin: 1rem auto; padding: 1rem; background:#fff; border-radius:8px; box-shadow: 0 2px 6px rgba(0,0,0,0.03); }
    .controls { display:flex; gap:0.5rem; flex-wrap:wrap; align-items:center; margin-bottom:1rem; }
    input, select, button { padding: 0.5rem; border-radius:6px; border:1px solid #ddd; background:#fff; }
    table { width:100%; border-collapse:collapse; margin-top:0.5rem; font-size:14px; }
    th, td { padding: 0.6rem; border-bottom: 1px solid #eee; text-align:left; }
    th { background:#fafafa; position:sticky; top:0; z-index:2; }
    .summary { display:flex; gap:1rem; margin-bottom:1rem; flex-wrap:wrap; }
    .summary .card { padding:0.8rem; background:#f6f9ff; border-radius:6px; border:1px solid #e6eefc; }
      #errorPopupContainer {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      background: rgba(0, 0, 0, 0.4);
      font-family: 'Montserrat', sans-serif;
    }

    #errorPopupContainer * {
      box-sizing: border-box;
      font-family: inherit;
      margin: 0;
      padding: 0;
    }

    #errorPopupBox {
      max-width: 400px;
      width: 90%;
      padding: 30px;
      border-radius: 10px;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(6px);
      border: 1px solid rgba(0, 0, 0, 0.1);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
      text-align: center;
    }

    #errorPopupBox h1 {
      font-size: 3rem;
      font-weight: 700;
      color: #e74c3c;
    }

    #errorPopupBox h2 {
      font-size: 1.5rem;
      font-weight: 700;
      color: #333;
      margin: 10px 0;
    }

    #errorMessage {
      font-size: 1rem;
      color: #666;
      background-color: #ffffff;
      padding: 15px;
      border-radius: 5px;
      margin: 20px 0;
      border-left: 4px solid #e74c3c;
      text-align: left;
      word-wrap: break-word;
    }

    #closeErrorPopup {
      display: inline-block;
      margin-top: 10px;
      padding: 10px 24px;
      background-color: #3498db;
      color: #fff;
      text-decoration: none;
      border-radius: 5px;
      font-weight: bold;
      transition: background-color 0.3s ease, transform 0.2s ease;
      cursor: pointer;
    }

    #closeErrorPopup:hover {
      background-color: #2980b9;
      transform: translateY(-2px);
    }

      #flashMessageContainer {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 9998;
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      max-width: 420px;
      padding: 0 1rem;
      pointer-events: none;
    }

    .flash-message {
      padding: 1rem 1.25rem;
      margin-bottom: 0.75rem;
      border-radius: 8px;
      font-weight: 600;
      width: 100%;
      text-align: center;
      pointer-events: all;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      animation: fadeIn 0.4s ease;
    }

    .flash-success {
      background-color: #d1fae5;
      color: #065f46;
      border: 1px solid #10b981;
    }

    .flash-error {
      background-color: #fee2e2;
      color: #991b1b;
      border: 1px solid #ef4444;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .pagination { margin-top: 1rem; display:flex; gap: 0.5rem; align-items:center; }
    .muted { color:#666; font-size:13px; }
  </style>
</head>
<body>
  <!-- flash container required at top of body -->
  <div id="flashMessageContainer"></div>

  <header>
    <div><strong>Inventory Records</strong></div>
    <div class="muted">Logged in as: <%= user?.name || 'Unknown' %></div>
  </header>

  <main class="container" id="app">
    <div class="controls" role="region" aria-label="filters">
    <button id="deleteAllBtn" style="background:#ff4d4f; color:#fff; border:none;">Delete All</button>
      <input id="searchInput" type="search" placeholder="Search item name..." />
      <select id="actionFilter">
        <option value="">All actions</option>
        <option value="added">Added</option>
        <option value="consumed">Consumed</option>
      </select>
      <input id="dateFrom" type="date" />
      <input id="dateTo" type="date" />
      <button id="applyBtn">Apply</button>
      <div style="margin-left:auto; display:flex; gap:.5rem;">
        <select id="perPage">
          <option value="10">10 / page</option>
          <option value="25" selected>25 / page</option>
          <option value="50">50 / page</option>
        </select>
      </div>
    </div>

    <div class="summary" id="summary">
      <div class="card">Total spent (page): <strong id="totalSpent">0</strong></div>
      <div class="card">Added (page): <strong id="addedCount">0</strong></div>
      <div class="card">Consumed (page): <strong id="consumedCount">0</strong></div>
    </div>

    <div id="tableWrapper">
      <table id="recordsTable" aria-describedby="tableSummary">
        <thead>
          <tr>
            <th>Date</th>
            <th>Action</th>
            <th>Item</th>
            <th>Change</th>
            <th>Unit</th>
            <th>Price/unit</th>
            <th>Total</th>
            <th>By</th>
            <th>Note</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>

    <div class="pagination" id="pager">
      <button id="prevBtn">Prev</button>
      <span>Page <span id="pageNum">1</span></span>
      <button id="nextBtn">Next</button>
    </div>
  </main>

  <script>
    // Embedded JS (no inline attributes). Utility UI functions:
    async function handleServerError(res) {
      const contentType = res.headers.get('Content-Type') || '';

      if (contentType.includes('text/html')) {
        const html = await res.text();
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;

        const popup = tempDiv.querySelector('#errorPopupContainer');
        const scripts = tempDiv.querySelectorAll('script');

        if (popup) {
          document.body.prepend(popup);
          scripts.forEach((script) => {
            const newScript = document.createElement('script');
            if (script.src) newScript.src = script.src;
            else newScript.textContent = script.textContent;
            document.body.appendChild(newScript);
          });
        } else {
          showFlashMessage('error', 'An unknown error occurred.');
        }
      } else {
        showFlashMessage('error', 'Server error: unexpected content type.');
      }
    } 

  function showFlashMessage(type, message, duration = 4000) {
      const container = document.getElementById('flashMessageContainer');
      const msg = document.createElement('div');
      msg.classList.add('flash-message');
      msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
      msg.textContent = message;

      container.appendChild(msg);

      setTimeout(() => {
        msg.style.opacity = '0';
        msg.style.transform = 'translateY(-10px)';
        setTimeout(() => msg.remove(), 500);
      }, duration);
    } 

    // verify token on load (adjust path if necessary)
   

    (function () {
      // state
      let page = 1;
      const tbody = document.querySelector('#recordsTable tbody');
      const perPageEl = document.getElementById('perPage');

      async function fetchRecords() {
        const q = document.getElementById('searchInput').value.trim();
        const action = document.getElementById('actionFilter').value;
        const dateFrom = document.getElementById('dateFrom').value;
        const dateTo = document.getElementById('dateTo').value;
        const perPage = perPageEl.value;

        const params = new URLSearchParams();
        params.set('page', page);
        params.set('perPage', perPage);
        if (q) params.set('q', q);
        if (action) params.set('action', action);
        if (dateFrom) params.set('dateFrom', dateFrom);
        if (dateTo) params.set('dateTo', dateTo);

        const url = '/InventoryRecords/api/inventory/records?' + params.toString();
        try {
          const res = await fetch(url, { credentials: 'same-origin' });
          if (!res.ok) return await handleServerError(res);
          const data = await res.json();
          renderTable(data.records || []);
          document.getElementById('pageNum').textContent = data.page || page;
          document.getElementById('totalSpent').textContent = (data.summary?.totalSpent || 0).toFixed(2);
          document.getElementById('addedCount').textContent = data.summary?.addedCount || 0;
          document.getElementById('consumedCount').textContent = data.summary?.consumedCount || 0;
        } catch (err) {
          console.error(err);
          showFlashMessage('error', 'Failed to fetch records');
        }
      }

      function renderTable(records) {
        tbody.innerHTML = '';
        if (!records.length) {
          const tr = document.createElement('tr');
          tr.innerHTML = '<td colspan="9" class="muted">No records found</td>';
          tbody.appendChild(tr);
          return;
        }

        for (const r of records) {
          const baseDate = new Date(r.createdAt).toLocaleString();
          // each record can contain multiple items -> create multiple rows (one per item)
          for (const it of r.items) {
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td>${baseDate}</td>
              <td>${r.action}</td>
              <td>${escapeHtml(it.itemName || '')}</td>
              <td>${Number(it.prevQuantity || 0)} → ${Number(it.newQuantity || 0)} (Δ ${Number(it.quantity || 0)})</td>
              <td>${escapeHtml(it.unit || '')}</td>
              <td>${(Number(it.pricePerUnit) || 0).toFixed(2)}</td>
              <td>${(Number(it.total) || 0).toFixed(2)}</td>
              <td>${escapeHtml(r.performedBy?.name || r.performedBy?.email || '—')}</td>
              <td>${escapeHtml(r.note || '')}</td>
            `;
            tbody.appendChild(tr);
          }
        }
      }

      function escapeHtml(s) {
        if (!s) return '';
        return String(s)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&#39;');
      }

      // events
      document.getElementById('applyBtn').addEventListener('click', (e) => {
        e.preventDefault();
        page = 1;
        fetchRecords();
      });

      document.getElementById('prevBtn').addEventListener('click', (e) => {
        e.preventDefault();
        if (page > 1) { page -= 1; fetchRecords(); }
      });
      document.getElementById('nextBtn').addEventListener('click', (e) => {
        e.preventDefault();
        page += 1;
        fetchRecords();
      });

      perPageEl.addEventListener('change', (e) => {
        page = 1;
        fetchRecords();
      });

      document.getElementById('deleteAllBtn').addEventListener('click', async (e) => {
        e.preventDefault();
        if (!confirm('Are you sure you want to delete ALL inventory records? This cannot be undone.')) return;

        try {
            const res = await fetch('/InventoryRecords/api/inventory/delete-all', {
            method: 'DELETE',
            credentials: 'same-origin',
            headers: { 'Content-Type': 'application/json' }
            });

            if (!res.ok) return await handleServerError(res);
            const data = await res.json();
            showFlashMessage('success', data.message || 'All records deleted');
            // reload table
            page = 1;
            fetchRecords();
        } catch (err) {
            console.error(err);
            showFlashMessage('error', 'Failed to delete all records');
        }
        });


      // initial actions
      window.onload = async () => {
        const token = localStorage.getItem('token') ;
        try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
    
        fetchRecords();
      };
    })();
  </script>
</body>
</html>
