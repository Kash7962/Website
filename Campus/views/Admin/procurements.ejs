<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Procurement Review</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

    :root {
      --bg: #f8fafc;
      --card: #ffffff;
      --border: #e2e8f0;
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --muted: #64748b;
      --accent: #1e40af;
      --accent-dark: #1e3a8a;
      --danger: #dc2626;
      --danger-dark: #b91c1c;
    }

    body {
      font-family: 'Inter', system-ui, -apple-system, sans-serif;
      background: var(--bg);
      color: var(--text-primary);
      padding: 24px;
      margin: 0;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    
    h1, h2 {
        margin: 0 0 16px 0;
    }

    h1 {
      font-size: 1.8rem;
      font-weight: 700;
      background: linear-gradient(45deg, var(--accent-dark), var(--accent));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      color: transparent;
    }
    
    h2 {
        font-size: 1.25rem;
        color: var(--text-primary);
        padding-bottom: 8px;
        border-bottom: 1px solid var(--border);
    }

    .card {
      background: var(--card);
      padding: 24px;
      border-radius: 12px;
      box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.05), 0 2px 4px -2px rgb(0 0 0 / 0.05);
      margin-bottom: 24px;
      border: 1px solid var(--border);
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th, td {
      padding: 12px 16px;
      border-bottom: 1px solid var(--border);
      text-align: left;
      vertical-align: middle;
      font-size: 0.9rem;
    }

    th {
      background: #fcfdfe;
      color: var(--muted);
      font-weight: 600;
      font-size: 0.75rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    tbody tr:hover {
        background-color: #f7fbff;
    }
    
    a {
        color: var(--accent);
        text-decoration: none;
        font-weight: 500;
    }
    a:hover {
        color: var(--accent-dark);
        text-decoration: underline;
    }

    button {
      cursor: pointer;
      padding: 8px 14px;
      border-radius: 8px;
      border: 0;
      font-weight: 600;
      font-family: 'Inter', sans-serif;
      transition: all 0.2s ease;
    }
    button:hover {
        transform: translateY(-1px);
    }
    button:active {
        transform: translateY(0);
    }
    button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .primary {
      background: var(--accent);
      color: #fff;
    }
    .primary:hover {
        background: var(--accent-dark);
    }

    .danger {
      background: var(--danger);
      color: #fff;
    }
    .danger:hover {
        background: var(--danger-dark);
    }
    
    .deleteBtn {
        background: var(--muted);
        color: #fff;
    }
    .deleteBtn:hover {
        background: var(--text-secondary);
    }

    #errorPopupContainer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    background: rgba(0, 0, 0, 0.4);
    font-family: 'Montserrat', sans-serif;
  }

  #errorPopupContainer * {
    box-sizing: border-box;
    font-family: inherit;
    margin: 0;
    padding: 0;
  }

  #errorPopupBox {
    max-width: 400px;
    width: 90%;
    padding: 30px;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(6px);
    border: 1px solid rgba(0, 0, 0, 0.1);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    text-align: center;
  }

  #errorPopupBox h1 {
    font-size: 3rem;
    font-weight: 700;
    color: #e74c3c;
  }

  #errorPopupBox h2 {
    font-size: 1.5rem;
    font-weight: 700;
    color: #333;
    margin: 10px 0;
  }

  #errorMessage {
    font-size: 1rem;
    color: #666;
    background-color: #ffffff;
    padding: 15px;
    border-radius: 5px;
    margin: 20px 0;
    border-left: 4px solid #e74c3c;
    text-align: left;
    word-wrap: break-word;
  }

  #closeErrorPopup {
    display: inline-block;
    margin-top: 10px;
    padding: 10px 24px;
    background-color: #3498db;
    color: #fff;
    text-decoration: none;
    border-radius: 5px;
    font-weight: bold;
    transition: background-color 0.3s ease, transform 0.2s ease;
    cursor: pointer;
  }

  #closeErrorPopup:hover {
    background-color: #2980b9;
    transform: translateY(-2px);
  }

    #flashMessageContainer {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 9998;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 420px;
    padding: 0 1rem;
    pointer-events: none;
  }

  .flash-message {
    padding: 1rem 1.25rem;
    margin-bottom: 0.75rem;
    border-radius: 8px;
    font-weight: 600;
    width: 100%;
    text-align: center;
    pointer-events: all;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    animation: fadeIn 0.4s ease;
  }

  .flash-success {
    background-color: #d1fae5;
    color: #065f46;
    border: 1px solid #10b981;
  }

  .flash-error {
    background-color: #fee2e2;
    color: #991b1b;
    border: 1px solid #ef4444;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }
    
    @keyframes fadeInOut {
        0%, 100% { opacity: 0; transform: translateY(-10px); }
        10%, 90% { opacity: 1; transform: translateY(0); }
    }
    
    .muted {
      color: var(--muted);
      font-size: 0.95rem;
    }
    
    input[type="checkbox"] {
        width: 16px;
        height: 16px;
        accent-color: var(--accent);
    }
    
    /* === NEW MODAL STYLES === */
    .modal-overlay {
        position: fixed;
        top: 0; left: 0;
        width: 100%; height: 100%;
        background: rgba(15, 23, 42, 0.6);
        backdrop-filter: blur(4px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 3000;
        opacity: 0;
        animation: fadeIn 0.2s ease forwards;
    }
    .modal-box {
        background: var(--card);
        padding: 24px;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        width: 90%;
        max-width: 400px;
        text-align: center;
        transform: scale(0.95);
        animation: scaleIn 0.2s ease-out forwards;
    }
    .modal-box h3 { margin: 0 0 8px 0; color: var(--text-primary); }
    .modal-box p { color: var(--muted); line-height: 1.6; margin: 0; }
    .modal-actions { display: flex; gap: 12px; justify-content: center; margin-top: 24px; }
    .modal-actions .secondary { background-color: #f1f5f9; color: var(--text-secondary); }
    .modal-actions .secondary:hover { background-color: #e2e8f0; }

    @keyframes fadeIn { to { opacity: 1; } }
    @keyframes scaleIn { 100% { transform: scale(1); } }
    /* === END MODAL STYLES === */

  </style>
</head>
<body>
  <div id="flashMessageContainer" style="position:fixed;top:12px;right:12px;z-index:2000"></div>

  <h1>Procurement Review</h1>

  <h2>Pending</h2>
  <form id="acceptForm">
    <div class="card">
      <table>
        <thead><tr><th>Select</th><th>File</th><th>Uploader</th><th>Uploaded</th><th>Actions</th></tr></thead>
        <tbody>
          <% if (pending && pending.length) { %>
            <% pending.forEach(function(p){ %>
              <tr>
                <td><input type="checkbox" name="acceptIds" value="<%= p._id %>"/></td>
                <td><a href="/uploads/procurements/<%= p.filename %>" target="_blank" rel="noreferrer"><%= p.originalName %></a></td>
                <td><%= p.uploader ? (p.uploader.name || p.uploader.email) : 'Unknown' %></td>
                <td><%= new Date(p.uploadDate).toLocaleString() %></td>
                <td><button type="button" data-id="<%= p._id %>" class="denyBtn danger">Deny</button></td>
              </tr>
            <% }) %>
          <% } else { %>
            <tr><td colspan="5" class="muted" style="text-align:center;padding:24px;">No pending procurements</td></tr>
          <% } %>
        </tbody>
      </table>
      <% if (pending && pending.length) { %>
        <div style="margin-top:20px; border-top: 1px solid var(--border); padding-top:20px;">
          <button id="acceptBtn" type="button" class="primary">Accept Selected & Deny Rest</button>
        </div>
      <% } %>
    </div>
  </form>

  <h2>Past</h2>
  <div class="card">
    <table>
      <thead><tr><th>File</th><th>Uploader</th><th>Status</th><th>Uploaded</th><th>Actions</th></tr></thead>
      <tbody>
        <% (accepted || []).forEach(function(p){ %>
          <tr>
            <td><a href="/uploads/procurements/<%= p.filename %>" target="_blank" rel="noreferrer"><%= p.originalName %></a></td>
            <td><%= p.uploader ? (p.uploader.name || p.uploader.email) : 'Unknown' %></td>
            <td>Accepted <% if (p.itemsAdded) { %> - items added <% } %></td>
            <td><%= new Date(p.uploadDate).toLocaleString() %></td>
            <td><button data-id="<%= p._id %>" class="deleteBtn" type="button">Delete</button></td>
          </tr>
        <% }) %>

        <% (denied || []).forEach(function(p){ %>
          <tr>
            <td><%= p.originalName %></td>
            <td><%= p.uploader ? (p.uploader.name || p.uploader.email) : 'Unknown' %></td>
            <td>Denied</td>
            <td><%= new Date(p.uploadDate).toLocaleString() %></td>
            <td><button data-id="<%= p._id %>" class="deleteBtn" type="button">Delete</button></td>
          </tr>
        <% }) %>
        
        <% if (!(accepted && accepted.length) && !(denied && denied.length)) { %>
            <tr><td colspan="5" class="muted" style="text-align:center;padding:24px;">No past procurement records</td></tr>
        <% } %>
      </tbody>
    </table>
  </div>

  <script>
    window.onload = async () => {
        const token = localStorage.getItem('token') ;
        try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
    }
  (function(){
    async function handleServerError(res) {
      const contentType = res.headers.get('Content-Type') || '';

      if (contentType.includes('text/html')) {
        const html = await res.text();
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;

        const popup = tempDiv.querySelector('#errorPopupContainer');
        const scripts = tempDiv.querySelectorAll('script');

        if (popup) {
          document.body.prepend(popup);
          scripts.forEach((script) => {
            const newScript = document.createElement('script');
            if (script.src) newScript.src = script.src;
            else newScript.textContent = script.textContent;
            document.body.appendChild(newScript);
          });
        } else {
          showFlashMessage('error', 'An unknown error occurred.');
        }
      } else {
        showFlashMessage('error', 'Server error: unexpected content type.');
      }
    } 

  function showFlashMessage(type, message, duration = 4000) {
      const container = document.getElementById('flashMessageContainer');
      const msg = document.createElement('div');
      msg.classList.add('flash-message');
      msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
      msg.textContent = message;

      container.appendChild(msg);

      setTimeout(() => {
        msg.style.opacity = '0';
        msg.style.transform = 'translateY(-10px)';
        setTimeout(() => msg.remove(), 500);
      }, duration);
    } 

    // === NEW CONFIRM MODAL FUNCTION ===
    function showConfirmModal(message, title = 'Are you sure?', confirmText = 'OK', confirmClass = 'primary') {
        return new Promise(resolve => {
            const overlay = document.createElement('div');
            overlay.className = 'modal-overlay';

            overlay.innerHTML = `
                <div class="modal-box">
                    <h3>${title}</h3>
                    <p>${message}</p>
                    <div class="modal-actions">
                        <button id="modalCancel" class="secondary">Cancel</button>
                        <button id="modalConfirm" class="${confirmClass}">${confirmText}</button>
                    </div>
                </div>
            `;

            document.body.appendChild(overlay);

            const confirmBtn = document.getElementById('modalConfirm');
            const cancelBtn = document.getElementById('modalCancel');

            const closeModal = (result) => {
                if (document.body.contains(overlay)) {
                    document.body.removeChild(overlay);
                }
                resolve(result);
            };

            confirmBtn.onclick = () => closeModal(true);
            cancelBtn.onclick = () => closeModal(false);
            overlay.onclick = (e) => {
                if (e.target === overlay) {
                    closeModal(false);
                }
            };
        });
    }

    const acceptBtn=document.getElementById('acceptBtn');
    if(acceptBtn){
      acceptBtn.addEventListener('click',async function(){
        const checked=Array.from(document.querySelectorAll('input[name="acceptIds"]:checked')).map(i=>i.value);
        if(!checked.length)return showFlashMessage('error','Select at least one to accept');
        
        // MODIFIED: Replaced confirm() with showConfirmModal()
        const confirmed = await showConfirmModal('All other pending procurements will be denied.', 'Accept Selected?', 'Accept', 'primary');
        if (!confirmed) return;

        acceptBtn.disabled=true;
        try{
          const res=await fetch('/Procurement/accept',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({acceptIds:checked})});
          if (!res.ok) return handleServerError(res)
          const data=await res.json();
          showFlashMessage('success','Accepted selected; pending deleted');setTimeout(()=>location.reload(),1000)
        }catch(err){showFlashMessage('error',(err&&err.error)||'Accept failed')}finally{acceptBtn.disabled=false}
      })
    }

    document.body.addEventListener('click',async function(e){
      if(e.target.matches('.denyBtn')){
        const id=e.target.getAttribute('data-id');

        // MODIFIED: Replaced confirm() with showConfirmModal()
        const confirmed = await showConfirmModal('This procurement will be denied and deleted.', 'Deny Procurement?', 'Deny', 'danger');
        if (!confirmed) return;

        e.target.disabled=true;
        try{const res=await fetch(`/Procurement/${id}/deny`,{method:'POST'}); if (!res.ok) return handleServerError (res); data=await res.json();
          showFlashMessage('success','Denied and deleted');setTimeout(()=>location.reload(),1000)}
        catch(err){showFlashMessage('error',(err&&err.error)||'Delete failed');e.target.disabled=false}
      }else if(e.target.matches('.deleteBtn')){
        const id=e.target.getAttribute('data-id');
        
        // MODIFIED: Replaced confirm() with showConfirmModal()
        const confirmed = await showConfirmModal('This action cannot be undone.', 'Permanently Delete Record?', 'Delete', 'danger');
        if (!confirmed) return;

        e.target.disabled=true;
        try{const res=await fetch(`/Procurement/${id}`,{method:'DELETE'}); if (!res.ok) return handleServerError(res); data=await res.json();
          showFlashMessage('success','Deleted');setTimeout(()=>location.reload(),1000)}
        catch(err){showFlashMessage('error',(err&&err.error)||'Delete failed');e.target.disabled=false}
      }
    })
  })();
  </script>
</body>
</html>