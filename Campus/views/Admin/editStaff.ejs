<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Edit Staff</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Bootstrap JS (optional, only if you need modals, dropdowns, etc.) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        /* --- STYLES FOR CONSISTENT LOOK AND FEEL --- */
        
        /* Popups and Flash Messages */
        #flashMessageContainer {
            position: fixed; top: 20px; left: 50%;
            transform: translateX(-50%); z-index: 9998; display: flex;
            flex-direction: column; align-items: center; width: 100%;
            max-width: 420px; padding: 0 1rem; pointer-events: none;
        }
        .flash-message {
            padding: 1rem 1.25rem; margin-bottom: 0.75rem; border-radius: 8px;
            font-weight: 600; width: 100%; text-align: center; pointer-events: all;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: fadeIn 0.4s ease;
        }
        .flash-success { background-color: #d1fae5; color: #065f46; border: 1px solid #10b981; }
        .flash-error { background-color: #fee2e2; color: #991b1b; border: 1px solid #ef4444; }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
          #errorPopupContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            background: rgba(0, 0, 0, 0.4);
            font-family: 'Montserrat', sans-serif;
        }

        #errorPopupContainer * {
            box-sizing: border-box;
            font-family: inherit;
            margin: 0;
            padding: 0;
        }

        #errorPopupBox {
            max-width: 400px;
            width: 90%;
            padding: 30px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        #errorPopupBox h1 {
            font-size: 3rem;
            font-weight: 700;
            color: #e74c3c;
        }

        #errorPopupBox h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin: 10px 0;
        }

        #errorMessage {
            font-size: 1rem;
            color: #666;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #e74c3c;
            text-align: left;
            word-wrap: break-word;
        }

        #closeErrorPopup {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 24px;
            background-color: #3498db;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s ease, transform 0.2s ease;
            cursor: pointer;
        }

        #closeErrorPopup:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

        /* Main Page Styles */
        * {
            box-sizing: border-box; margin: 0; padding: 0;
        }
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #fef7ed;
            margin: 0; padding: 2rem; color: #333;
        }
        .container {
            width: 100%; max-width: 900px; background: #ffffff;
            padding: 2.5rem; border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border-top: 5px solid #1e40af; /* Blue accent */
            margin: auto;
        }
        h1 {
            text-align: center; color: #1e40af; margin-bottom: 2.5rem;
            font-family: 'Inter', sans-serif; font-size: 2rem;
        }
        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }
        .form-group { 
            margin-bottom: 1rem;
        }
        .form-group.full-width {
            grid-column: 1 / -1;
        }
        .form-section-heading {
            grid-column: 1 / -1;
            font-family: 'Inter', sans-serif;
            font-size: 1.25rem;
            font-weight: 700;
            color: #1e40af;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 0.75rem;
            margin-top: 1.5rem;
            margin-bottom: 0.5rem;
        }
        label {
            display: block;
            margin-bottom: 0.5rem; font-weight: 600;
            color: #4b5563; font-size: 0.9rem;
        }
        input, select, textarea {
            width: 100%;
            padding: 0.75rem 1rem; font-size: 1rem;
            font-family: 'Poppins', sans-serif;
            border: 1px solid #d1d5db; border-radius: 8px;
            transition: border-color 0.3s, box-shadow 0.3s;
            background-color: white;
        }
        select {
             -webkit-appearance: none; -moz-appearance: none; appearance: none;
             background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23333' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 0.75rem center;
            background-size: 16px 12px;
        }
        input:focus, select:focus, textarea:focus {
            outline: none; border-color: #f97316;
            box-shadow: 0 0 0 3px rgba(249, 115, 22, 0.2);
        }
        textarea {
            min-height: 100px;
            resize: vertical;
        }
        
        /* Button Styles */
        .actions {
            grid-column: 1 / -1;
            display: flex;
            gap: 1rem;
            margin-top: 1.5rem;
        }
        button {
            padding: 0.8rem; border: none; border-radius: 8px;
            font-size: 1rem; font-weight: 600;
            font-family: 'Inter', sans-serif; cursor: pointer;
            transition: all 0.3s ease;
            flex-grow: 1;
        }
        .btn-save {
            background-color: #16a34a; color: white;
        }
        .btn-save:hover { background-color: #15803d; }
        .btn-delete {
            background-color: #dc2626; color: white;
        }
        .btn-delete:hover { background-color: #b91c1c; }

        /* Dynamic Academic Details Styles */
        .academic-item {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 0.75rem;
            align-items: center;
            margin-bottom: 0.75rem;
        }
        .delete-academic-btn {
            background-color: #fee2e2; color: #dc2626;
            padding: 0.5rem; width: auto; font-size: 1.2rem;
            line-height: 1; border-radius: 6px;
        }
        .delete-academic-btn:hover { background-color: #fecaca; }
        #addAcademicDetailBtn {
            background-color: #dbeafe; color: #1e40af;
            width: auto; padding: 0.6rem 1.2rem; margin-top: 0.5rem;
        }
        #addAcademicDetailBtn:hover { background-color: #bfdbfe; }
        
        @media (max-width: 768px) {
            .form-grid { grid-template-columns: 1fr; }
            body { padding: 0; }
            .container {
                margin: 0; border-radius: 0; min-height: 100vh;
                box-shadow: none; padding: 2rem 1.5rem;
            }
        }

        /* Delete Confirmation Modal */
          .modal-backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }
        .modal-backdrop.visible {
            opacity: 1;
            visibility: visible;
        }
        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            max-width: 400px;
            width: 90%;
            text-align: center;
            transform: scale(0.95);
            transition: transform 0.3s ease;
        }
        .modal-backdrop.visible .modal-content {
            transform: scale(1);
        }
        .modal-content h3 {
            font-family: 'Inter', sans-serif;
            font-size: 1.5rem;
            color: var(--text-dark);
            margin-bottom: 0.75rem;
        }
        .modal-content p {
            color: var(--text-light);
            margin-bottom: 2rem;
        }
        .modal-actions {
            display: flex;
            justify-content: center;
            gap: 1rem;
        }
        .modal-actions button {
            width: 120px;
        }
    </style>
</head>
<body>
    <div id="flashMessageContainer"></div>
    <div class="container">
        <h1>Edit Staff Details</h1>
        <form id="editStaffForm">
            <div class="form-grid">

                <h3 class="form-section-heading">Basic Information</h3>
                <div class="form-group">
                    <label>Name</label>
                    <input type="text" name="name" value="<%= staff.name %>" required />
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <input type="email" name="email" value="<%= staff.email %>" required />
                </div>
                <div class="form-group">
                    <label>Phone (in +91 format)</label>
                    <input type="text" name="phone" value="<%= staff.phone %>" required />
                </div>
                <div class="form-group">
                    <label>Department</label>
                    <select name="department" required>
                        <% ['Academic', 'Residential', 'Kitchen', 'Library', 'Sports'].forEach(dept => { %>
                            <option value="<%= dept %>" <%= staff.department === dept ? 'selected' : '' %>><%= dept %></option>
                        <% }) %>
                    </select>
                </div>
                <div class="form-group">
                    <label>Authorized?</label>
                    <select name="isAuthorized">
                        <option value="true" <%= staff.isAuthorized ? 'selected' : '' %>>Yes</option>
                        <option value="false" <%= !staff.isAuthorized ? 'selected' : '' %>>No</option>
                    </select>
                </div>
                 <div class="form-group">
                    <label>Employment Type</label>
                    <select name="employmentType">
                        <% ['Permanent', 'Contract', 'Part-Time'].forEach(type => { %>
                            <option value="<%= type %>" <%= staff.employmentType === type ? 'selected' : '' %>><%= type %></option>
                        <% }) %>
                    </select>
                </div>

                <h3 class="form-section-heading">Professional Details</h3>
                <div class="form-group">
                    <label>Salary</label>
                    <input type="number" name="salary" value="<%= staff.salary || '' %>" />
                </div>
                <div class="form-group">
                    <label>Joining Date</label>
                    <input type="date" name="joiningDate" value="<%= staff.joiningDate ? staff.joiningDate.toISOString().split('T')[0] : '' %>" />
                </div>
                <div class="form-group full-width">
                    <label>Designation</label>
                    <input type="text" name="designation" value="<%= staff.designation || '' %>" />
                </div>
                <div class="form-group">
                    <label>Qualifications (comma separated)</label>
                    <input type="text" name="qualifications" value="<%= staff.qualifications?.join(', ') || '' %>" />
                </div>
                <div class="form-group">
                    <label>Subjects (comma separated)</label>
                    <input type="text" name="subjects" value="<%= staff.subjects?.join(', ') || '' %>" />
                </div>
                <div class="form-group">
                    <label>Class Assigned (comma separated)</label>
                    <input type="text" name="classAssigned" value="<%= staff.classAssigned?.join(', ') || '' %>" />
                </div>
                <div class="form-group">
                    <label>Skills (comma separated)</label>
                    <input type="text" name="skills" value="<%= staff.skills?.join(', ') || '' %>" />
                </div>

                <h3 class="form-section-heading">Academic & Research</h3>
                <div class="form-group full-width">
                    <label>Academic Details</label>
                    <div id="academicDetailsContainer">
                        <% staff.academicDetails.forEach((detail, index) => { %>
                        <div class="academic-item" id="academicRow<%= index %>">
                            <input type="text" name="academicDetails[<%= index %>][examination]" value="<%= detail.examination %>" placeholder="Examination"/>
                            <input type="text" name="academicDetails[<%= index %>][boardOrUniversity]" value="<%= detail.boardOrUniversity %>" placeholder="Board/University"/>
                            <input type="number" name="academicDetails[<%= index %>][yearOfPassing]" value="<%= detail.yearOfPassing %>" placeholder="Year"/>
                            <input type="text" name="academicDetails[<%= index %>][divisionOrGrade]" value="<%= detail.divisionOrGrade %>" placeholder="Grade"/>
                            <button type="button" class="delete-academic-btn">🗑️</button>
                        </div>
                        <% }) %>
                    </div>
                    <button type="button" id="addAcademicDetailBtn">+ Add Academic Detail</button>
                </div>
                <div class="form-group full-width">
                    <label>Research Scholars Supervised</label>
                    <div class="form-grid">
                         <input type="number" name="researchScholars[completedPhD]" placeholder="Completed PhD" value="<%= staff.researchScholars?.completedPhD || 0 %>" />
                         <input type="number" name="researchScholars[continuingPhD]" placeholder="Continuing PhD" value="<%= staff.researchScholars?.continuingPhD || 0 %>" />
                         <input type="number" name="researchScholars[completedMPhil]" placeholder="Completed MPhil" value="<%= staff.researchScholars?.completedMPhil || 0 %>" />
                         <input type="number" name="researchScholars[continuingMPhil]" placeholder="Continuing MPhil" value="<%= staff.researchScholars?.continuingMPhil || 0 %>" />
                    </div>
                </div>
                <div class="form-group">
                    <label>Awards Received (comma separated)</label>
                    <input type="text" name="awardsReceived" value="<%= staff.awardsReceived?.join(', ') || '' %>" />
                </div>
                <div class="form-group">
                    <label>Certifications (comma separated)</label>
                    <input type="text" name="certifications" value="<%= staff.certifications?.join(', ') || '' %>" />
                </div>
                <div class="form-group">
                    <label>Achievements (comma separated)</label>
                    <input type="text" name="achievements" value="<%= staff.achievements?.join(', ') || '' %>" />
                </div>
                <div class="form-group">
                    <label>Books Published</label>
                    <input type="number" name="booksPublished" value="<%= staff.booksPublished || 0 %>" />
                </div>
                <div class="form-group">
                    <label>Research Projects Completed (comma separated)</label>
                    <input type="text" name="researchProjectsCompleted" value="<%= staff.researchProjectsCompleted?.join(', ') || '' %>" />
                </div>
                <div class="form-group">
                    <label>Ongoing Projects (comma separated)</label>
                    <input type="text" name="ongoingProjects" value="<%= staff.ongoingProjects?.join(', ') || '' %>" />
                </div>
                <div class="form-group">
                    <label>Research Papers - Published</label>
                    <input type="number" name="researchPapersPublished" value="<%= staff.researchPapers?.published || 0 %>" />
                </div>
                <div class="form-group">
                    <label>Research Papers - Communicated</label>
                    <input type="number" name="researchPapersCommunicated" value="<%= staff.researchPapers?.communicated || 0 %>" />
                </div>

                <h3 class="form-section-heading">Contact Information</h3>
                <div class="form-group full-width">
                    <label>Present Address</label>
                    <textarea name="presentAddress"><%= staff.presentAddress || '' %></textarea>
                </div>
                <div class="form-group">
                    <label>Alternate Phone (+91 format)</label>
                    <input type="text" name="altPhone" value="<%= staff.contactInfo?.altPhone || '' %>" />
                </div>
                <div class="form-group">
                    <label>Alternate Email</label>
                    <input type="email" name="emailAlt" autocomplete="off" />
                </div>
                <!-- Delete Confirmation Modal (hidden by default) -->
               <div id="deleteConfirmModal" class="modal-backdrop">
                <div class="modal-content">
                    <h3>Confirm Deletion</h3>
                    <p>Are you sure you want to delete this staff?</p>
                    <div class="modal-actions">
                        <button id="cancelDelete" class="btn btn-secondary">Cancel</button>
                        <button id="confirmDelete" class="btn btn-danger">Delete</button>
                    </div>
                </div>
            </div>

                <!-- Form Actions -->
                <div class="actions">
                    <button type="button" id="deleteBtn" class="btn-delete">Delete Staff</button>
                    <button type="submit" class="btn-save">Update Staff</button>
                </div>

            </div>
        </form>
    </div>

    <script>
        // Your original JavaScript logic is preserved below
        window.onload = async () => {
            const token = localStorage.getItem('token');
      // if (!token) {
      //   showFlashMessage('error', 'No token found. Please log in.');
      //   return;
      // }

       try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
                    try {
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    const role = payload.role;

                    if (role !== 'Super Admin' && role !== 'Admin') {
                    showFlashMessage('error', 'Unauthorized access.');
                    setTimeout(() => window.location.href = '/Admin/dashboard', 1500);
                    }
                } catch (err) {
                    console.error('Failed to decode JWT:', err);
                    showFlashMessage('error', 'Invalid token.');
                }
                 try {
                const payload = JSON.parse(atob(token.split('.')[1]));
                const role = payload.role;
                if (role !== 'Super Admin' && role !== 'Admin') {
                    showFlashMessage('error', 'Unauthorized access.');
                    setTimeout(() => window.location.href = '/Admin/dashboard', 1500);
                }
            } catch (err) {
                console.error('Failed to decode JWT:', err);
                showFlashMessage('error', 'Invalid token.');
            }
                 
        };
         async function handleServerError(res) {
            const contentType = res.headers.get('Content-Type') || '';
            if (contentType.includes('text/html')) {
                const html = await res.text();
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;
                const popup = tempDiv.querySelector('#errorPopupContainer');
                if (popup) {
                    document.body.prepend(popup);
                    const scripts = tempDiv.querySelectorAll('script');
                    scripts.forEach((script) => {
                        const newScript = document.createElement('script');
                        if (script.src) { newScript.src = script.src; } 
                        else { newScript.textContent = script.textContent; }
                        document.body.appendChild(newScript);
                    });
                } else {
                    showFlashMessage('error', 'An unknown error occurred.');
                }
                return;
            }
            showFlashMessage('error', 'Server error: unexpected content type.');
        }
        function showFlashMessage(type, message, duration = 4000) { 
            const container = document.getElementById('flashMessageContainer');
            const msg = document.createElement('div');
            msg.classList.add('flash-message');
            msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
            msg.textContent = message;
            container.appendChild(msg);
            setTimeout(() => {
                msg.style.opacity = '0';
                msg.style.transform = 'translateY(-10px)';
                setTimeout(() => msg.remove(), 500);
            }, duration);
         }

        document.getElementById('editStaffForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData.entries());

            ['qualifications', 'subjects', 'classAssigned', 'skills', 'certifications', 'achievements', 'researchProjectsCompleted', 'ongoingProjects', 'awardsReceived'].forEach(key => {
                if (data[key]) {
                    data[key] = data[key].split(',').map(v => v.trim()).filter(Boolean);
                }
            });

            data.researchPapers = {
                published: parseInt(data.researchPapersPublished || 0),
                communicated: parseInt(data.researchPapersCommunicated || 0),
            };

            // UPDATED to remove the default '@' logic
            data.contactInfo = {
                altPhone: data.altPhone?.trim() || '',
                emailAlt: data.emailAlt?.trim() || ''
            };

            delete data.altPhone;
            delete data.emailAlt;
            data.academicDetails = [];
            const academicInputs = document.querySelectorAll('.academic-item');
            academicInputs.forEach(item => {
                const inputs = item.querySelectorAll('input');
                const detail = {
                    examination: inputs[0].value.trim(),
                    boardOrUniversity: inputs[1].value.trim(),
                    yearOfPassing: parseInt(inputs[2].value),
                    divisionOrGrade: inputs[3].value.trim()
                };
                if (detail.examination) data.academicDetails.push(detail);
            });

            data.researchScholars = {
                completedPhD: parseInt(data['researchScholars[completedPhD]'] || 0),
                continuingPhD: parseInt(data['researchScholars[continuingPhD]'] || 0),
                completedMPhil: parseInt(data['researchScholars[completedMPhil]'] || 0),
                continuingMPhil: parseInt(data['researchScholars[continuingMPhil]'] || 0)
            };
            delete data['researchScholars[completedPhD]'];
            delete data['researchScholars[continuingPhD]'];
            delete data['researchScholars[completedMPhil]'];
            delete data['researchScholars[continuingMPhil]'];

            try {
                const res = await fetch('/Admin/staff/update/<%= staff._id %>', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data),
                });

                if (!res.ok) return await handleServerError(res);
                showFlashMessage('success', 'Staff details updated.');
                setTimeout(() => window.history.back(), 1500);
            } catch (err) {
                showFlashMessage('error', 'Something went wrong.');
            }
        });

        const deleteBtn = document.getElementById('deleteBtn');
        const modal = document.getElementById('deleteConfirmModal');
        const cancelDelete = document.getElementById('cancelDelete');
        const confirmDelete = document.getElementById('confirmDelete');

        // Show modal
        deleteBtn.addEventListener('click', () => {
            modal.classList.add('visible');
        });

        // Hide modal
        cancelDelete.addEventListener('click', () => {
            modal.classList.remove('visible');
        });

        // Handle confirm delete
        confirmDelete.addEventListener('click', async () => {
            try {
                const res = await fetch('/Admin/staff/delete/<%= staff._id %>', { method: 'DELETE' });
                if (!res.ok) throw new Error('Delete failed');
                showFlashMessage('success', 'Staff deleted.');
                setTimeout(() => window.location.href = '/Admin/staff/get', 1500);
            } catch (err) {
                showFlashMessage('error', 'Failed to delete staff.');
            }
        });
        document.getElementById('addAcademicDetailBtn').addEventListener('click', () => {
        const container = document.getElementById('academicDetailsContainer');
        const index = container.children.length;

        const rowId = `academicRow${index}`;
        const deleteBtnId = `deleteRow${index}`;

        const div = document.createElement('div');
        div.classList.add('academic-item');
        div.id = rowId;

        div.innerHTML = `
            <input type="text" name="academicDetails[${index}][examination]" placeholder="Examination" />
            <input type="text" name="academicDetails[${index}][boardOrUniversity]" placeholder="Board/University" />
            <input type="number" name="academicDetails[${index}][yearOfPassing]" placeholder="Year of Passing" />
            <input type="text" name="academicDetails[${index}][divisionOrGrade]" placeholder="Division/Grade" />
            <button type="button" id="${deleteBtnId}" class="delete-academic-btn">🗑️ Delete</button>
        `;

        container.appendChild(div);

        // Attach delete handler to the new button
        document.getElementById(deleteBtnId).addEventListener('click', () => {
            const row = document.getElementById(rowId);
            if (row) row.remove();
        });
        });

        // Delete button for pre-existing rows (rendered from EJS)
        window.addEventListener('DOMContentLoaded', () => {
        const allDeleteBtns = document.querySelectorAll('.delete-academic-btn');
        allDeleteBtns.forEach((btn) => {
            btn.addEventListener('click', () => {
            const row = btn.closest('.academic-item');
            if (row) row.remove();
            });
        });
        });
        
    </script>
</body>
</html>