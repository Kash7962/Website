<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Register Face</title>
  <script defer src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>
  <style>
    body { font-family: Arial; text-align: center; margin-top: 20px; }
    video { border: 1px solid #ccc; border-radius: 10px; }
    #status { margin-top: 10px; color: green; font-weight: bold; }
    .info-box { margin: 10px; font-size: 16px; padding: 8px; background: #f9f9f9; border-radius: 6px; display: inline-block; }
    button { margin-top: 15px; padding: 10px 20px; font-size: 16px; border: none; border-radius: 6px; background: #4CAF50; color: white; cursor: pointer; }
    button:hover { background: #45a049; }
    #errorPopupContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            background: rgba(0, 0, 0, 0.4);
            font-family: 'Montserrat', sans-serif;
        }

        #errorPopupContainer * {
            box-sizing: border-box;
            font-family: inherit;
            margin: 0;
            padding: 0;
        }

        #errorPopupBox {
            max-width: 400px;
            width: 90%;
            padding: 30px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        #errorPopupBox h1 {
            font-size: 3rem;
            font-weight: 700;
            color: #e74c3c;
        }

        #errorPopupBox h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin: 10px 0;
        }

        #errorMessage {
            font-size: 1rem;
            color: #666;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #e74c3c;
            text-align: left;
            word-wrap: break-word;
        }

        #closeErrorPopup {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 24px;
            background-color: #3498db;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s ease, transform 0.2s ease;
            cursor: pointer;
        }

        #closeErrorPopup:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

            #flashMessageContainer {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9998;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 420px;
            padding: 0 1rem;
            pointer-events: none;
        }

        .flash-message {
            padding: 1rem 1.25rem;
            margin-bottom: 0.75rem;
            border-radius: 8px;
            font-weight: 600;
            width: 100%;
            text-align: center;
            pointer-events: all;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: fadeIn 0.4s ease;
        }

        .flash-success {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #10b981;
        }

        .flash-error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #ef4444;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
  </style>
</head>
<body>
  <div id="flashMessageContainer"></div>
  <h2>Staff Face Registration</h2>
  
  <!-- Show name and email (read-only) -->
  <div class="info-box">üë§ <%= name %></div>
  <div class="info-box">‚úâÔ∏è <%= email %></div>

  <br />
  <video id="video" width="480" height="360" autoplay muted></video>
  <br />

  <!-- ‚úÖ Enable the button -->
  <button id="capture">Register Face</button>
  <p id="status">Loading models...</p>

  <script>
    window.onload = async () => {

            const token = localStorage.getItem('token');
            try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
                        try {
                        const token = localStorage.getItem('token');
                        if (!token) {
                        console.error('No token found');
                        return;
                        }
                        // console.log('Token:', token);
                        // Decode JWT to get staffId
                        const payload = JSON.parse(atob(token.split('.')[1]));
                        const staffId = payload._id;
                        
                        const res = await fetch('/Manage/get-permissions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ staffId })
                        });

                        if (!res.ok) {
                        handleServerError(res);
                        return;
                        }

                        const data = await res.json();
                        const permissions = data.permissions || [];
                        // console.log('Permissions:', permissions);
                        // Hide all menu items not in permissions
                        
                        if (!permissions.includes('manage_staff_attendance')) {
                            showFlashMessage('error', 'You do not have permission to access this page.');
                            setTimeout(() => {
                                window.location.href = '/Staff/dashboard';
                            }, 1500);
                        }
                    } catch (err) {
                        console.error('Error fetching permissions:', err);
                    }
    
    
      const video = document.getElementById('video');
      const statusText = document.getElementById('status');
      const staffName = "<%= name %>";
      const staffEmail = "<%= email %>";
      const staffId = "<%= staffId %>";

      try {
        await Promise.all([
          faceapi.nets.tinyFaceDetector.loadFromUri('/models'),
          faceapi.nets.faceRecognitionNet.loadFromUri('/models'),
          faceapi.nets.faceLandmark68Net.loadFromUri('/models')
        ]);
        statusText.innerText = "‚úÖ Models loaded. Initializing camera...";

        const stream = await navigator.mediaDevices.getUserMedia({ video: {} });
        video.srcObject = stream;
        statusText.innerText = "Camera ready.";
      } catch (err) {
        console.error("Model or camera error", err);
        statusText.innerText = "‚ùå Failed to load models or camera.";
      }

      // ‚úÖ Make sure button exists before attaching event
      const captureBtn = document.getElementById('capture');
      if (captureBtn) {
        captureBtn.addEventListener('click', async () => {
          statusText.innerText = "Capturing face...";

          const detection = await faceapi
            .detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
            .withFaceLandmarks()
            .withFaceDescriptor();

          if (!detection) {
            statusText.innerText = "‚ùå Face not detected. Try again.";
            return;
          }

          const encoding = Array.from(detection.descriptor);
          try {
            const response = await fetch('/Face/save-face', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ name: staffName, email: staffEmail, encoding, staffId })
            });
            if (!response.ok) {
              handleServerError(response);
              return;
            }
            const result = await response.json();
            if (result.success) {
              statusText.innerText = "‚úÖ Face registered successfully!";
            } 
          } catch (err) {
            console.error("Fetch error", err);
            statusText.innerText = "‚ùå Network or server error.";
          }
        });
      }
    };

    async function handleServerError(res) {
        const contentType = res.headers.get('Content-Type') || '';

        if (contentType.includes('text/html')) {
        const html = await res.text();
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;

        const popup = tempDiv.querySelector('#errorPopupContainer');
        const scripts = tempDiv.querySelectorAll('script');

        if (popup) {
            document.body.prepend(popup);
            scripts.forEach((script) => {
            const newScript = document.createElement('script');
            if (script.src) newScript.src = script.src;
            else newScript.textContent = script.textContent;
            document.body.appendChild(newScript);
            });
        } else {
            showFlashMessage('error', 'An unknown error occurred.');
        }
        } else {
        showFlashMessage('error', 'Server error: unexpected content type.');
        }
    } 

    function showFlashMessage(type, message, duration = 4000) {
        const container = document.getElementById('flashMessageContainer');
        const msg = document.createElement('div');
        msg.classList.add('flash-message');
        msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
        msg.textContent = message;

        container.appendChild(msg);

        setTimeout(() => {
        msg.style.opacity = '0';
        msg.style.transform = 'translateY(-10px)';
        setTimeout(() => msg.remove(), 500);
        }, duration);
    } 
  </script>
</body>
</html>
