<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Edit Student Details</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2563eb; /* Blue */
            --primary-dark: #1d4ed8;
            --accent-color: #f97316; /* Orange */
            --accent-dark: #ea580c;
            --danger-color: #dc2626;
            --danger-light: #fee2e2;
            --success-color: #16a34a;
            --secondary-bg: #f8fafc; /* Page Background */
            --text-dark: #1e293b;
            --text-light: #64748b;
            --border-color: #e2e8f0;
            --card-shadow: 0 4px 12px rgba(0,0,0,0.06);
            --radius: 8px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body { 
            font-family: 'Inter', sans-serif; 
            background-color: var(--secondary-bg);
            min-height: 100vh;
            color: var(--text-dark);
            line-height: 1.6;
            padding: 2rem;
        }

        .container { 
            max-width: 1200px; 
            margin: auto; 
            background: #ffffff;
            padding: 2.5rem; 
            border-radius: 12px; 
            box-shadow: var(--card-shadow);
            border: 1px solid var(--border-color);
        }

        .header {
            text-align: center;
            margin-bottom: 2.5rem;
        }

        .header h2 {
            font-family: 'Poppins', sans-serif;
            font-size: 2.25rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .header p {
            color: var(--text-light);
            font-size: 1.1rem;
        }

        h3 { 
            color: var(--text-dark); 
            margin: 2rem 0 1.5rem 0; 
            grid-column: 1 / -1;
            font-size: 1.25rem;
            font-weight: 600;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid var(--border-color);
            position: relative;
        }

        h3::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 50px;
            height: 2px;
            background: var(--primary-color);
        }

        h4 {
            color: var(--text-dark);
            font-size: 1rem;
            font-weight: 600;
            margin: 1rem 0 0.5rem 0;
            grid-column: 1 / -1;
        }

        form { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
            gap: 1rem 1.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        label { 
            font-weight: 500; 
            color: var(--text-dark);
            margin-bottom: 0.5rem; 
            display: block;
            font-size: 0.9rem;
        }

        input, select, textarea { 
            width: 100%; 
            padding: 0.75rem 1rem; 
            border-radius: var(--radius); 
            border: 1px solid var(--border-color);
            background-color: #fff;
            font-size: 0.95rem;
            transition: all 0.2s ease;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        button[type="submit"] { 
            grid-column: 1 / -1; 
            padding: 0.875rem 2rem; 
            background-color: var(--primary-color);
            color: white; 
            font-weight: 600; 
            border: none; 
            border-radius: var(--radius); 
            margin-top: 2rem; 
            cursor: pointer;
            font-size: 1.05rem;
            transition: all 0.2s ease;
        }

        button[type="submit"]:hover { 
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(37, 99, 235, 0.2);
            background-color: var(--primary-dark);
        }

        /* Dynamic rows styling */
        .matric-row, .family-row { 
            grid-column: 1 / -1; 
            display: flex; 
            flex-wrap: wrap;
            gap: 0.75rem; 
            align-items: flex-end; /* Align items to the bottom */
            margin-bottom: 0.5rem;
            padding: 1rem;
            background-color: var(--secondary-bg);
            border-radius: var(--radius);
        }

        .matric-row > *, .family-row > * {
            flex: 1 1 150px; /* Allow items to grow and shrink */
        }
        
        .matric-row .form-group, .family-row .form-group {
             margin-bottom: 0;
        }

        .small-btn { 
            padding: 0.6rem 1rem; 
            border-radius: var(--radius); 
            border: 1px solid var(--border-color); 
            background-color: #fff; 
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s ease;
            font-size: 0.9rem;
            flex: 0 0 auto; /* Prevent button from growing */
            margin-bottom: 0.5rem; /* Align with input bottom padding */
        }

        .small-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--card-shadow);
        }

        .remove-btn { 
            border-color: var(--danger-light);
            background-color: var(--danger-light);
            color: var(--danger-dark);
        }

        .remove-btn:hover {
            background-color: var(--danger-color);
            border-color: var(--danger-color);
            color: white;
        }

        .add-btn { 
            background-color: var(--accent-color);
            border: 1px solid var(--accent-color); 
            color: white;
        }

        .add-btn:hover {
            background-color: var(--accent-dark);
            border-color: var(--accent-dark);
        }

        .section-actions { 
            grid-column: 1 / -1; 
            display: flex; 
            justify-content: flex-end; 
            margin-top: 0.5rem;
        }

        .matric-summary {
            grid-column: 1 / -1;
            display: flex;
            gap: 1.5rem;
            align-items: flex-end;
            margin-top: 1rem;
        }

        .matric-summary .form-group {
            flex: 1;
        }

        /* Flash & Error Popups - Simplified for consistency */
          #errorPopupContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            background: rgba(0, 0, 0, 0.4);
            font-family: 'Montserrat', sans-serif;
          }

          #errorPopupContainer * {
            box-sizing: border-box;
            font-family: inherit;
            margin: 0;
            padding: 0;
          }

          #errorPopupBox {
            max-width: 400px;
            width: 90%;
            padding: 30px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
          }

          #errorPopupBox h1 {
            font-size: 3rem;
            font-weight: 700;
            color: #e74c3c;
          }

          #errorPopupBox h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin: 10px 0;
          }

          #errorMessage {
            font-size: 1rem;
            color: #666;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #e74c3c;
            text-align: left;
            word-wrap: break-word;
          }

          #closeErrorPopup {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 24px;
            background-color: #3498db;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s ease, transform 0.2s ease;
            cursor: pointer;
          }

          #closeErrorPopup:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
          }

            #flashMessageContainer {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9998;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 420px;
            padding: 0 1rem;
            pointer-events: none;
          }

          .flash-message {
            padding: 1rem 1.25rem;
            margin-bottom: 0.75rem;
            border-radius: 8px;
            font-weight: 600;
            width: 100%;
            text-align: center;
            pointer-events: all;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: fadeIn 0.4s ease;
          }

          .flash-success {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #10b981;
          }

          .flash-error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #ef4444;
          }

          @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
          }
    </style>
</head>
<body>

<div id="flashMessageContainer"></div>
<div id="errorPopupContainer" style="display: none;"></div>

<div class="container">
    <div class="header">
        <h2>Edit Student Details</h2>
        <p>Update comprehensive student information and academic records</p>
    </div>

    <form id="finalizeStudentForm" action="/Manage/join/<%= student._id %>" method="POST" enctype="multipart/form-data">
        
       <h3>Personal Information</h3>
        <div class="form-group">
            <label for="firstName">First Name</label>
            <input id="firstName" type="text" name="firstName" value="<%= student.firstName %>" required>
        </div>
        <div class="form-group">
            <label for="middleName">Middle Name</label>
            <input id="middleName" type="text" name="middleName" value="<%= student.middleName %>">
        </div>
        <div class="form-group">
            <label for="lastName">Last Name</label>
            <input id="lastName" type="text" name="lastName" value="<%= student.lastName %>" required>
        </div>
        <div class="form-group">
            <label for="gender">Gender</label>
            <select id="gender" name="gender" required>
                <option value="male" <%= student.gender === 'male' ? 'selected' : '' %>>Male</option>
                <option value="female" <%= student.gender === 'female' ? 'selected' : '' %>>Female</option>
            </select>
        </div>
        <div class="form-group">
            <label for="dob">Date of Birth</label>
            <input id="dob" type="date" name="dob" value="<%= student.dob?.toISOString().split('T')[0] %>" required>
        </div>
        <div class="form-group">
            <label for="bloodGroup">Blood Group</label>
            <select id="bloodGroup" name="bloodGroup">
                <option value="" <%= !student.bloodGroup ? 'selected' : '' %>>Select</option>
                <option value="A+" <%= student.bloodGroup === 'A+' ? 'selected' : '' %>>A+</option>
                <option value="A-" <%= student.bloodGroup === 'A-' ? 'selected' : '' %>>A-</option>
                <option value="B+" <%= student.bloodGroup === 'B+' ? 'selected' : '' %>>B+</option>
                <option value="B-" <%= student.bloodGroup === 'B-' ? 'selected' : '' %>>B-</option>
                <option value="O+" <%= student.bloodGroup === 'O+' ? 'selected' : '' %>>O+</option>
                <option value="O-" <%= student.bloodGroup === 'O-' ? 'selected' : '' %>>O-</option>
                <option value="AB+" <%= student.bloodGroup === 'AB+' ? 'selected' : '' %>>AB+</option>
                <option value="AB-" <%= student.bloodGroup === 'AB-' ? 'selected' : '' %>>AB-</option>
            </select>
        </div>
        <div class="form-group">
            <label for="studentEmail">Student Email</label>
            <input id="studentEmail" type="email" name="studentEmail" value="<%= student.studentEmail %>">
        </div>
        <div class="form-group">
            <label for="studentPhone">Student Phone</label>
            <input id="studentPhone" type="tel" name="studentPhone" value="<%= student.studentPhone %>" required>
        </div>
        <div class="form-group">
            <label for="aadhaarNumber">Student Aadhaar Number</label>
            <input id="aadhaarNumber" type="text" name="aadhaarNumber" value="<%= student.aadhaarNumber %>">
        </div>
        <div class="form-group">
            <label for="caste">Caste</label>
            <input id="caste" type="text" name="caste" value="<%= student.caste %>">
        </div>
        <div class="form-group">
            <label for="subCaste">Sub Caste</label>
            <input id="subCaste" type="text" name="subCaste" value="<%= student.subCaste %>">
        </div>
        <div class="form-group">
            <label for="religion">Religion</label>
            <input id="religion" type="text" name="religion" value="<%= student.religion %>">
        </div>
         <div class="form-group">
            <label for="bplAplStatus">BPL/APL Status</label>
            <select id="bplAplStatus" name="bplAplStatus">
                <option value="">Select</option>
                <option value="BPL" <%= student.bplAplStatus === 'BPL' ? 'selected' : '' %>>BPL</option>
                <option value="APL" <%= student.bplAplStatus === 'APL' ? 'selected' : '' %>>APL</option>
            </select>
        </div>
        
        <h3>Guardian Details</h3>
        <div class="form-group">
            <label for="guardian1Name">Guardian 1 Name</label>
            <input id="guardian1Name" type="text" name="guardian1Name" value="<%= student.guardian1Name %>" required>
        </div>
        <div class="form-group">
            <label for="guardian1Relation">Relation</label>
            <select id="guardian1Relation" name="guardian1Relation" required>
                <option value="">Select</option>
                <option value="Father" <%= student.guardian1Relation === 'Father' ? 'selected' : '' %>>Father</option>
                <option value="Mother" <%= student.guardian1Relation === 'Mother' ? 'selected' : '' %>>Mother</option>
                <option value="Brother" <%= student.guardian1Relation === 'Brother' ? 'selected' : '' %>>Brother</option>
                <option value="Sister" <%= student.guardian1Relation === 'Sister' ? 'selected' : '' %>>Sister</option>
                <option value="Other" <%= student.guardian1Relation === 'Other' ? 'selected' : '' %>>Other</option>
            </select>
        </div>
        <div class="form-group">
            <label for="guardian1Phone">Guardian 1 Phone</label>
            <input id="guardian1Phone" type="tel" name="guardian1Phone" value="<%= student.guardian1Phone %>" required>
        </div>
        <div class="form-group">
            <label for="guardian1Email">Guardian 1 Email</label>
            <input id="guardian1Email" type="email" name="guardian1Email" value="<%= student.guardian1Email %>">
        </div>
        <div class="form-group">
            <label for="guardian1Occupation">Guardian 1 Occupation</label>
            <input id="guardian1Occupation" type="text" name="guardian1Occupation" value="<%= student.guardian1Occupation %>">
        </div>
        <div class="form-group">
            <label for="guardian1Income">Guardian 1 Income</label>
            <input id="guardian1Income" type="number" name="guardian1Income" value="<%= student.guardian1Income %>">
        </div>
        <div class="form-group">
            <label for="guardian2Name">Guardian 2 Name</label>
            <input id="guardian2Name" type="text" name="guardian2Name" value="<%= student.guardian2Name %>">
        </div>
        <div class="form-group">
            <label for="guardian2Relation">Relation</label>
            <select id="guardian2Relation" name="guardian2Relation">
                <option value="">Select</option>
                <option value="Father" <%= student.guardian2Relation === 'Father' ? 'selected' : '' %>>Father</option>
                <option value="Mother" <%= student.guardian2Relation === 'Mother' ? 'selected' : '' %>>Mother</option>
                <option value="Brother" <%= student.guardian2Relation === 'Brother' ? 'selected' : '' %>>Brother</option>
                <option value="Sister" <%= student.guardian2Relation === 'Sister' ? 'selected' : '' %>>Sister</option>
                <option value="Other" <%= student.guardian2Relation === 'Other' ? 'selected' : '' %>>Other</option>
            </select>
        </div>
        <div class="form-group">
            <label for="guardian2Occupation">Guardian 2 Occupation</label>
            <input id="guardian2Occupation" type="text" name="guardian2Occupation" value="<%= student.guardian2Occupation %>">
        </div>
        <div class="form-group">
            <label for="guardian2Income">Guardian 2 Income</label>
            <input id="guardian2Income" type="number" name="guardian2Income" value="<%= student.guardian2Income %>">
        </div>
        <h3>Address</h3>
        <div class="form-group full-width">
            <label for="address1">Address Line 1</label>
            <input id="address1" type="text" name="address1" value="<%= student.address1 %>" required>
        </div>
        <div class="form-group full-width">
            <label for="address2">Address Line 2</label>
            <input id="address2" type="text" name="address2" value="<%= student.address2 %>">
        </div>
        <div class="form-group">
            <label for="city">City/Village</label>
            <input id="city" type="text" name="city" value="<%= student.city %>" required>
        </div>
        <div class="form-group">
            <label for="block">Block</label>
            <input id="block" type="text" name="block" value="<%= student.block %>">
        </div>
        <div class="form-group">
            <label for="district">District</label>
            <input id="district" type="text" name="district" value="<%= student.district %>" required>
        </div>
        <div class="form-group">
            <label for="state">State</label>
            <input id="state" type="text" name="state" value="<%= student.state %>" required>
        </div>
        <div class="form-group">
            <label for="zipcode">Zipcode</label>
            <input id="zipcode" type="text" name="zipcode" value="<%= student.zipcode %>" required>
        </div>
        <div class="form-group">
            <label for="country">Country</label>
            <input id="country" type="text" name="country" value="<%= student.country || 'India' %>" >
        </div>
        
        <h3>Institution Details</h3>
        <div class="form-group">
            <label for="registration_number">Registration Number</label>
            <input id="registration_number" type="text" name="registration_number" value="<%= student.registration_number %>">
        </div>
        <div class="form-group">
            <label for="enrollmentNumber">Enrollment Number</label>
            <input id="enrollmentNumber" type="text" name="enrollmentNumber" value="<%= student.enrollmentNumber %>">
        </div>
        <div class="form-group">
            <label for="classAssigned">Class Assigned</label>
            <input id="classAssigned" type="text" name="classAssigned" value="<%= student.classAssigned %>">
        </div>
        <div class="form-group">
        <label for="course">Course</label>
        <select id="course" name="course" required>
          <option value="">Select a Course</option>
          <option value="+2 (Science)" <%= student.course === '+2 (Science)' ? 'selected' : ''%>>+2 (Science)</option>
          <option value="+3 (Science)" <%= student.course === '+3 (Science)' ? 'selected' : ''%>>+3 (Science)</option>
          <option value="Vocational Skill Development" <%= student.course === 'Vocational Skill Development' ? 'selected' : ''%>>Vocational Skill Development</option>
        </select>
      </div>
        <div class="form-group">
            <label for="academicYear">Academic Year</label>
            <input id="academicYear" type="text" name="academicYear" value="<%= student.academicYear %>">
        </div>
        <div class="form-group">
            <label for="academicSession">Academic Session</label>
            <input id="academicSession" type="text" name="academicSession" value="<%= student.academicSession %>">
        </div>
        <div class="form-group">
            <label for="batch">Batch</label>
            <input id="batch" type="text" name="batch" value="<%= student.batch %>">
        </div>
         <div class="form-group">
            <label for="joiningDate">Joining Date</label>
            <input id="joiningDate" type="date" name="joiningDate" value="<%= student.joiningDate?.toISOString().split('T')[0] %>" >
        </div>
        <div class="form-group">
            <label for="currentSemester">Current Semester</label>
            <input id="currentSemester" type="text" name="currentSemester" value="<%= student.currentSemester %>">
        </div>
        <div class="form-group">
            <label for="subjects">Subjects (comma separated) </label>
            <input id="subjects" type="text" name="subjects" value="<%= student.subjects?.join(',') %>" >
        </div>
        
        <h3>Previous School & Matric Details</h3>
        <div class="form-group">
            <label for="lastSchoolAttended">Last School Attended</label>
            <input id="lastSchoolAttended" type="text" name="lastSchoolAttended" value="<%= student.lastSchoolAttended %>">
        </div>
          <div class="form-group">
            <label for="matricBoard">Matric Board</label>
            <input id="matricBoard" type="text" name="matricBoard" value="<%= student.matricBoard %>">
        </div>
          <div class="form-group">
            <label for="matricRollNo">Matric Roll No</label>
            <input id="matricRollNo" type="text" name="matricRollNo" value="<%= student.matricRollNo %>">
        </div>
          <div class="form-group">
            <label for="matricYear">Matric Year</label>
            <input id="matricYear" type="number" name="matricYear" value="<%= student.matricYear %>">
        </div>
        <h4>Matric Marks</h4>
        <div id="matricMarksContainer" class="full-width">
            <% 
                let matricSubjects = {};
                if (student && student.matricMarks && student.matricMarks.subjects) {
                    const subj = student.matricMarks.subjects;
                    if (typeof subj.forEach === 'function') {
                        subj.forEach((value, key) => { matricSubjects[key] = value; });
                    } else {
                        matricSubjects = Object.assign({}, subj);
                    }
                }
            %>
            <% Object.entries(matricSubjects).forEach(([subject, mark]) => { %>
                <div class="matric-row">
                    <div class="form-group">
                        <label>Subject</label>
                        <input type="text" class="matric-subject" placeholder="Subject Name" value="<%= subject %>">
                    </div>
                    <div class="form-group">
                        <label>Marks</label>
                        <input type="number" step="0.01" class="matric-mark" placeholder="Marks" name="matricMarks[<%= subject %>]" value="<%= mark %>">
                    </div>
                    <button type="button" class="small-btn remove-btn remove-matric">Remove</button>
                </div>
            <% }); %>
        </div>
        <div class="section-actions">
            <button type="button" id="addMatricBtn" class="small-btn add-btn">+ Add Mark</button>
        </div>
        <div class="matric-summary">
             <div class="form-group">
                <label for="matricTotal">Total Marks:</label>
                <input id="matricTotal" type="number" step="0.01" name="matricTotal" value="<%= student.matricMarks?.total || '' %>">
            </div>
            <div class="form-group">
                <label for="matricPercentage">Percentage:</label>
                <input id="matricPercentage" type="number" step="0.01" name="matricPercentage" value="<%= student.matricMarks?.percentage || '' %>">
            </div>
        </div>

        <h3>Family Members</h3>
        <div id="familyMembersContainer" class="full-width">
            <% if (student.familyMembers && student.familyMembers.length) { %>
                <% student.familyMembers.forEach((member, idx) => { %>
                    <div class="family-row">
                        <div class="form-group"><label>Name</label><input type="text" name="familyMembers[<%= idx %>][name]" value="<%= member.name || '' %>"></div>
                        <div class="form-group"><label>Age</label><input type="number" name="familyMembers[<%= idx %>][age]" value="<%= member.age || '' %>"></div>
                        <div class="form-group"><label>Relation</label><input type="text" name="familyMembers[<%= idx %>][relation]" value="<%= member.relation || '' %>"></div>
                        <div class="form-group"><label>Education</label><input type="text" name="familyMembers[<%= idx %>][education]" value="<%= member.education || '' %>"></div>
                        <div class="form-group"><label>Other Info</label><input type="text" name="familyMembers[<%= idx %>][otherInfo]" value="<%= member.otherInfo || '' %>"></div>
                        <button type="button" class="small-btn remove-btn remove-family">Remove</button>
                    </div>
                <% }); %>
            <% } %>
        </div>
        <div class="section-actions">
            <button type="button" id="addFamilyBtn" class="small-btn add-btn">+ Add Family Member</button>
        </div>
        <div class="form-group">
                <label for="totalFamilyMembers">Total Family Members</label>
                <input id="totalFamilyMembers" type="number" step="1" name="totalFamilyMembers" value="<%= student.totalFamilyMembers || '' %>">
        </div>

        <h3>Hostel & Transport</h3>
        <div class="form-group">
            <label for="isHostelResident">Is Hostel Resident?</label>
            <select id="ishostelResident" name="isHostelResident">
                <option value="false" <%= !student.isHostelResident ? 'selected' : '' %>>No</option>
                <option value="true" <%= student.isHostelResident ? 'selected' : '' %>>Yes</option>
            </select>
        </div>
        <div class="form-group">
            <label for="hostelJoiningDate">Hostel Joining Date</label>
            <input id="hostelJoiningDate" type="date" name="hostelJoiningDate" value="<%= student.hostelJoiningDate?.toISOString().split('T')[0] %>" >
        </div>
        <div class="form-group">
            <label for="hostelDurationMonths">Hostel Duration (in months)</label>
            <input id="hostelDUrationMonths" type="number" name="hostelDurationMonths" value="<%= student.hostelDurationMonths %>" >
        </div>
        <div class="form-group">
            <label for="hostelWithinCampus">Hostel Within Campus?</label>
            <select id="hostelWithinCampus" name="hostelWithinCampus">
                <option value="false" <%= !student.hostelWithinCampus ? 'selected' : '' %>>No</option>
                <option value="true" <%= student.hostelWithinCampus ? 'selected' : '' %>>Yes</option>
            </select>
        </div>
        <div class="form-group">
            <label for="isTransportResident">Requires Transport?</label>
            <select id="isTransportResident" name="isTransportResident">
                <option value="false" <%= !student.isTransportResident ? 'selected' : '' %>>No</option>
                <option value="true" <%= student.isTransportResident ? 'selected' : '' %>>Yes</option>
            </select>
        </div>
        <h3>Bank Details</h3>
        <div class="form-group">
            <label for="bankAccountNumber">Bank Account Number</label>
            <input id="bankAccountNumber" type="text" name="bankAccountNumber" value="<%= student.bankAccountNumber %>">
        </div>
        <div class="form-group">
            <label for="ifscCode">IFSC Code</label>
            <input id="ifscCode" type="text" name="ifscCode" value="<%= student.ifscCode %>">
        </div>
        <div class="form-group">
            <label for="bankName">Bank Name</label>
            <input id="bankName" type="text" name="bankName" value="<%= student.bankName %>">
        </div>
        <div class="form-group">
            <label for="bankBranch">Bank Branch</label>
            <input id="bankBranch" type="text" name="bankBranch" value="<%= student.bankBranch %>">
        </div>
        <div class="form-group">
            <label for="isAadhaarLinkedToBank">Aadhaar Linked to Bank?</label>
            <select id="isAadhaarLinkedToBank" name="isAadhaarLinkedToBank">
                <option value="false" <%= !student.isAadhaarLinkedToBank ? 'selected' : '' %>>No</option>
                <option value="true" <%= student.isAadhaarLinkedToBank ? 'selected' : '' %>>Yes</option>
            </select>
        </div>
         <h3>Hobbies and Interests</h3>
        <div class="form-group">
            <label for="hobby">Hobby</label>
            <input id="hobby" type="text" name="hobby" value="<%= student.hobby || ''%>" placeholder="e.g. Football, Singing">
        </div>
        <div class="form-group">
            <label for="interest">Interest</label>
            <input id="interest" type="text" name="interest" value="<%= student.interest || '' %>" placeholder="e.g. Science, Coding">
        </div>
            <h3>Toggle Student Status</h3>
        <div class="form-group">
            <label for="isEnrolled">Enrollment Status</label>
            <select id="isEnrolled" name="isEnrolled">
                <option value="false" <%= !student.isEnrolled ? 'selected' : '' %>>No</option>
                <option value="true" <%= student.isEnrolled ? 'selected' : '' %>>Yes</option>
            </select>
        </div>
        <div class="form-group">
            <label for="isPromoted">Promotion Status</label>
            <select id="isPromoted" name="isPromoted">
                <option value="false" <%= !student.isPromoted ? 'selected' : '' %>>No</option>
                <option value="true" <%= student.isPromoted ? 'selected' : '' %>>Yes</option>
            </select>
        </div>
        <div class="form-group">
            <label for="isAlumni">Alumni Status</label>
            <select id="isAlumni" name="isAlumni">
                <option value="false" <%= !student.isAlumni ? 'selected' : '' %>>No</option>
                <option value="true"  <%= student.isAlumni ? 'selected' : '' %>>Yes</option>
            </select>
        </div>
        <div class="form-group">
            <label for="isActive">Active Status</label>
            <select id="isActive" name="isActive">
                <option value="false" <%= !student.isActive ? 'selected' : '' %>>No</option>
                <option value="true" <%= student.isActive ? 'selected' : '' %>>Yes</option>
            </select>
        </div>
        <h3>Uploads</h3>
        <div class="form-group">
            <label for="profileImage">Student Photo</label>
            <input id="profileImage" type="file" name="profileImage" accept="image/*">
        </div>
         <div class="form-group">
            <label for="doc_name">Document Name</label>
            <input id="doc_name" type="text" name="doc_name" value="<%= student.doc_name || '' %>" placeholder="e.g. Birth Certificate, Aadhaar Card, etc.">
        </div>
        <div class="form-group">
            <label for="documents">Supporting Documents</label>
            <input id="documents" type="file" name="documents" multiple>
        </div>
        <button type="submit">Save & Finalize</button>
    </form>
</div>
    </form>
</div>

<script>
  // Utility function to sanitize subject key
  function safeKeyForBrackets(s) {
    if (s == null) return '';
    return String(s).replace(/[\.\$\[\]]/g, '_').trim();
  }

  // Matric marks dynamic functionality
  (function() {
    const container = document.getElementById('matricMarksContainer');
    const addBtn = document.getElementById('addMatricBtn');

    function createMatricRow(subject = '', mark = '') {
      const row = document.createElement('div');
      row.className = 'matric-row';

      const subjInput = document.createElement('input');
      subjInput.type = 'text';
      subjInput.className = 'matric-subject';
      subjInput.placeholder = 'Subject';
      subjInput.value = subject;

      const markInput = document.createElement('input');
      markInput.type = 'number';
      markInput.step = '0.01';
      markInput.className = 'matric-mark';
      markInput.placeholder = 'Marks';
      markInput.value = mark;

      const setMarkName = () => {
        const safe = safeKeyForBrackets(subjInput.value);
        if (safe) {
          markInput.name = `matricMarks[${safe}]`;
        } else {
          markInput.removeAttribute('name');
        }
      };

      subjInput.addEventListener('input', setMarkName);
      setMarkName();

      const removeBtn = document.createElement('button');
      removeBtn.type = 'button';
      removeBtn.className = 'small-btn remove-btn remove-matric';
      removeBtn.textContent = 'Remove';
      removeBtn.addEventListener('click', () => {
        row.style.opacity = '0';
        row.style.transform = 'translateX(-20px)';
        setTimeout(() => row.remove(), 300);
      });

      row.appendChild(subjInput);
      row.appendChild(markInput);
      row.appendChild(removeBtn);
      return row;
    }

    function initExistingMatricRows() {
      const rows = container.querySelectorAll('.matric-row');
      rows.forEach((row) => {
        const subj = row.querySelector('.matric-subject');
        const mark = row.querySelector('.matric-mark');
        if (!subj || !mark) return;

        if (!mark.name && subj.value) {
          mark.name = `matricMarks[${safeKeyForBrackets(subj.value)}]`;
        }

        subj.addEventListener('input', () => {
          const safe = safeKeyForBrackets(subj.value);
          if (safe) mark.name = `matricMarks[${safe}]`;
          else mark.removeAttribute('name');
        });

        const rem = row.querySelector('.remove-matric');
        if (rem) {
          rem.addEventListener('click', () => {
            row.style.opacity = '0';
            row.style.transform = 'translateX(-20px)';
            setTimeout(() => row.remove(), 300);
          });
        }
      });
    }

    addBtn.addEventListener('click', () => {
      const newRow = createMatricRow('', '');
      container.appendChild(newRow);
      newRow.style.opacity = '0';
      newRow.style.transform = 'translateY(20px)';
      setTimeout(() => {
        newRow.style.opacity = '1';
        newRow.style.transform = 'translateY(0)';
      }, 10);
      newRow.querySelector('.matric-subject').focus();
    });

    initExistingMatricRows();
  })();

  // Family members dynamic functionality
  (function() {
    const container = document.getElementById('familyMembersContainer');
    const addBtn = document.getElementById('addFamilyBtn');

    function createFamilyRow(index, data = {}) {
      const row = document.createElement('div');
      row.className = 'family-row';

      const fields = [
        { name: 'name', type: 'text', placeholder: 'Name' },
        { name: 'age', type: 'number', placeholder: 'Age' },
        { name: 'relation', type: 'text', placeholder: 'Relation' },
        { name: 'education', type: 'text', placeholder: 'Education' },
        { name: 'otherInfo', type: 'text', placeholder: 'Other Info' }
      ];

      fields.forEach(field => {
        const input = document.createElement('input');
        input.type = field.type;
        input.placeholder = field.placeholder;
        input.name = `familyMembers[${index}][${field.name}]`;
        input.value = data[field.name] || '';
        row.appendChild(input);
      });

      const removeBtn = document.createElement('button');
      removeBtn.type = 'button';
      removeBtn.className = 'small-btn remove-btn remove-family';
      removeBtn.textContent = 'Remove';
      removeBtn.addEventListener('click', () => {
        row.style.opacity = '0';
        row.style.transform = 'translateX(-20px)';
        setTimeout(() => {
          row.remove();
          reindexFamilyRows();
        }, 300);
      });

      row.appendChild(removeBtn);
      return row;
    }

    function reindexFamilyRows() {
      const rows = container.querySelectorAll('.family-row');
      rows.forEach((row, idx) => {
        const inputs = row.querySelectorAll('input');
        inputs.forEach((inp) => {
          const placeholder = inp.placeholder || '';
          let field = '';
          if (/name/i.test(placeholder)) field = 'name';
          else if (/age/i.test(placeholder)) field = 'age';
          else if (/relation/i.test(placeholder)) field = 'relation';
          else if (/education/i.test(placeholder)) field = 'education';
          else if (/other/i.test(placeholder)) field = 'otherInfo';
          if (field) inp.name = `familyMembers[${idx}][${field}]`;
        });
      });
    }

    function initExistingFamilyRows() {
      const rows = container.querySelectorAll('.family-row');
      rows.forEach((row) => {
        const rem = row.querySelector('.remove-family');
        if (rem) rem.addEventListener('click', () => {
          row.style.opacity = '0';
          row.style.transform = 'translateX(-20px)';
          setTimeout(() => {
            row.remove();
            reindexFamilyRows();
          }, 300);
        });
      });
      reindexFamilyRows();
    }

    addBtn.addEventListener('click', () => {
      const idx = container.querySelectorAll('.family-row').length;
      const newRow = createFamilyRow(idx, {});
      container.appendChild(newRow);
      newRow.style.opacity = '0';
      newRow.style.transform = 'translateY(20px)';
      setTimeout(() => {
        newRow.style.opacity = '1';
        newRow.style.transform = 'translateY(0)';
      }, 10);
      reindexFamilyRows();
      newRow.querySelector('input').focus();
    });

    initExistingFamilyRows();
  })();

  // Form submission and error handling
  const form = document.getElementById('finalizeStudentForm');

  const errorContainer = document.getElementById('errorPopupContainer');
  const closePopup = document.getElementById('closeErrorPopup');
  if (closePopup) {
    closePopup.addEventListener('click', () => {
      if (errorContainer) {
        errorContainer.style.opacity = '0';
        setTimeout(() => errorContainer.style.display = 'none', 300);
      }
    });
  }

  form.addEventListener('submit', async function (e) {
    e.preventDefault();

    const submitBtn = form.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    
    submitBtn.classList.add('loading');
    submitBtn.textContent = 'Saving...';
    submitBtn.disabled = true;

    const formData = new FormData(form);

    try {
      const response = await fetch(form.action, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        return handleServerError(response);
      } else {
        showFlashMessage('success', 'Student details updated successfully! Redirecting...');
        setTimeout(() => window.location.href = '/Manage/studentsEnrolled', 2000);
      }
    } catch (err) {
      console.error(err);
      showFlashMessage('error', 'Failed to submit form. Please try again.');
    } finally {
      submitBtn.classList.remove('loading');
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    }
  });

      async function handleServerError(res) {
        const contentType = res.headers.get('Content-Type') || '';

        if (contentType.includes('text/html')) {
          const html = await res.text();
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = html;

          const popup = tempDiv.querySelector('#errorPopupContainer');
          const scripts = tempDiv.querySelectorAll('script');

          if (popup) {
            document.body.prepend(popup);
            scripts.forEach((script) => {
              const newScript = document.createElement('script');
              if (script.src) newScript.src = script.src;
              else newScript.textContent = script.textContent;
              document.body.appendChild(newScript);
            });
          } else {
            showFlashMessage('error', 'An unknown error occurred.');
          }
        } else {
          showFlashMessage('error', 'Server error: unexpected content type.');
        }
      } 

    function showFlashMessage(type, message, duration = 4000) {
        const container = document.getElementById('flashMessageContainer');
        const msg = document.createElement('div');
        msg.classList.add('flash-message');
        msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
        msg.textContent = message;

        container.appendChild(msg);

        setTimeout(() => {
          msg.style.opacity = '0';
          msg.style.transform = 'translateY(-10px)';
          setTimeout(() => msg.remove(), 500);
        }, duration);
      } 

  // Add smooth scroll behavior
  document.documentElement.style.scrollBehavior = 'smooth';

  // Keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      document.getElementById('flashMessageContainer').innerHTML = '';
      const errorContainer = document.getElementById('errorPopupContainer');
      if (errorContainer) {
        errorContainer.style.opacity = '0';
        setTimeout(() => errorContainer.style.display = 'none', 300);
      }
    }
  });

  // Add loading animations on page load
  window.addEventListener('load', () => {
    const form = document.querySelector('form');
    form.style.opacity = '0';
    form.style.transform = 'translateY(20px)';
    setTimeout(() => {
      form.style.transition = 'all 0.6s ease-out';
      form.style.opacity = '1';
      form.style.transform = 'translateY(0)';
    }, 100);
  });

  window.onload = async function() {
            const token = localStorage.getItem('token');
            try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
                          try {
                    const token = localStorage.getItem('token');
                    if (!token) {
                    console.error('No token found');
                    return;
                    }
                    // console.log('Token:', token);
                    // Decode JWT to get staffId
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    const staffId = payload._id;
                    
                    const res = await fetch('/Manage/get-permissions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ staffId })
                    });

                    if (!res.ok) {
                    handleServerError(res);
                    return;
                    }

                    const data = await res.json();
                    const permissions = data.permissions || [];
                    // console.log('Permissions:', permissions);
                    // Hide all menu items not in permissions
                    
                    if (!permissions.includes('edit_students')) {
                        showFlashMessage('error', 'You do not have permission to access this page.');
                        setTimeout(() => {
                            window.location.href = '/Staff/dashboard';
                        }, 1500);
                    }

                } catch (err) {
                    console.error('Error fetching permissions:', err);
                }
        }
</script>
</body>
</html>
