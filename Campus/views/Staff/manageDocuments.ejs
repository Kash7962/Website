<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Manage Documents â€” <%= studentId %></title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Inter:wght@400;600;700&display=swap" rel="stylesheet">

  <style>
    /* --- THEME & GLOBAL STYLES --- */
    :root {
      --primary-color: #1e40af;
      --primary-dark: #1c3d90;
      --secondary-color: #f8fafc;
      --text-dark: #1e293b;
      --text-light: #475569;
      --border-color: #e2e8f0;
      --input-border-color: #d1d5db;
      --card-shadow: 0 4px 12px rgba(0,0,0,0.06);
      --danger-color: #dc2626;
      --danger-light: #fee2e2;
    }
    /* Popups and Flash Messages */
         #errorPopupContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            background: rgba(0, 0, 0, 0.4);
            font-family: 'Montserrat', sans-serif;
        }

        #errorPopupContainer * {
            box-sizing: border-box;
            font-family: inherit;
            margin: 0;
            padding: 0;
        }

        #errorPopupBox {
            max-width: 400px;
            width: 90%;
            padding: 30px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        #errorPopupBox h1 {
            font-size: 3rem;
            font-weight: 700;
            color: #e74c3c;
        }

        #errorPopupBox h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin: 10px 0;
        }

        #errorMessage {
            font-size: 1rem;
            color: #666;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #e74c3c;
            text-align: left;
            word-wrap: break-word;
        }

        #closeErrorPopup {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 24px;
            background-color: #3498db;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s ease, transform 0.2s ease;
            cursor: pointer;
        }

        #closeErrorPopup:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

            #flashMessageContainer {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9998;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 420px;
            padding: 0 1rem;
            pointer-events: none;
        }

        .flash-message {
            padding: 1rem 1.25rem;
            margin-bottom: 0.75rem;
            border-radius: 8px;
            font-weight: 600;
            width: 100%;
            text-align: center;
            pointer-events: all;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: fadeIn 0.4s ease;
        }

        .flash-success {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #10b981;
        }

        .flash-error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #ef4444;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    * { box-sizing: border-box; }

    body {
      font-family: 'Poppins', sans-serif;
      background: var(--secondary-color);
      color: var(--text-dark);
      margin: 0;
      padding: 0;
    }

    h1, h2, h3 { font-family: 'Inter', sans-serif; }

    /* --- LAYOUT & HEADER --- */
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem 1rem;
    }

    header.page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
      margin-bottom: 2rem;
      padding-bottom: 1.5rem;
      border-bottom: 1px solid var(--border-color);
    }
    header.page-header h1 {
      margin: 0;
      font-size: 2rem;
    }
    header.page-header code {
      font-size: 1rem;
      background-color: #f1f5f9;
      padding: .25rem .5rem;
      border-radius: 6px;
      color: var(--text-light);
    }

    section {
      margin-bottom: 2.5rem;
    }

    section > h2 {
      font-size: 1.75rem;
      margin-bottom: 1.5rem;
    }

    /* --- CARDS --- */
    .card {
      background: #fff;
      border-radius: 12px;
      padding: 1.5rem;
      box-shadow: var(--card-shadow);
      border: 1px solid var(--border-color);
    }

    /* --- FORMS & INPUTS --- */
    form {
      display: grid;
      gap: 1rem;
    }
    label {
      font-weight: 600;
      font-size: 0.9rem;
      display: block;
      margin-bottom: 0.5rem;
    }
    input, select, button {
      font-family: inherit;
      font-size: 1rem;
      border-radius: 8px;
      border: 1px solid var(--input-border-color);
      padding: 0.6rem 0.75rem;
      width: 100%;
    }
    input:focus, select:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.2);
    }

    /* --- BUTTONS --- */
    button, .btn {
      background: var(--primary-color);
      color: white;
      border: none;
      cursor: pointer;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.2s ease;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }
    button:hover, .btn:hover {
      background: var(--primary-dark);
      transform: translateY(-1px);
    }
    .btn {
        background-color: #f1f5f9;
        color: var(--text-light);
        border: 1px solid var(--border-color);
    }
     .btn:hover {
        background-color: #e2e8f0;
     }

    .btn-danger, button.btn-danger {
      background: var(--danger-color);
      color: white;
      border: none;
    }
    .btn-danger:hover, button.btn-danger:hover {
      background: #b91c1c;
    }

    /* --- DOCUMENT GRID & CARDS --- */
    .grid {
      display: grid;
      gap: 1.5rem;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    }
    .doc-card {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    .doc-card header strong {
      font-size: 1.1rem;
    }
    .doc-preview a {
      color: var(--primary-color);
      font-weight: 600;
      text-decoration: none;
    }
    .doc-preview a:hover {
      text-decoration: underline;
    }
    .doc-preview img {
      width: 100%;
      height: 180px;
      object-fit: cover;
      border-radius: 8px;
      border: 1px solid var(--border-color);
      transition: transform .2s ease;
    }
     .doc-preview a:hover img {
        transform: scale(1.03);
     }
    .doc-actions {
      display: flex;
      gap: 0.75rem;
      flex-wrap: wrap;
      margin-top: auto;
    }
    .doc-actions .btn, .doc-actions button {
        width: auto;
        flex-grow: 1;
    }
    .doc-actions form {
        display: contents;
    }

    /* MODIFICATION: Make the download button blue */
    .doc-actions a.btn[download] {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }
    .doc-actions a.btn[download]:hover {
        background-color: var(--primary-dark);
    }
    .modal-backdrop {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: rgba(0,0,0,0.6);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .modal-content {
      background: #fff;
      padding: 20px;
      border-radius: 12px;
      width: 300px;
      text-align: center;
    }

    .modal-actions {
      margin-top: 15px;
      display: flex;
      justify-content: space-between;
    }
    .modal-actions button {
      flex: 1;
      padding: 10px 16px;
      border: none;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s ease, transform 0.1s ease;
      margin: 0 5px;
    }

    .btn-secondary {
      background-color: #e5e7eb; /* light gray */
      color: #374151; /* dark gray text */
    }

    .btn-secondary:hover {
      background-color: #d1d5db;
      transform: translateY(-1px);
    }

    .btn-danger-solid {
      background-color: #ef4444; /* red */
      color: #fff;
    }

    .btn-danger-solid:hover {
      background-color: #dc2626; /* darker red */
      transform: translateY(-1px);
    }

  
  </style>
</head>
<body>
  <div id="flashMessageContainer" aria-live="polite"></div>

  <main class="container">
    <header class="page-header">
      <h1>Student Documents</h1>
      <div>Student ID: <code><%= studentId %></code></div>
    </header>

    <section class="card">
      <h2>Upload New Document</h2>
      <form id="uploadForm"
            action="/Manage/<%= studentId %>/upload"
            method="POST"
            enctype="multipart/form-data">
        <div>
          <label for="docName">Document Name</label>
          <input id="docName" name="name" type="text" maxlength="120" required />
        </div>
        <div>
          <label for="docType">Type</label>
          <select id="docType" name="type" required>
            <option value="photo">Photo</option>
            <option value="pdf">PDF</option>
          </select>
        </div>
        <div>
          <label for="docFile">File (Image or PDF)</label>
          <input id="docFile" name="documents" type="file" accept="image/*,application/pdf" required />
        </div>
        <div>
          <button type="submit">Upload</button>
        </div>
      </form>
    </section>

    <section>
      <h2>Uploaded Documents</h2>
      <% if (!documents || documents.length === 0) { %>
        <p>No documents uploaded yet.</p>
      <% } else { %>
        <div class="grid">
          <% documents.forEach(function(doc){ %>
            <article class="card doc-card">
              <header>
                <div><strong><%= doc.name %></strong></div>
                <div style="font-size:0.9rem; color:var(--text-light);">
                  <%= new Date(doc.uploadedAt).toLocaleString('en-IN') %>
                </div>
              </header>
              <div class="doc-preview">
                <% if (doc.type === 'photo') { %>
                  <a href="<%= doc.url %>" target="_blank" rel="noopener">
                    <img src="<%= doc.url %>" alt="Document - <%= doc.name %>"/>
                  </a>
                <% } else { %>
                  <a href="<%= doc.url %>" target="_blank" rel="noopener">View PDF Document</a>
                <% } %>
              </div>
              <footer class="doc-actions">
                <a href="<%= doc.url %>" download class="btn">Download</a>
                <button type="button" class="btn-danger delete-btn"
                        data-delete-url="/Manage/documents/<%= studentId %>/delete/<%= doc._id %>">
                  Delete
                </button>
                <div id="deleteModal" class="modal-backdrop" style="display:none;">
                  <div class="modal-content">
                    <h3>Are you sure?</h3>
                    <p>This action cannot be undone.</p>
                    <div class="modal-actions">
                      <button id="cancelDeleteBtn" class="btn btn-secondary">Cancel</button>
                      <button id="confirmDeleteBtn" class="btn btn-danger-solid">Delete</button>
                    </div>
                  </div>
                </div>

                <!-- <form class="deleteForm">
                  <button type="button" class="btn-danger"
                          data-delete-url="/Manage/documents/<%= studentId %>/delete/<%= doc._id %>">
                    Delete
                  </button>
                  <div id="deleteModal" class="delete-modal-backdrop">
                  <div class="delete-modal-content">
                    <h3>Confirm Delete</h3>
                    <p>Do you really want to delete this document? This action cannot be undone.</p>
                    <div class="modal-actions">
                      <button id="cancelDeleteBtn" class="btn btn-secondary">Cancel</button>
                      <button id="confirmDeleteBtn" class="btn btn-danger-solid">Delete</button>
                    </div>
                  </div>
                </div>
                </form> -->
                
              </footer>
            </article>
          <% }) %>
        </div>
      <% } %>
    </section>
  </main>

  <script>
     window.onload = async function() {
            const token = localStorage.getItem('token');
            try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
                        try {
                        const token = localStorage.getItem('token');
                        if (!token) {
                        console.error('No token found');
                        return;
                        }
                        // console.log('Token:', token);
                        // Decode JWT to get staffId
                        const payload = JSON.parse(atob(token.split('.')[1]));
                        const staffId = payload._id;
                        
                        const res = await fetch('/Manage/get-permissions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ staffId })
                        });

                        if (!res.ok) {
                        handleServerError(res);
                        return;
                        }

                        const data = await res.json();
                        const permissions = data.permissions || [];
                        // console.log('Permissions:', permissions);
                        // Hide all menu items not in permissions
                        
                        if (!permissions.includes('document_students')) {
                            showFlashMessage('error', 'You do not have permission to access this page.');
                            setTimeout(() => {
                                window.location.href = '/Staff/dashboard';
                            }, 1500);
                        }
                    } catch (err) {
                        console.error('Error fetching permissions:', err);
                    }
                }

            async function handleServerError(res) {
                const contentType = res.headers.get('Content-Type') || '';

                if (contentType.includes('text/html')) {
                const html = await res.text();
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;

                const popup = tempDiv.querySelector('#errorPopupContainer');
                const scripts = tempDiv.querySelectorAll('script');

                if (popup) {
                    document.body.prepend(popup);
                    scripts.forEach((script) => {
                    const newScript = document.createElement('script');
                    if (script.src) newScript.src = script.src;
                    else newScript.textContent = script.textContent;
                    document.body.appendChild(newScript);
                    });
                } else {
                    showFlashMessage('error', 'An unknown error occurred.');
                }
                } else {
                showFlashMessage('error', 'Server error: unexpected content type.');
                }
            } 

            function showFlashMessage(type, message, duration = 4000) {
                const container = document.getElementById('flashMessageContainer');
                const msg = document.createElement('div');
                msg.classList.add('flash-message');
                msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
                msg.textContent = message;

                container.appendChild(msg);

                setTimeout(() => {
                msg.style.opacity = '0';
                msg.style.transform = 'translateY(-10px)';
                setTimeout(() => msg.remove(), 500);
                }, duration);
            } 
               document.addEventListener("DOMContentLoaded", () => {
      const deleteModal = document.getElementById("deleteModal");
      const cancelBtn = document.getElementById("cancelDeleteBtn");
      const confirmBtn = document.getElementById("confirmDeleteBtn");
      let deleteUrl = null;

      // When delete button is clicked â†’ open modal
      document.body.addEventListener("click", (e) => {
        if (e.target && e.target.classList.contains("delete-btn")) {
          deleteUrl = e.target.getAttribute("data-delete-url");
          deleteModal.style.display = "flex";
        }
      });

      // Cancel â†’ close modal
      cancelBtn.addEventListener("click", () => {
        deleteModal.style.display = "none";
        deleteUrl = null;
      });

      // Confirm delete
      confirmBtn.addEventListener("click", async () => {
        if (!deleteUrl) return;
        try {
          const res = await fetch(deleteUrl, {
            method: "POST",
            credentials: "include",
          });
          if (!res.ok) throw new Error(await res.text() || "Delete failed");

          showFlashMessage("success", "Deleted successfully!");
          setTimeout(() => window.location.reload(), 1200);
        } catch (err) {
          showFlashMessage("error", err.message || "Delete failed");
        } finally {
          deleteModal.style.display = "none";
          deleteUrl = null;
        }
      });
    });
    // Your original JavaScript logic is preserved below
    window.addEventListener('load', () => {
      const fileInput = document.getElementById('docFile');
      const typeSelect = document.getElementById('docType');
      fileInput.addEventListener('change', () => {
        const f = fileInput.files[0];
        if (!f) return;
        if (f.type.startsWith('image/')) typeSelect.value = 'photo';
        else if (f.type === 'application/pdf') typeSelect.value = 'pdf';
      });

      const uploadForm = document.getElementById('uploadForm');
      uploadForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const fd = new FormData(uploadForm);
        try {
          const res = await fetch(uploadForm.action, {
            method: 'POST',
            body: fd,
          });
          if (!res.ok) return handleServerError(res)
          showFlashMessage('success', 'Document uploaded successfully!');
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } catch (err) {
          showFlashMessage('error', 'Upload failed: ' + (err.message || 'Unknown error'));
        }
      });

   


    });
  </script>
</body>
</html>