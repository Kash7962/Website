<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Principal — Create / Review Curriculum</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

    :root {
      --bg: #f8fafc;
      --card: #ffffff;
      --border: #e2e8f0;
      --text-primary: #1e293b;
      --text-secondary: #475569;
      --muted: #64748b;
      --accent: #1e40af;
      --accent-dark: #1e3a8a;
      --success: #16a34a;
      --danger: #dc2626;
      --warning: #f97316;
    }

    body {
      height: 100%;
      margin: 0;
      font-family: 'Inter', system-ui, -apple-system, sans-serif;
      background: var(--bg);
      color: var(--text-secondary);
      padding: 24px;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
    }

    header {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 18px;
      gap: 16px;
    }

    h1 {
      font-size: 1.5rem;
      margin: 0;
      font-weight: 700;
      background: linear-gradient(45deg, var(--accent-dark), var(--accent));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      color: transparent;
    }
    
    .card {
      background: var(--card);
      border-radius: 12px;
      padding: 24px;
      box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.05), 0 2px 4px -2px rgb(0 0 0 / 0.05);
      margin-bottom: 24px;
      border: 1px solid var(--border);
    }

    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 16px;
    }

    label {
      font-size: 0.875rem;
      color: var(--muted);
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
    }

    input[type="text"], input[type="number"], select, textarea {
      width: 100%;
      padding: 8px 12px;
      border-radius: 8px;
      border: 1px solid var(--border);
      font-size: 0.9rem;
      font-family: 'Inter', sans-serif;
      background-color: #fcfdfe;
      transition: border-color 0.2s ease, box-shadow 0.2s ease;
      box-sizing: border-box;
    }

    input:focus, select:focus, textarea:focus {
        outline: none;
        border-color: var(--accent);
        box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.2);
        background-color: #fff;
    }

    textarea.review {
      min-height: 50px;
      resize: vertical;
    }

    button {
      background: var(--accent);
      color: white;
      padding: 8px 14px;
      border-radius: 8px;
      border: none;
      cursor: pointer;
      font-weight: 600;
      font-family: 'Inter', sans-serif;
      transition: all 0.2s ease;
    }
    button:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    button:active {
        transform: translateY(0);
        box-shadow: none;
    }

    button.secondary {
      background: #eef2ff;
      color: var(--accent);
    }
    button.secondary:hover {
        background: #e0e7ff;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th, td {
      padding: 12px 16px;
      border-bottom: 1px solid var(--border);
      text-align: left;
      font-size: 0.9rem;
      vertical-align: top;
    }

    th {
      background: #fcfdfe;
      font-weight: 600;
      color: var(--muted);
      font-size: 0.75rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .small, .tiny {
      font-size: 0.85rem;
      color: var(--muted);
    }

     #errorPopupContainer {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      background: rgba(0, 0, 0, 0.4);
      font-family: 'Montserrat', sans-serif;
    }

    #errorPopupContainer * {
      box-sizing: border-box;
      font-family: inherit;
      margin: 0;
      padding: 0;
    }

    #errorPopupBox {
      max-width: 400px;
      width: 90%;
      padding: 30px;
      border-radius: 10px;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(6px);
      border: 1px solid rgba(0, 0, 0, 0.1);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
      text-align: center;
    }

    #errorPopupBox h1 {
      font-size: 3rem;
      font-weight: 700;
      color: #e74c3c;
    }

    #errorPopupBox h2 {
      font-size: 1.5rem;
      font-weight: 700;
      color: #333;
      margin: 10px 0;
    }

    #errorMessage {
      font-size: 1rem;
      color: #666;
      background-color: #ffffff;
      padding: 15px;
      border-radius: 5px;
      margin: 20px 0;
      border-left: 4px solid #e74c3c;
      text-align: left;
      word-wrap: break-word;
    }

    #closeErrorPopup {
      display: inline-block;
      margin-top: 10px;
      padding: 10px 24px;
      background-color: #3498db;
      color: #fff;
      text-decoration: none;
      border-radius: 5px;
      font-weight: bold;
      transition: background-color 0.3s ease, transform 0.2s ease;
      cursor: pointer;
    }

    #closeErrorPopup:hover {
      background-color: #2980b9;
      transform: translateY(-2px);
    }

      #flashMessageContainer {
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 9998;
      display: flex;
      flex-direction: column;
      align-items: center;
      width: 100%;
      max-width: 420px;
      padding: 0 1rem;
      pointer-events: none;
    }

    .flash-message {
      padding: 1rem 1.25rem;
      margin-bottom: 0.75rem;
      border-radius: 8px;
      font-weight: 600;
      width: 100%;
      text-align: center;
      pointer-events: all;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      animation: fadeIn 0.4s ease;
    }

    .flash-success {
      background-color: #d1fae5;
      color: #065f46;
      border: 1px solid #10b981;
    }

    .flash-error {
      background-color: #fee2e2;
      color: #991b1b;
      border: 1px solid #ef4444;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    /* Delete Confirmation Modal */
    #deleteModal {
      position: fixed;
      inset: 0;
      background: rgba(0,0,0,0.5);
      display: none; /* hidden by default */
      align-items: center;
      justify-content: center;
      z-index: 10000;
    }

    #deleteModal .modal-box {
      background: var(--card);
      border-radius: 12px;
      padding: 24px;
      width: 90%;
      max-width: 400px;
      text-align: center;
      box-shadow: 0 8px 20px rgba(0,0,0,0.2);
      animation: fadeIn 0.25s ease;
    }

    #deleteModal h2 {
      font-size: 1.25rem;
      margin-bottom: 12px;
      font-weight: 600;
      color: var(--text-primary);
    }

    #deleteModal p {
      color: var(--text-secondary);
      font-size: 0.95rem;
      margin-bottom: 20px;
    }

    #deleteModal .actions {
      display: flex;
      gap: 12px;
      justify-content: center;
    }

    #deleteModal button {
      padding: 8px 16px;
      border-radius: 8px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    #deleteModal .confirm-btn {
      background: var(--danger);
      color: white;
    }
    #deleteModal .confirm-btn:hover {
      background: #b91c1c;
    }
    #deleteModal .cancel-btn {
      background: var(--border);
      color: var(--text-primary);
    }
    #deleteModal .cancel-btn:hover {
      background: #cbd5e1;
    }

    
    .btn-approve, .btn-reject, .btn-delete {
        padding: 6px 10px;
        border-radius: 6px;
        font-size: 1rem;
        width: 32px;
        height: 32px;
        line-height: 1;
    }
    .btn-approve { background: var(--success); }
    .btn-reject { background: var(--danger); }
    .btn-delete { background: var(--muted); }

    .row-actions {
      display: flex;
      gap: 8px;
      align-items: center;
    }
    
    .teacher-progress {
      font-size: 0.85rem;
      color: var(--text-secondary);
      line-height: 1.5;
    }

    .review-status {
        display: inline-block;
        padding: 3px 8px;
        border-radius: 6px;
        font-size: 0.75rem;
        font-weight: 600;
        margin-top: 6px;
    }
    .status-approved { background: #dcfce7; color: #166534; }
    .status-rejected { background: #fee2e2; color: #991b1b; }
    .status-pending { background: #f1f5f9; color: #475569; }

  </style>
</head>
<body>
  <div id="flashMessageContainer" class="flash"></div>

  <div class="container">
    <header>
      <h1>Curriculum — Create & Review</h1>
      <div class="small muted">Subjects: MIL English, MIL Odiya, Maths, Physics, Chemistry, Botany, Zoology, IT</div>
    </header>

    <form id="createForm" class="card" autocomplete="off">
      <div class="grid">
        <div>
          <label for="subject">Subject</label>
          <select id="subject" name="subject" required>
            <option value="">Select subject</option>
            <option>MIL English</option>
            <option>MIL Odiya</option>
            <option>Maths</option>
            <option>Physics</option>
            <option>Chemistry</option>
            <option>Botany</option>
            <option>Zoology</option>
            <option>IT</option>
          </select>
        </div>
        <div>
          <label for="teacher">Teacher</label>
          <select id="teacher" name="teacher" required>
            <option value="">Select teacher</option>
            <% if (teachers && teachers.length) { %>
              <% teachers.forEach(t => { %>
                <option value="<%= t._id %>"><%= t.name %></option>
              <% }) %>
            <% } else { %>
              <option disabled>No teachers found</option>
            <% } %>
          </select>
        </div>
        <div>
          <label for="unit">Unit</label>
          <input id="unit" name="unit" type="text" required />
        </div>
        <div>
          <label for="chapter">Chapter</label>
          <input id="chapter" name="chapter" type="text" required />
        </div>
        <div>
          <label for="topic">Topic</label>
          <input id="topic" name="topic" type="text" required />
        </div>
        <div>
          <label for="subtopic">Subtopic</label>
          <input id="subtopic" name="subtopic" type="text" required />
        </div>
        <div>
          <label for="numberOfDays">Number of days</label>
          <input id="numberOfDays" name="numberOfDays" type="number" min="0" value="1" required />
        </div>
      </div>

      <div style="margin-top:16px;display:flex;gap:8px;">
        <button id="createBtn" type="submit">Create row</button>
        <button id="refreshBtn" type="button" class="secondary">Refresh list</button>
      </div>
    </form>

    <div class="card">
      <div style="display:flex;flex-wrap:wrap;gap:16px;align-items:center;margin-bottom:16px">
        <div>
            <label for="filterSubject" class="tiny">Filter by subject:</label>
            <select id="filterSubject">
              <option value="">-- select subject --</option>
              <option>MIL English</option>
              <option>MIL Odiya</option>
              <option>Maths</option>
              <option>Physics</option>
              <option>Chemistry</option>
              <option>Botany</option>
              <option>Zoology</option>
              <option>IT</option>
            </select>
        </div>
        <div>
            <label for="filterTeacher" class="tiny">Teacher:</label>
            <select id="filterTeacher">
              <option value="">-- select teacher --</option>
              <% if (teachers && teachers.length) { %>
                <% teachers.forEach(t => { %>
                  <option value="<%= t._id %>"><%= t.name %></option>
                <% }) %>
              <% } else { %>
                <option disabled>No teachers found</option>
              <% } %>
            </select>
        </div>
        <div style="margin-top:auto;"><button id="loadBtn" type="button">Load</button></div>
      </div>

      <div style="overflow-x:auto">
        <table id="curriculumTable">
          <thead>
            <tr>
              <th>Unit</th>
              <th>Chapter</th>
              <th>Topic</th>
              <th>Subtopic</th>
              <th>#Days</th>
              <th>Teacher Progress</th>
              <th>Principal review</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <tr><td colspan="8" class="muted tiny" style="text-align:center;padding:40px;">Select subject + teacher and click Load</td></tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
   <!-- Delete Confirmation Modal -->
  <div id="deleteModal">
    <div class="modal-box">
      <h2>Confirm Delete</h2>
      <p>Are you sure you want to delete this curriculum row? This action cannot be undone.</p>
      <div class="actions">
        <button class="cancel-btn" type="button">Cancel</button>
        <button class="confirm-btn" type="button">Delete</button>
      </div>
    </div>
  </div>

  <script>
       window.onload = async function() {
        const token = localStorage.getItem('token');
       try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
             };
      async function handleServerError(res) {
        const contentType = res.headers.get('Content-Type') || '';

        if (contentType.includes('text/html')) {
          const html = await res.text();
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = html;

          const popup = tempDiv.querySelector('#errorPopupContainer');
          const scripts = tempDiv.querySelectorAll('script');

          if (popup) {
            document.body.prepend(popup);
            scripts.forEach((script) => {
              const newScript = document.createElement('script');
              if (script.src) newScript.src = script.src;
              else newScript.textContent = script.textContent;
              document.body.appendChild(newScript);
            });
          } else {
            showFlashMessage('error', 'An unknown error occurred.');
          }
        } else {
          showFlashMessage('error', 'Server error: unexpected content type.');
        }
      } 

    function showFlashMessage(type, message, duration = 4000) {
        const container = document.getElementById('flashMessageContainer');
        const msg = document.createElement('div');
        msg.classList.add('flash-message');
        msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
        msg.textContent = message;

        container.appendChild(msg);

        setTimeout(() => {
          msg.style.opacity = '0';
          msg.style.transform = 'translateY(-10px)';
          setTimeout(() => msg.remove(), 500);
        }, duration);
      } 

    function rowHtml(row) {
      const progressHtml = row.teacherProgress && row.teacherProgress.length
        ? row.teacherProgress.map(p => `<div><strong>${p.percentComplete || 0}%</strong> complete. ${p.completed ? '✔ Finished' : '✘ In progress'}<br><span class="tiny muted">${p.notes || 'No notes'}</span></div>`).join('')
        : '<span class="tiny muted">— No progress reported</span>';
      
      let statusClass, statusText;
      if (row.principalReview?.approved === true) {
        statusClass = 'status-approved';
        statusText = '✔ Approved';
      } else if (row.principalReview?.approved === false) {
        statusClass = 'status-rejected';
        statusText = '✘ Rejected';
      } else {
        statusClass = 'status-pending';
        statusText = '— Pending';
      }

      return `
        <tr data-id="${row._id}">
          <td>${row.unit || ''}</td>
          <td>${row.chapter || ''}</td>
          <td>${row.topic || ''}</td>
          <td>${row.subtopic || ''}</td>
          <td>${row.numberOfDays || ''}</td>
          <td>
            <div class="teacher-progress">${progressHtml}</div>
          </td>
          <td>
            <textarea class="review" placeholder="Write review...">${row.principalReview?.comment || ''}</textarea>
            <div class="review-status ${statusClass}">${statusText}</div>
          </td>
          <td>
            <div class="row-actions">
                <button class="btn-approve" title="Approve">✔</button>
                <button class="btn-reject" title="Reject">✖</button>
                <button class="btn-delete" title="Delete">🗑️</button>
            </div>
          </td>
        </tr>`;
    }

    async function loadBySubject(subject, teacherId) {
        const tbody = document.querySelector('#curriculumTable tbody');
      if (!subject || !teacherId) {
        tbody.innerHTML = '<tr><td colspan="8" class="muted tiny" style="text-align:center;padding:40px;">Select subject + teacher and click Load</td></tr>';
        return;
      }
      tbody.innerHTML = '<tr><td colspan="8" class="muted tiny" style="text-align:center;padding:40px;">Loading...</td></tr>';
      try {
        const res = await fetch(`/Curriculum/subject/${encodeURIComponent(subject)}/teacher/${encodeURIComponent(teacherId)}`, { credentials: 'include' });
        if (!res.ok) return handleServerError(res);
        const data = await res.json();
        const rows = data.items || [];
        if (!rows.length) {
          tbody.innerHTML = '<tr><td colspan="8" class="muted tiny" style="text-align:center;padding:40px;">No rows yet — create some.</td></tr>';
          return;
        }
        tbody.innerHTML = rows.map(rowHtml).join('');
      } catch (err) {
        showFlashMessage('error', err.message || 'Could not load');
      }
    }

    async function createRow(ev) {
      ev.preventDefault();
      const form = ev.target;
      const d = {
        subject: form.subject.value,
        teacher: form.teacher.value,
        unit: form.unit.value,
        chapter: form.chapter.value,
        topic: form.topic.value,
        subtopic: form.subtopic.value,
        numberOfDays: form.numberOfDays.value
      };
      try {
        const res = await fetch('/Curriculum/create', {
          method: 'POST', credentials: 'include',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(d)
        });
        if (!res.ok) return handleServerError(res);
        showFlashMessage('success', 'Curriculum row created successfully!');
        const fs = document.getElementById('filterSubject').value;
        const ft = document.getElementById('filterTeacher').value;
        if (fs === d.subject && ft === d.teacher) loadBySubject(fs, ft);
        form.reset();
        form.subject.focus();
      } catch (err) {
        showFlashMessage('error', err.message || 'Create failed');
      }
    }

    async function reviewRow(id, approved, comment) {
      try {
        const res = await fetch(`/Curriculum/${id}/review`, {
          method: 'PUT', credentials: 'include',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ approved, comment })
        });
        if (!res.ok) return handleServerError(res);
        showFlashMessage('success', approved ? 'Progress Approved' : 'Progress Rejected');
        document.getElementById('loadBtn').click();
      } catch (err) {
        showFlashMessage('error', err.message || 'Review failed');
      }
    }

      let deleteId = null;

    function openDeleteModal(id) {
      deleteId = id;
      document.getElementById('deleteModal').style.display = 'flex';
    }

    function closeDeleteModal() {
      deleteId = null;
      document.getElementById('deleteModal').style.display = 'none';
    }

    async function confirmDelete() {
      if (!deleteId) return;
      try {
        const res = await fetch(`/Curriculum/${deleteId}`, {
          method: 'DELETE',
          credentials: 'include'
        });
        if (!res.ok) return handleServerError(res);
        showFlashMessage('success', 'Curriculum row deleted.');
        document.getElementById('loadBtn').click();
      } catch (err) {
        showFlashMessage('error', err.message || 'Delete failed');
      } finally {
        closeDeleteModal();
      }
    }

    // Hook up modal buttons
    document.querySelector('#deleteModal .cancel-btn').addEventListener('click', closeDeleteModal);
    document.querySelector('#deleteModal .confirm-btn').addEventListener('click', confirmDelete);


    document.getElementById('createForm').addEventListener('submit', createRow);
    
    document.getElementById('loadBtn').addEventListener('click', () => {
      const subj = document.getElementById('filterSubject').value;
      const teacherId = document.getElementById('filterTeacher').value;
      loadBySubject(subj, teacherId);
    });
    
    document.getElementById('refreshBtn').addEventListener('click', () => {
      const subj = document.getElementById('filterSubject').value;
      const teacherId = document.getElementById('filterTeacher').value;
      if (subj && teacherId) {
        loadBySubject(subj, teacherId);
        showFlashMessage('info', `Refreshed list for ${subj}`);
      } else {
        showFlashMessage('info', 'Select subject and teacher to refresh the list.');
      }
    });

    document.querySelector('#curriculumTable').addEventListener('click', (e) => {
      const button = e.target.closest('button');
      if (!button) return;
      
      const tr = button.closest('tr');
      if (!tr) return;

      const id = tr.getAttribute('data-id');
      const comment = tr.querySelector('textarea.review')?.value || '';
      
      if (button.classList.contains('btn-approve')) reviewRow(id, true, comment);
      if (button.classList.contains('btn-reject')) reviewRow(id, false, comment);
      if (button.classList.contains('btn-delete')) openDeleteModal(id);

    });
  </script>
 
</body>
</html>