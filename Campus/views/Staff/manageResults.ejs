<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Manage Results — <%= student.firstName %> <%= student.lastName || '' %></title>

  <style>
    /* results.manage.css (inlined per your request) */
    :root {
      --bg: #fff;
      --text: #111827;
      --muted: #6b7280;
      --border: #e5e7eb;
      --brand: #4f46e5;
      --danger: #ef4444;
      --chip: #f3f4f6;
    }
    html, body { background: var(--bg); color: var(--text); }
    main { padding: 1rem; max-width: 1200px; margin: 0 auto; }
    .student-header { margin-bottom: 1rem; }
    .student-header h1 { margin: 0 0 .25rem 0; }
    .results-grid { display: grid; grid-template-columns: 1fr; gap: 1rem; }
    .result-card { border: 1px solid var(--border); padding: 0.6rem; border-radius: 8px; background: #fff; }
    .result-card header { display:flex; flex-direction:column; gap:.25rem; margin-bottom:.5rem; }
    .meta { color: var(--muted); font-size: .9rem; }
    .subjects-table { width:100%; border-collapse: collapse; margin-bottom: .5rem; }
    .subjects-table th, .subjects-table td { border: 1px solid #eee; padding: .35rem; text-align: left; font-size: .95rem; }
    .card-actions { display:flex; gap:.5rem; }
    .btn { padding: .35rem .6rem; border-radius: 6px; border:1px solid var(--border); cursor:pointer; background:#f9fafb; }
    .btn.primary { background: var(--brand); border-color: var(--brand); color: #fff; }
    .btn.danger { background: var(--danger); border-color: var(--danger); color:#fff; }
    .btn.small { padding:.25rem .4rem; font-size:.9rem; }
    .form-card { border:1px solid var(--border); padding: .6rem; border-radius:8px; background:#fff; }
    .form-row { margin-bottom:.6rem; display:flex; gap:.6rem; align-items:center; }
    .form-row label { width:150px; font-weight:600; }
    .form-row input, .form-row select { flex:1; padding:.4rem; border-radius:6px; border:1px solid #d1d5db; }
    .subjects-block { margin: .8rem 0; }
    .subject-row { display:grid; grid-template-columns: 1.5fr repeat(2, 1fr) auto repeat(2, 1fr) 1fr; gap:.5rem; align-items:center; margin-bottom:.4rem; }
    .subject-row .pct-chip { background: var(--chip); border:1px solid var(--border); border-radius: 6px; padding: .35rem .5rem; min-width: 3.2rem; text-align:center; font-size:.9rem; }
    .subject-row .small-inline { font-size:.9rem; display:flex; align-items:center; gap:.35rem; white-space:nowrap; }
    /* NOTE: lab inputs are visible by default now (no display:none) */
    .totals-box { display:grid; grid-template-columns: repeat(4, 1fr); gap:.5rem; margin-top:.5rem; }
    .totals-box .tile { border:1px solid var(--border); border-radius:8px; padding:.6rem; background:#fff; }
    .totals-box .tile h4 { margin:.1rem 0 .25rem 0; font-size:.95rem; color:var(--muted); }
    .totals-box .tile .val { font-weight:700; font-size:1.05rem; }
    .modal { position: fixed; inset:0; display:none; align-items:center; justify-content:center; background: rgba(0,0,0,0.4); z-index:9999; }
    .modal-content { background: #fff; padding: 1rem; max-width: 1000px; width: 96%; border-radius:8px; position:relative; }
    .modal-close { position:absolute; right:.6rem; top:.6rem; }
    .help-note { color: var(--muted); font-size:.85rem; }
    @media (max-width: 900px) {
      .subject-row { grid-template-columns: 1.2fr 1fr 1fr auto 1fr 1fr 1fr; }
      .form-row label { width: 120px; }
    }
  </style>
</head>

<body>
  <div id="flashMessageContainer"></div>

  <main id="resultsApp" data-student-id="<%= student._id %>">
    <section class="student-header">
      <h1>Results: <%= student.firstName %> <%= student.middleName %> <%= student.lastName %> (<%= student.registration_number || student.registrationId || student._id %>)</h1>
      <p>Class / Section: <%= student.classAssigned || '-' %></p>
    </section>

    <section class="results-list">
      <h2>Previous Results</h2>
      <% if (results && results.length) { %>
        <div class="results-grid">
          <% results.forEach(result => { %>
            <article class="result-card" data-result-id="<%= result._id %>">
              <header>
                <strong><%= result.examType %></strong>
                <span class="meta"><%= result.month %> — <%= result.year %></span>
                <span class="meta">Recorded: <%= new Date(result.dateRecorded).toLocaleString() %></span>
              </header>

              <table class="subjects-table">
                <thead>
                  <tr>
                    <th>Subject</th>
                    <th>Theory (Obt / Max)</th>
                    <th>%</th>
                    <th>Lab (Obt / Max)</th>
                    <th>L %</th>
                    <th>Total (Obt / Max)</th>
                  </tr>
                </thead>
                <tbody>
                  <% (result.subjects || []).forEach(sub => { 
                    const tObt = Number(sub.theoryMarks) || 0;
                    const tMaxDefined = typeof sub.theoryMaxMarks === 'number';
                    const tMaxVal = tMaxDefined ? sub.theoryMaxMarks : undefined;

                    const hasLab = !!sub.hasLab;
                    const lObt = hasLab ? (Number(sub.labMarks) || 0) : 0;
                    const lMaxDefined = hasLab && typeof sub.labMaxMarks === 'number';
                    const lMaxVal = lMaxDefined ? sub.labMaxMarks : undefined;

                    const totalObt = tObt + lObt;
                    const anyMaxDefined = (tMaxDefined || lMaxDefined);
                    const totalMax = anyMaxDefined ? ((tMaxVal || 0) + (lMaxVal || 0)) : undefined;
                  %>
                    <tr>
                      <td><%= sub.name %></td>
                      <td><%= (sub.theoryMarks ?? '-') %> / <%= (sub.theoryMaxMarks ?? '-') %></td>
                      <td><%= (sub.theoryPercentage ?? (tMaxDefined ? ((tObt / tMaxVal) * 100).toFixed(2) : '-')) %></td>
                      <td>
                        <% if (hasLab) { %>
                          <%= (sub.labMarks ?? '-') %> / <%= (sub.labMaxMarks ?? '-') %>
                        <% } else { %>
                          -
                        <% } %>
                      </td>
                      <td>
                        <% if (hasLab) { %>
                          <%= (sub.labPercentage ?? (lMaxDefined ? ((lObt / lMaxVal) * 100).toFixed(2) : '-')) %>
                        <% } else { %>
                          -
                        <% } %>
                      </td>
                      <td><%= totalObt %> / <%= (typeof totalMax === 'number') ? totalMax : '-' %></td>
                    </tr>
                  <% }) %>
                </tbody>
                <tfoot>
                  <tr>
                    <th>Totals</th>
                    <th><%= result.totalTheoryMarks ?? '-' %> / <%= result.totalTheoryMaxMarks ?? '-' %></th>
                    <th colspan="1">-</th>
                    <th><%= result.totalLabMarks ?? '-' %> / <%= result.totalLabMaxMarks ?? '-' %></th>
                    <th><%= result.totalPercentage ?? ( ( ( (result.totalTheoryMarks||0) + (result.totalLabMarks||0) ) && ( (result.totalTheoryMaxMarks||0) + (result.totalLabMaxMarks||0) ) ) ? ( (( (result.totalTheoryMarks||0) + (result.totalLabMarks||0) ) / ( (result.totalTheoryMaxMarks||0) + (result.totalLabMaxMarks||0) )) * 100 ).toFixed(2) : '-' ) %></th>
                    <th>SGPA: <%= result.sgpa ?? '-' %><br>CGPA: <%= result.cgpa ?? '-' %></th>
                  </tr>
                </tfoot>
              </table>

              <div class="card-actions">
                <button class="btn edit-btn" data-result-id="<%= result._id %>">Edit</button>
                <button class="btn danger delete-btn" data-result-id="<%= result._id %>">Delete</button>
              </div>
            </article>
          <% }) %>
        </div>
      <% } else { %>
        <p>No results recorded for this student.</p>
      <% } %>
    </section>

    <section class="add-result">
      <h2>Add New Result</h2>
      <form id="addResultForm" class="form-card" novalidate>
        <div class="form-row">
          <label>Exam Type</label>
          <select id="addExamType" required>
            <option value="">Select exam</option>
            <% examTypes.forEach(e => { %>
              <option value="<%= e %>"><%= e %></option>
            <% }) %>
          </select>
        </div>

        <div class="form-row">
          <label>Year</label>
          <input id="addYear" type="number" min="2000" max="2100" required />
        </div>

        <div class="form-row">
          <label for="addMonth">Month</label>
          <select id="addMonth" required>
            <option value="">Select Month</option>
            <option value="January">January</option>
            <option value="February">February</option>
            <option value="March">March</option>
            <option value="April">April</option>
            <option value="May">May</option>
            <option value="June">June</option>
            <option value="July">July</option>
            <option value="August">August</option>
            <option value="September">September</option>
            <option value="October">October</option>
            <option value="November">November</option>
            <option value="December">December</option>
          </select>
        </div>

        <div class="form-row">
          <label>SGPA (optional)</label>
          <input id="addSGPA" type="number" step="0.01" />
        </div>

        <div class="form-row">
          <label>CGPA (optional)</label>
          <input id="addCGPA" type="number" step="0.01" />
        </div>

        <div class="subjects-block">
          <h3>Subjects</h3>
          <p class="help-note">Enter obtained and max marks. Percentages are computed automatically and included as per the model.</p>

          <div id="addSubjectsContainer">
            <% defaultSubjects.forEach((sub, idx) => { %>
              <div class="subject-row" data-index="<%= idx %>">
                <input class="sub-name" value="<%= sub %>" placeholder="Subject name" />
                <input class="sub-theory-marks" placeholder="Theory Obtained" type="number" required />
                <input class="sub-theory-max" placeholder="Theory Max" type="number" />
                <span class="pct-chip sub-theory-pct">-</span>

                <label class="small-inline">
                  <input class="sub-has-lab" type="checkbox" /> Lab
                </label>
                <!-- lab inputs always visible -->
                <input class="sub-lab-marks" placeholder="Lab Obtained" type="number" />
                <input class="sub-lab-max" placeholder="Lab Max" type="number" />
                <span class="pct-chip sub-lab-pct">-</span>

                <!-- removed grade input entirely -->
                <button type="button" class="btn small remove-subject">Remove</button>
              </div>
            <% }) %>
          </div>

          <div>
            <button id="addSubjectBtn" type="button" class="btn">+ Add subject</button>
          </div>

          <div class="totals-box" id="addTotalsBox">
            <div class="tile">
              <h4>Total Theory</h4>
              <div class="val"><span id="addTTObt">0</span> / <span id="addTTMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Total Lab</h4>
              <div class="val"><span id="addTLObt">0</span> / <span id="addTLMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Overall Obt / Max</h4>
              <div class="val"><span id="addAllObt">0</span> / <span id="addAllMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Overall %</h4>
              <div class="val"><span id="addOverallPct">-</span></div>
            </div>
          </div>
        </div>

        <div class="form-row">
          <button class="btn primary" type="submit">Save Result</button>
        </div>
      </form>
    </section>
  </main>

  <!-- Edit modal (hidden until used) -->
  <div id="editModal" class="modal" aria-hidden="true">
    <div class="modal-content">
      <button class="modal-close btn small">Close</button>
      <h3>Edit Result</h3>
      <form id="editResultForm" class="form-card" novalidate>
        <input type="hidden" id="editResultId" />
        <div class="form-row">
          <label>Exam Type</label>
          <select id="editExamType" required>
            <option value="">Select exam</option>
            <% examTypes.forEach(e => { %>
              <option value="<%= e %>"><%= e %></option>
            <% }) %>
          </select>
        </div>

        <div class="form-row">
          <label>Year</label>
          <input id="editYear" type="number" min="2000" max="2100" required />
        </div>

        <div class="form-row">
          <label for="editMonth">Month</label>
          <select id="editMonth" required>
            <option value="">Select Month</option>
            <option value="January">January</option>
            <option value="February">February</option>
            <option value="March">March</option>
            <option value="April">April</option>
            <option value="May">May</option>
            <option value="June">June</option>
            <option value="July">July</option>
            <option value="August">August</option>
            <option value="September">September</option>
            <option value="October">October</option>
            <option value="November">November</option>
            <option value="December">December</option>
          </select>
        </div>

        <div class="form-row">
          <label>SGPA (optional)</label>
          <input id="editSGPA" type="number" step="0.01" />
        </div>

        <div class="form-row">
          <label>CGPA (optional)</label>
          <input id="editCGPA" type="number" step="0.01" />
        </div>

        <div class="subjects-block">
          <h3>Subjects</h3>
          <p class="help-note">Edit marks. Percentages and totals update automatically.</p>

          <div id="editSubjectsContainer"></div>

          <div>
            <button id="editAddSubjectBtn" type="button" class="btn">+ Add subject</button>
          </div>

          <div class="totals-box" id="editTotalsBox">
            <div class="tile">
              <h4>Total Theory</h4>
              <div class="val"><span id="editTTObt">0</span> / <span id="editTTMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Total Lab</h4>
              <div class="val"><span id="editTLObt">0</span> / <span id="editTLMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Overall Obt / Max</h4>
              <div class="val"><span id="editAllObt">0</span> / <span id="editAllMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Overall %</h4>
              <div class="val"><span id="editOverallPct">-</span></div>
            </div>
          </div>
        </div>

        <div class="form-row">
          <button class="btn primary" type="submit">Update Result</button>
        </div>
      </form>
    </div>
  </div>

  <script nonce="<%= nonceAttr %>">
    // results.manage.js (inlined)

    // ----- helpers -----
    function q(sel, ctx = document) { return ctx.querySelector(sel); }
    function qAll(sel, ctx = document) { return Array.from(ctx.querySelectorAll(sel)); }
    function num(v) { const n = Number(v); return Number.isFinite(n) ? n : 0; }
    function fmtPct(n) { return Number.isFinite(n) ? n.toFixed(2) : '-'; }
    function escapeHtml(str) { return (''+str).replace(/[&<>"']/g, ch => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'})[ch]); }

    function computeRowTheoryPct(row) {
      const obt = num(q('.sub-theory-marks', row)?.value);
      const max = num(q('.sub-theory-max', row)?.value);
      return max > 0 ? (obt / max) * 100 : NaN;
    }
    function computeRowLabPct(row) {
      const obt = num(q('.sub-lab-marks', row)?.value);
      const max = num(q('.sub-lab-max', row)?.value);
      return max > 0 ? (obt / max) * 100 : NaN;
    }

    function updateRowPercents(row) {
      const p1 = computeRowTheoryPct(row);
      const el1 = q('.sub-theory-pct', row);
      if (el1) el1.textContent = Number.isFinite(p1) ? fmtPct(p1) : '-';

      const hasLab = q('.sub-has-lab', row)?.checked;
      const el2 = q('.sub-lab-pct', row);
      const p2 = computeRowLabPct(row);
      if (el2) el2.textContent = hasLab && Number.isFinite(p2) ? fmtPct(p2) : '-';
    }

    function updateTotals(container, idsPrefix) {
      const rows = qAll('.subject-row', container);
      let tObt = 0, tMax = 0, lObt = 0, lMax = 0;

      rows.forEach(r => {
        tObt += num(q('.sub-theory-marks', r)?.value);
        tMax += num(q('.sub-theory-max', r)?.value);
        if (q('.sub-has-lab', r)?.checked) {
          lObt += num(q('.sub-lab-marks', r)?.value);
          lMax += num(q('.sub-lab-max', r)?.value);
        }
      });

      const allObt = tObt + lObt;
      const allMax = tMax + lMax;
      const overallPct = allMax > 0 ? (allObt / allMax) * 100 : NaN;

      const map = {
        TTObt: tObt, TTMax: tMax,
        TLObt: lObt, TLMax: lMax,
        AllObt: allObt, AllMax: allMax,
        OverallPct: Number.isFinite(overallPct) ? fmtPct(overallPct) : '-'
      };
      Object.entries(map).forEach(([k,v]) => {
        const el = q(`#${idsPrefix}${k}`);
        if (el) el.textContent = (typeof v === 'number' && !k.includes('Pct')) ? String(v) : v;
      });
    }

    function attachRowRecalc(container, idsPrefix) {
      container.addEventListener('input', (e) => {
        if (!e.target) return;
        const cls = e.target.classList;
        if (
          cls.contains('sub-theory-marks') ||
          cls.contains('sub-theory-max')   ||
          cls.contains('sub-lab-marks')    ||
          cls.contains('sub-lab-max')      ||
          cls.contains('sub-has-lab')
        ) {
          const row = e.target.closest('.subject-row');
          if (!row) return;

          // If user types lab values, auto-enable "hasLab"
          if ((cls.contains('sub-lab-marks') || cls.contains('sub-lab-max')) && e.target.value !== '') {
            const cb = q('.sub-has-lab', row);
            if (cb && !cb.checked) cb.checked = true;
          }

          updateRowPercents(row);
          updateTotals(container, idsPrefix);
        }
      });
      // No show/hide of lab fields anymore; they're visible by default.
    }

    function buildSubjectsArray(container) {
      const rows = qAll('.subject-row', container);
      return rows.map(r => {
        const name = (q('.sub-name', r)?.value || '').trim();
        const theoryMarks = q('.sub-theory-marks', r)?.value;
        const theoryMax = q('.sub-theory-max', r)?.value;
        const hasLab = q('.sub-has-lab', r)?.checked;
        const labMarks = q('.sub-lab-marks', r)?.value;
        const labMax = q('.sub-lab-max', r)?.value;

        const tObt = theoryMarks === '' ? 0 : Number(theoryMarks);
        const tMax = theoryMax === '' ? undefined : Number(theoryMax);
        const lObt = labMarks === '' ? 0 : Number(labMarks);
        const lMax = labMax === '' ? undefined : Number(labMax);

        const theoryPercentage = (typeof tMax === 'number' && tMax > 0) ? Number(((tObt / tMax) * 100).toFixed(2)) : undefined;
        const labPercentage = (hasLab && typeof lMax === 'number' && lMax > 0) ? Number(((lObt / lMax) * 100).toFixed(2)) : undefined;

        return {
          name,
          theoryMarks: tObt,
          theoryMaxMarks: tMax,
          theoryPercentage,
          hasLab,
          labMarks: hasLab ? lObt : undefined,
          labMaxMarks: hasLab ? lMax : undefined,
          labPercentage
          // grade removed
        };
      }).filter(s => s.name);
    }

    function makeSubjectRow(values = {}) {
      const div = document.createElement('div');
      div.className = 'subject-row';
      const hasLab = !!values.hasLab;
      div.innerHTML = `
        <input class="sub-name" value="${values.name ? escapeHtml(values.name) : ''}" placeholder="Subject name" />
        <input class="sub-theory-marks" placeholder="Theory Obtained" type="number" value="${values.theoryMarks ?? ''}" required />
        <input class="sub-theory-max" placeholder="Theory Max" type="number" value="${values.theoryMaxMarks ?? ''}" />
        <span class="pct-chip sub-theory-pct">${Number.isFinite(values.theoryPercentage) ? (values.theoryPercentage.toFixed ? values.theoryPercentage.toFixed(2) : values.theoryPercentage) : '-'}</span>

        <label class="small-inline">
          <input class="sub-has-lab" type="checkbox" ${hasLab ? 'checked' : ''} /> Lab
        </label>
        <input class="sub-lab-marks" placeholder="Lab Obtained" type="number" value="${values.labMarks ?? ''}" />
        <input class="sub-lab-max" placeholder="Lab Max" type="number" value="${values.labMaxMarks ?? ''}" />
        <span class="pct-chip sub-lab-pct">${hasLab && Number.isFinite(values.labPercentage) ? (values.labPercentage.toFixed ? values.labPercentage.toFixed(2) : values.labPercentage) : '-'}</span>

        <button type="button" class="btn small remove-subject">Remove</button>
      `;
      div.querySelector('.remove-subject').addEventListener('click', () => div.remove());
      return div;
    }

    // ----- main -----
    (function init() {
      const app = document.getElementById('resultsApp');
      if (!app) return;
      const studentId = app.dataset.studentId;

      // ADD result
      const addForm = document.getElementById('addResultForm');
      const addContainer = document.getElementById('addSubjectsContainer');
      attachRowRecalc(addContainer, 'add');
      // Initial compute for default rows
      qAll('.subject-row', addContainer).forEach(r => updateRowPercents(r));
      updateTotals(addContainer, 'add');

      document.getElementById('addSubjectBtn').addEventListener('click', () => {
        const row = makeSubjectRow({});
        addContainer.appendChild(row);
        updateRowPercents(row);
        updateTotals(addContainer, 'add');
      });

      addContainer.addEventListener('click', (e) => {
        if (e.target && e.target.classList.contains('remove-subject')) {
          e.target.closest('.subject-row').remove();
          updateTotals(addContainer, 'add');
        }
      });

      addForm.addEventListener('submit', async (ev) => {
        ev.preventDefault();
        const payload = {
          examType: document.getElementById('addExamType').value,
          year: document.getElementById('addYear').value,
          month: document.getElementById('addMonth').value,
          sgpa: document.getElementById('addSGPA').value || undefined,
          cgpa: document.getElementById('addCGPA').value || undefined,
          subjects: buildSubjectsArray(addContainer)
        };

        const res = await fetch(`/Result/${studentId}/add`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        await handleServerError(res); // assumed global
        const data = await res.json();
        showFlashMessage(data.type, data.message); // assumed global
        if (data.type === 'success') window.location.reload();
      });

      // DELETE
      document.body.addEventListener('click', async (e) => {
        if (e.target && e.target.classList.contains('delete-btn')) {
          const resultId = e.target.dataset.resultId;
          if (!confirm('Are you sure you want to delete this result?')) return;
          const res = await fetch(`/Result/${studentId}/delete/${resultId}`, { method: 'DELETE' });
          await handleServerError(res);
          const data = await res.json();
          showFlashMessage(data.type, data.message);
          if (data.type === 'success') window.location.reload();
        }
      });

      // EDIT modal
      const editModal = document.getElementById('editModal');
      const editForm = document.getElementById('editResultForm');
      const editContainer = document.getElementById('editSubjectsContainer');
      attachRowRecalc(editContainer, 'edit');

      document.body.addEventListener('click', async (e) => {
        if (e.target && e.target.classList.contains('edit-btn')) {
          const resultId = e.target.dataset.resultId;
          // FIXED: removed backslash so template literal interpolates
          const card = document.querySelector(`.result-card[data-result-id="${resultId}"]`);
          if (!card) return;

          // Basic fields from DOM
          const examType = card.querySelector('header strong')?.textContent?.trim() || '';
          const headerMetaText = card.querySelector('header .meta')?.textContent || '';
          const parts = headerMetaText.split('—').map(s => s.trim());
          const monthText = parts[0] || '';
          const yearMatch = (parts[1]||'').match(/\d{4}/);
          const yearText = yearMatch ? yearMatch[0] : '';

          // Prefill
          q('#editResultId').value = resultId;
          q('#editExamType').value = examType;
          q('#editMonth').value = monthText;
          q('#editYear').value = yearText;

          // SGPA/CGPA parse
          const footText = card.querySelector('tfoot th:last-child')?.textContent || '';
          const sgpa = (footText.match(/SGPA:\s*([0-9.]+)/) || [])[1] || '';
          const cgpa = (footText.match(/CGPA:\s*([0-9.]+)/) || [])[1] || '';
          q('#editSGPA').value = sgpa;
          q('#editCGPA').value = cgpa;

          // Build subjects from table rows
          const rows = card.querySelectorAll('.subjects-table tbody tr');
          editContainer.innerHTML = '';
          Array.from(rows).forEach(r => {
            const name = r.children[0].textContent.trim();

            const tCell = r.children[1].textContent.trim(); // "obt / max"
            const [tObtStr, tMaxStr] = tCell.split('/').map(s => s.trim());
            const tObt = tObtStr === '-' ? '' : tObtStr;
            const tMax = tMaxStr === '-' ? '' : tMaxStr;
            const tPctText = r.children[2].textContent.trim();
            const tPctNum = tPctText === '-' ? undefined : Number(tPctText);

            const lCell = r.children[3].textContent.trim();
            const hasLab = lCell !== '-';
            let lObt = '', lMax = '', lPctNum = undefined;
            if (hasLab) {
              const [lObtStr, lMaxStr] = lCell.split('/').map(s => s.trim());
              lObt = lObtStr === '-' ? '' : lObtStr;
              lMax = lMaxStr === '-' ? '' : lMaxStr;
              const lPctText = r.children[4].textContent.trim();
              lPctNum = lPctText === '-' ? undefined : Number(lPctText);
            }

            const rowEl = makeSubjectRow({
              name,
              theoryMarks: tObt,
              theoryMaxMarks: tMax,
              theoryPercentage: tPctNum,
              hasLab,
              labMarks: lObt,
              labMaxMarks: lMax,
              labPercentage: lPctNum
              // no grade
            });
            editContainer.appendChild(rowEl);
          });

          // Ensure percents & totals reflect current values
          qAll('.subject-row', editContainer).forEach(r => updateRowPercents(r));
          updateTotals(editContainer, 'edit');

          openModal(editModal);
        }
      });

      // Edit: add subject inline
      document.getElementById('editAddSubjectBtn').addEventListener('click', () => {
        const row = makeSubjectRow({});
        editContainer.appendChild(row);
        updateRowPercents(row);
        updateTotals(editContainer, 'edit');
      });

      // Edit submit
      editForm.addEventListener('submit', async (ev) => {
        ev.preventDefault();
        const resultId = document.getElementById('editResultId').value;
        const payload = {
          examType: document.getElementById('editExamType').value,
          year: document.getElementById('editYear').value,
          month: document.getElementById('editMonth').value,
          sgpa: document.getElementById('editSGPA').value || undefined,
          cgpa: document.getElementById('editCGPA').value || undefined,
          subjects: buildSubjectsArray(editContainer)
        };
        const res = await fetch(`/Result/${studentId}/edit/${resultId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        await handleServerError(res);
        const data = await res.json();
        showFlashMessage(data.type, data.message);
        if (data.type === 'success') window.location.reload();
      });

      // Modal helpers
      function openModal(modal) {
        modal.setAttribute('aria-hidden', 'false');
        modal.style.display = 'block';
      }
      function closeModal(modal) {
        modal.setAttribute('aria-hidden', 'true');
        modal.style.display = 'none';
      }
      qAll('.modal-close').forEach(btn => btn.addEventListener('click', () => closeModal(editModal)));
    })();
  </script>
</body>
</html>
