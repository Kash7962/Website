<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Manage Results â€” <%= student.firstName %> <%= student.lastName || '' %></title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    /* --- THEME & GLOBAL STYLES --- */
    :root {
      --primary-color: #1e40af;
      --primary-dark: #1c3d90;
      --secondary-color: #f8fafc;
      --text-dark: #1e293b;
      --text-light: #475569;
      --border-color: #e2e8f0;
      --input-border-color: #d1d5db;
      --card-shadow: 0 4px 12px rgba(0,0,0,0.06);
      --danger-color: #dc2626;
      --danger-light: #fee2e2;
    }

     /* Popups and Flash Messages */
         #errorPopupContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            background: rgba(0, 0, 0, 0.4);
            font-family: 'Montserrat', sans-serif;
        }

        #errorPopupContainer * {
            box-sizing: border-box;
            font-family: inherit;
            margin: 0;
            padding: 0;
        }

        #errorPopupBox {
            max-width: 400px;
            width: 90%;
            padding: 30px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        #errorPopupBox h1 {
            font-size: 3rem;
            font-weight: 700;
            color: #e74c3c;
        }

        #errorPopupBox h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin: 10px 0;
        }

        #errorMessage {
            font-size: 1rem;
            color: #666;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #e74c3c;
            text-align: left;
            word-wrap: break-word;
        }

        #closeErrorPopup {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 24px;
            background-color: #3498db;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s ease, transform 0.2s ease;
            cursor: pointer;
        }

        #closeErrorPopup:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

            #flashMessageContainer {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9998;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 420px;
            padding: 0 1rem;
            pointer-events: none;
        }

        .flash-message {
            padding: 1rem 1.25rem;
            margin-bottom: 0.75rem;
            border-radius: 8px;
            font-weight: 600;
            width: 100%;
            text-align: center;
            pointer-events: all;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: fadeIn 0.4s ease;
        }

        .flash-success {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #10b981;
        }

        .flash-error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #ef4444;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

    * { box-sizing: border-box; margin:0; padding:0; }

    html, body {
      background: var(--secondary-color);
      color: var(--text-dark);
      font-family: 'Poppins', sans-serif;
    }

    main {
      padding: 2rem;
      max-width: 1200px;
      margin: 0 auto;
    }

    h1, h2, h3 { font-family: 'Inter', sans-serif; }

    /* --- HEADER & SECTIONS --- */
    .student-header {
      margin-bottom: 2.5rem;
      padding-bottom: 1.5rem;
      border-bottom: 1px solid var(--border-color);
    }
    .student-header h1 { margin: 0 0 .25rem 0; font-size: 2rem; }
    .student-header p { color: var(--text-light); }

    .results-list, .add-result { margin-bottom: 2.5rem; }
    .results-list h2, .add-result h2 { margin-bottom: 1.5rem; font-size: 1.75rem; }

    /* --- CARDS --- */
    .result-card, .form-card {
      border: 1px solid var(--border-color);
      border-radius: 12px;
      background: #fff;
      box-shadow: var(--card-shadow);
      padding: 1.5rem;
    }

    .results-grid {
      display: grid;
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
    .result-card header {
      display: flex;
      flex-direction: column;
      gap: .25rem;
      margin-bottom: 1.5rem;
    }
    .result-card header strong { font-size: 1.25rem; }
    .meta { color: var(--text-light); font-size: .9rem; }

    /* --- TABLES --- */
    .subjects-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 1.5rem;
    }
    .subjects-table th, .subjects-table td {
      border-bottom: 1px solid var(--border-color);
      padding: .75rem .5rem;
      text-align: left;
      font-size: .95rem;
      color: var(--text-light);
    }
    .subjects-table thead th, .subjects-table tfoot th {
      background: #f8fafc;
      color: var(--text-dark);
      font-weight: 600;
    }
    .subjects-table tbody tr:last-child td { border-bottom: none; }

    /* --- FORMS & INPUTS --- */
    .form-row {
      margin-bottom: 1rem;
      display: flex;
      gap: 1rem;
      align-items: center;
    }
    .form-row label {
      width: 150px;
      font-weight: 600;
      color: var(--text-dark);
    }
    .form-row input, .form-row select {
      flex: 1;
      padding: 0.6rem 0.75rem;
      border-radius: 8px;
      border: 1px solid var(--input-border-color);
      transition: border-color .2s, box-shadow .2s;
    }
    .form-row input:focus, .form-row select:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.2);
    }

    /* --- SUBJECTS BLOCK --- */
    .subjects-block { margin: 2rem 0; }
    .subjects-block h3 { margin-bottom: .5rem; }
    .help-note { color: var(--text-light); font-size: .9rem; margin-bottom: 1rem; }

    .subject-row {
      display: grid;
      grid-template-columns: 1.5fr repeat(2, 1fr) auto repeat(3, 1fr);
      gap: .75rem;
      align-items: center;
      margin-bottom: .75rem;
    }
    .subject-row input { padding: 0.6rem 0.75rem; border: 1px solid var(--input-border-color); border-radius: 8px; width: 100%; }
    .pct-chip {
      background: #f1f5f9;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 0.6rem;
      min-width: 4rem;
      text-align: center;
      font-size: .9rem;
      font-weight: 600;
      color: var(--text-light);
    }
    .small-inline { font-size: .9rem; display: flex; align-items: center; gap: .35rem; white-space: nowrap; }

    /* --- TOTALS BOX --- */
    .totals-box {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 1rem;
      margin-top: 1.5rem;
    }
    .totals-box .tile {
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 1rem;
      background: #fff;
    }
    .totals-box .tile h4 { margin: .1rem 0 .25rem 0; font-size: .95rem; color: var(--text-light); font-weight: normal; }
    .totals-box .tile .val { font-weight: 700; font-size: 1.25rem; font-family: 'Inter', sans-serif; color: var(--primary-color); }

    /* --- BUTTONS --- */
    .card-actions { display: flex; gap: .75rem; }
    .btn {
      padding: 0.6rem 1.2rem;
      border-radius: 8px;
      border: 1px solid var(--input-border-color);
      cursor: pointer;
      background: #fff;
      font-weight: 600;
      transition: all .2s;
    }
    .btn:hover { transform: translateY(-1px); box-shadow: 0 2px 8px rgba(0,0,0,0.08); }
    .btn.primary { background: var(--primary-color); border-color: var(--primary-color); color: #fff; }
    .btn.danger { background: var(--danger-color); border-color: var(--danger-color); color: #fff; }
    .btn.small { padding: .4rem .8rem; font-size: .9rem; }

    /* --- MODAL --- */
   .modal {
      position: fixed;
      inset: 0;
      display: none;
      align-items: center;
      justify-content: center;
      background: rgba(17, 24, 39, 0.6);
      backdrop-filter: blur(4px);
      z-index: 9999;
      padding: 1rem; /* small padding so modal doesn't touch edges */
    }

    .modal-content {
      background: #fff;
      padding: 2rem;
      width: 95%;
      max-width: 800px;      /* fix modal max width */
      max-height: 90vh;      /* keep modal within screen height */
      overflow-y: auto;      /* scroll inside modal if content is too tall */
      border-radius: 12px;
      position: relative;
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    /* make close button fixed inside */
    .modal-close {
      position: absolute;
      right: 1rem;
      top: 1rem;
      z-index: 10;
    }

    /* Responsive tweaks */
    @media (max-width: 700px) {
      .modal-content {
        padding: 1.2rem;
        width: 100%;
        max-height: 95vh;
      }
    }

    /* --- RESPONSIVE --- */
    @media (max-width: 900px) {
      .subject-row { grid-template-columns: 1.2fr repeat(2, 1fr) auto repeat(3, 1fr); gap: .5rem; }
      .form-row { flex-direction: column; align-items: flex-start; }
      .form-row label { width: auto; margin-bottom: .25rem; }
      .form-row input, .form-row select { width: 100%; }
    }
    @media (max-width: 700px) {
      .subject-row {
        grid-template-columns: 1fr 1fr;
        padding: 1rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        margin-bottom: 1rem;
      }
      .subject-row > * { grid-column: span 2; }
      .subject-row input.sub-theory-marks, .subject-row input.sub-theory-max,
      .subject-row input.sub-lab-marks, .subject-row input.sub-lab-max { grid-column: span 1; }
      .subject-row .small-inline { margin-top: .5rem; }
    }

    /* Delete modal backdrop */
    #deleteModal {
      position: fixed;
      inset: 0;
      display: none; /* hidden by default */
      align-items: center;
      justify-content: center;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1100; /* above edit modal */
      padding: 1rem;
    }

    /* Delete modal box */
    #deleteModal .delete-modal-content {
      background: #ffffff;
      padding: 1.5rem;
      width: 90%;
      max-width: 400px;  /* smaller than edit modal */
      border-radius: 10px;
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
      text-align: center;
    }

    #deleteModal .delete-modal-content h3 {
      font-size: 1.2rem;
      margin-bottom: 0.5rem;
      color: #111827;
    }

    #deleteModal .delete-modal-content p {
      font-size: 0.95rem;
      color: #374151;
      margin-bottom: 1.25rem;
    }

    /* Actions */
    #deleteModal .modal-actions {
      display: flex;
      justify-content: flex-end;
      gap: 0.75rem;
    }

    /* Buttons */
    #deleteModal .btn {
      padding: 0.5rem 1.1rem;
      border-radius: 8px;
      border: none;
      font-weight: 600;
      cursor: pointer;
      transition: background 0.2s, transform 0.2s;
    }

    #deleteModal .btn:hover {
      transform: translateY(-1px);
    }

    /* Cancel button */
    #deleteModal .btn-secondary {
      background: #f3f4f6;
      color: #374151;
    }

    #deleteModal .btn-secondary:hover {
      background: #e5e7eb;
    }

    /* Delete button */
    #deleteModal .btn-danger-solid {
      background: #ef4444;
      color: #fff;
    }

    #deleteModal .btn-danger-solid:hover {
      background: #dc2626;
    }
  </style>
</head>

<body>
  <div id="flashMessageContainer"></div>

  <main id="resultsApp" data-student-id="<%= student._id %>">
    <section class="student-header">
      <h1>Results: <%= student.firstName %> <%= student.middleName %> <%= student.lastName %> (<%= student.registration_number || student.registrationId || student._id %>)</h1>
      <p>Class / Section: <%= student.classAssigned || '-' %></p>
    </section>

    <section class="results-list">
      <h2>Previous Results</h2>
      <% if (results && results.length) { %>
        <div class="results-grid">
          <% results.forEach(result => { %>
            <article class="result-card" data-result-id="<%= result._id %>">
              <header>
                <strong><%= result.examType %></strong>
                <span class="meta"><%= result.month %> â€” <%= result.year %></span>
                <span class="meta">Recorded: <%= new Date(result.dateRecorded).toLocaleString() %></span>
              </header>

              <table class="subjects-table">
                <thead>
                  <tr>
                    <th>Subject</th>
                    <th>Theory (Obt / Max)</th>
                    <th>T %</th>
                    <th>Lab (Obt / Max)</th>
                    <th>T+L %</th>
                    <th>Total (Obt / Max)</th>
                  </tr>
                </thead>
                <tbody>
                  <% (result.subjects || []).forEach(sub => { 
                    const tObt = Number(sub.theoryMarks) || 0;
                    const tMaxDefined = typeof sub.theoryMaxMarks === 'number';
                    const tMaxVal = tMaxDefined ? sub.theoryMaxMarks : undefined;

                    const hasLab = !!sub.hasLab;
                    const lObt = hasLab ? (Number(sub.labMarks) || 0) : 0;
                    const lMaxDefined = hasLab && typeof sub.labMaxMarks === 'number';
                    const lMaxVal = lMaxDefined ? sub.labMaxMarks : undefined;

                    const totalObt = tObt + lObt;
                    const anyMaxDefined = (tMaxDefined || lMaxDefined);
                    const totalMax = anyMaxDefined ? ((tMaxVal || 0) + (lMaxVal || 0)) : undefined;
                  %>
                    <tr>
                      <td><%= sub.name %></td>
                      <td><%= (sub.theoryMarks ?? '-') %> / <%= (sub.theoryMaxMarks ?? '-') %></td>
                     <td>
                      <%= (sub.theoryPercentage != null) 
                            ? sub.theoryPercentage 
                            : (tMaxDefined && tMaxVal > 0 ? ((tObt / tMaxVal) * 100).toFixed(2) : '-') %>
                      </td>

                      <td>
                        <% if (hasLab) { %>
                          <%= (sub.labMarks ?? '-') %> / <%= (sub.labMaxMarks ?? '-') %>
                        <% } else { %>
                          -
                        <% } %>
                      </td>
                      <td>
                        <% if (hasLab) { %>
                          <%= (sub.labPercentage ?? (lMaxDefined ? ((lObt / lMaxVal) * 100).toFixed(2) : '-')) %>
                        <% } else { %>
                          -
                        <% } %>
                      </td>
                      <td><%= totalObt %> / <%= (typeof totalMax === 'number') ? totalMax : '-' %></td>
                    </tr>
                  <% }) %>
                </tbody>
                <tfoot>
                  <tr>
                    <th>Totals</th>
                    <th>
                      <%= (result.totalTheoryMarks != null ? result.totalTheoryMarks : '-') %> /
                      <%= (result.totalTheoryMaxMarks != null ? result.totalTheoryMaxMarks : '-') %>
                    </th>

                    <th>
                      <%= ((result.totalTheoryMarks/result.totalTheoryMaxMarks)*100 != null ? ((result.totalTheoryMarks/result.totalTheoryMaxMarks)*100).toFixed(2) : '-') %>%
                    </th>
                    <th><%= result.totalLabMarks ?? '-' %> / <%= result.totalLabMaxMarks ?? '-' %></th>
                    <th><%= result.totalPercentage ?? ( ( ( (result.totalTheoryMarks||0) + (result.totalLabMarks||0) ) && ( (result.totalTheoryMaxMarks||0) + (result.totalLabMaxMarks||0) ) ) ? ( (( (result.totalTheoryMarks||0) + (result.totalLabMarks||0) ) / ( (result.totalTheoryMaxMarks||0) + (result.totalLabMaxMarks||0) )) * 100 ).toFixed(2) : '-' ) %>%</th>
                    <th>SGPA: <%= result.sgpa ?? '-' %><br>CGPA: <%= result.cgpa ?? '-' %></th>
                  </tr>
                </tfoot>
              </table>

              <div class="card-actions">
                <button class="btn edit-btn" data-result-id="<%= result._id %>">Edit</button>
                <button class="btn danger delete-btn" data-result-id="<%= result._id %>">Delete</button>
              </div>
              <div id="deleteModal" class="modal" aria-hidden="true">
              <div class="modal-content">
                <h3>Are you sure?</h3>
                <p>Do you really want to delete this result? This action cannot be undone.</p>
                <div class="modal-actions">
                  <button id="cancelDeleteBtn" class="btn">Cancel</button>
                  <button id="confirmDeleteBtn" class="btn danger">Delete</button>
                </div>
              </div>
            </div>
            </article>
          <% }) %>
        </div>
      <% } else { %>
        <p>No results recorded for this student.</p>
      <% } %>
    </section>

    <section class="add-result">
      <h2>Add New Result</h2>
      <form id="addResultForm" class="form-card" novalidate>
        <div class="form-row">
          <label>Exam Type</label>
          <select id="addExamType" required>
            <option value="">Select exam</option>
            <% examTypes.forEach(e => { %>
              <option value="<%= e %>"><%= e %></option>
            <% }) %>
          </select>
        </div>

        <div class="form-row">
          <label>Year</label>
          <input id="addYear" type="number" min="2000" max="2100" required />
        </div>

        <div class="form-row">
          <label for="addMonth">Month</label>
          <select id="addMonth" required>
            <option value="">Select Month</option>
            <option value="January">January</option>
            <option value="February">February</option>
            <option value="March">March</option>
            <option value="April">April</option>
            <option value="May">May</option>
            <option value="June">June</option>
            <option value="July">July</option>
            <option value="August">August</option>
            <option value="September">September</option>
            <option value="October">October</option>
            <option value="November">November</option>
            <option value="December">December</option>
          </select>
        </div>

        <div class="form-row">
          <label>SGPA (optional)</label>
          <input id="addSGPA" type="number" step="0.01" />
        </div>

        <div class="form-row">
          <label>CGPA (optional)</label>
          <input id="addCGPA" type="number" step="0.01" />
        </div>

        <div class="subjects-block">
          <h3>Subjects</h3>
          <p class="help-note">Enter obtained and max marks. Percentages are computed automatically.</p>

          <div id="addSubjectsContainer">
            <% defaultSubjects.forEach((sub, idx) => { %>
              <div class="subject-row" data-index="<%= idx %>">
                <input class="sub-name" value="<%= sub %>" placeholder="Subject name" />
                <input class="sub-theory-marks" placeholder="Theory Obt." type="number" required />
                <input class="sub-theory-max" placeholder="Theory Max" type="number" />
                <span class="pct-chip sub-theory-pct">-</span>

                <label class="small-inline">
                  <input class="sub-has-lab" type="checkbox" /> Lab
                </label>
                <input class="sub-lab-marks" placeholder="Lab Obt." type="number" />
                <input class="sub-lab-max" placeholder="Lab Max" type="number" />
                <span class="pct-chip sub-lab-pct">-</span>
                <button type="button" class="btn small remove-subject">Remove</button>
              </div>
            <% }) %>
          </div>

          <div style="margin-top: 1rem;">
            <button id="addSubjectBtn" type="button" class="btn">+ Add subject</button>
          </div>

          <div class="totals-box" id="addTotalsBox">
            <div class="tile">
              <h4>Total Theory</h4>
              <div class="val"><span id="addTTObt">0</span> / <span id="addTTMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Total Lab</h4>
              <div class="val"><span id="addTLObt">0</span> / <span id="addTLMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Overall Obt / Max</h4>
              <div class="val"><span id="addAllObt">0</span> / <span id="addAllMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Overall %</h4>
              <div class="val"><span id="addOverallPct">-</span></div>
            </div>
          </div>
        </div>

        <div class="form-row" style="margin-top: 2rem;">
          <button class="btn primary" type="submit">Save Result</button>
        </div>
      </form>
    </section>
  </main>

  <div id="editModal" class="modal" aria-hidden="true">
    <div class="modal-content">
      <button class="modal-close btn small">Close</button>
      <h3>Edit Result</h3>
      <form id="editResultForm" novalidate style="margin-top: 1.5rem;">
        <input type="hidden" id="editResultId" />
        <div class="form-row">
          <label>Exam Type</label>
          <select id="editExamType" required>
            <option value="">Select exam</option>
            <% examTypes.forEach(e => { %>
              <option value="<%= e %>"><%= e %></option>
            <% }) %>
          </select>
        </div>
        <div class="form-row">
          <label>Year</label>
          <input id="editYear" type="number" min="2000" max="2100" required />
        </div>
        <div class="form-row">
          <label for="editMonth">Month</label>
          <select id="editMonth" required>
            <option value="">Select Month</option>
            <option value="January">January</option>
            <option value="February">February</option>
            <option value="March">March</option>
            <option value="April">April</option>
            <option value="May">May</option>
            <option value="June">June</option>
            <option value="July">July</option>
            <option value="August">August</option>
            <option value="September">September</option>
            <option value="October">October</option>
            <option value="November">November</option>
            <option value="December">December</option>
          </select>
        </div>
        <div class="form-row">
          <label>SGPA (optional)</label>
          <input id="editSGPA" type="number" step="0.01" />
        </div>
        <div class="form-row">
          <label>CGPA (optional)</label>
          <input id="editCGPA" type="number" step="0.01" />
        </div>
        <div class="subjects-block">
          <h3>Subjects</h3>
          <p class="help-note">Edit marks. Percentages and totals update automatically.</p>
          <div id="editSubjectsContainer"></div>
          <div style="margin-top: 1rem;">
            <button id="editAddSubjectBtn" type="button" class="btn">+ Add subject</button>
          </div>
          <div class="totals-box" id="editTotalsBox">
             <div class="tile">
              <h4>Total Theory</h4>
              <div class="val"><span id="editTTObt">0</span> / <span id="editTTMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Total Lab</h4>
              <div class="val"><span id="editTLObt">0</span> / <span id="editTLMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Overall Obt / Max</h4>
              <div class="val"><span id="editAllObt">0</span> / <span id="editAllMax">0</span></div>
            </div>
            <div class="tile">
              <h4>Overall %</h4>
              <div class="val"><span id="editOverallPct">-</span></div>
            </div>
          </div>
        </div>
        <div class="form-row" style="margin-top: 2rem;">
          <button class="btn primary" type="submit">Update Result</button>
        </div>
      </form>
    </div>
  </div>

  <script nonce="<%= nonceAttr %>">
    window.onload = async function() {
            const token = localStorage.getItem('token');
            try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
                        try {
                        const token = localStorage.getItem('token');
                        if (!token) {
                        console.error('No token found');
                        return;
                        }
                        // console.log('Token:', token);
                        // Decode JWT to get staffId
                        const payload = JSON.parse(atob(token.split('.')[1]));
                        const staffId = payload._id;
                        
                        const res = await fetch('/Manage/get-permissions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ staffId })
                        });

                        if (!res.ok) {
                        handleServerError(res);
                        return;
                        }

                        const data = await res.json();
                        const permissions = data.permissions || [];
                        // console.log('Permissions:', permissions);
                        // Hide all menu items not in permissions
                        
                        if (!permissions.includes('result_students')) {
                            showFlashMessage('error', 'You do not have permission to access this page.');
                            setTimeout(() => {
                                window.location.href = '/Staff/dashboard';
                            }, 1500);
                        }
                    } catch (err) {
                        console.error('Error fetching permissions:', err);
                    }
                }

            async function handleServerError(res) {
                const contentType = res.headers.get('Content-Type') || '';

                if (contentType.includes('text/html')) {
                const html = await res.text();
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;

                const popup = tempDiv.querySelector('#errorPopupContainer');
                const scripts = tempDiv.querySelectorAll('script');

                if (popup) {
                    document.body.prepend(popup);
                    scripts.forEach((script) => {
                    const newScript = document.createElement('script');
                    if (script.src) newScript.src = script.src;
                    else newScript.textContent = script.textContent;
                    document.body.appendChild(newScript);
                    });
                } else {
                    showFlashMessage('error', 'An unknown error occurred.');
                }
                } else {
                showFlashMessage('error', 'Server error: unexpected content type.');
                }
            } 

            function showFlashMessage(type, message, duration = 4000) {
                const container = document.getElementById('flashMessageContainer');
                const msg = document.createElement('div');
                msg.classList.add('flash-message');
                msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
                msg.textContent = message;

                container.appendChild(msg);

                setTimeout(() => {
                msg.style.opacity = '0';
                msg.style.transform = 'translateY(-10px)';
                setTimeout(() => msg.remove(), 500);
                }, duration);
            } 
    // Your original JavaScript logic is preserved below
    function q(sel, ctx = document) { return ctx.querySelector(sel); }
    function qAll(sel, ctx = document) { return Array.from(ctx.querySelectorAll(sel)); }
    function num(v) { const n = Number(v); return Number.isFinite(n) ? n : 0; }
    function fmtPct(n) { return Number.isFinite(n) ? n.toFixed(2) : '-'; }
    function escapeHtml(str) { return (''+str).replace(/[&<>"']/g, ch => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'})[ch]); }

    function computeRowTheoryPct(row) {
      const obt = num(q('.sub-theory-marks', row)?.value);
      const max = num(q('.sub-theory-max', row)?.value);
      return max > 0 ? (obt / max) * 100 : NaN;
    }
    function computeRowLabPct(row) {
      const obt = num(q('.sub-lab-marks', row)?.value);
      const max = num(q('.sub-lab-max', row)?.value);
      return max > 0 ? (obt / max) * 100 : NaN;
    }

    function updateRowPercents(row) {
      const p1 = computeRowTheoryPct(row);
      const el1 = q('.sub-theory-pct', row);
      if (el1) el1.textContent = Number.isFinite(p1) ? fmtPct(p1) : '-';

      const hasLab = q('.sub-has-lab', row)?.checked;
      const el2 = q('.sub-lab-pct', row);
      const p2 = computeRowLabPct(row);
      if (el2) el2.textContent = hasLab && Number.isFinite(p2) ? fmtPct(p2) : '-';
    }

    function updateTotals(container, idsPrefix) {
      const rows = qAll('.subject-row', container);
      let tObt = 0, tMax = 0, lObt = 0, lMax = 0;

      rows.forEach(r => {
        tObt += num(q('.sub-theory-marks', r)?.value);
        tMax += num(q('.sub-theory-max', r)?.value);
        if (q('.sub-has-lab', r)?.checked) {
          lObt += num(q('.sub-lab-marks', r)?.value);
          lMax += num(q('.sub-lab-max', r)?.value);
        }
      });

      const allObt = tObt + lObt;
      const allMax = tMax + lMax;
      const overallPct = allMax > 0 ? (allObt / allMax) * 100 : NaN;

      const map = {
        TTObt: tObt, TTMax: tMax,
        TLObt: lObt, TLMax: lMax,
        AllObt: allObt, AllMax: allMax,
        OverallPct: Number.isFinite(overallPct) ? fmtPct(overallPct) : '-'
      };
      Object.entries(map).forEach(([k,v]) => {
        const el = q(`#${idsPrefix}${k}`);
        if (el) el.textContent = (typeof v === 'number' && !k.includes('Pct')) ? String(v) : v;
      });
    }

    function attachRowRecalc(container, idsPrefix) {
      container.addEventListener('input', (e) => {
        if (!e.target) return;
        const cls = e.target.classList;
        if (
          cls.contains('sub-theory-marks') ||
          cls.contains('sub-theory-max')   ||
          cls.contains('sub-lab-marks')    ||
          cls.contains('sub-lab-max')      ||
          cls.contains('sub-has-lab')
        ) {
          const row = e.target.closest('.subject-row');
          if (!row) return;

          if ((cls.contains('sub-lab-marks') || cls.contains('sub-lab-max')) && e.target.value !== '') {
            const cb = q('.sub-has-lab', row);
            if (cb && !cb.checked) cb.checked = true;
          }

          updateRowPercents(row);
          updateTotals(container, idsPrefix);
        }
      });
    }

    function buildSubjectsArray(container) {
      const rows = qAll('.subject-row', container);
      return rows.map(r => {
        const name = (q('.sub-name', r)?.value || '').trim();
        const theoryMarks = q('.sub-theory-marks', r)?.value;
        const theoryMax = q('.sub-theory-max', r)?.value;
        const hasLab = q('.sub-has-lab', r)?.checked;
        const labMarks = q('.sub-lab-marks', r)?.value;
        const labMax = q('.sub-lab-max', r)?.value;

        const tObt = theoryMarks === '' ? 0 : Number(theoryMarks);
        const tMax = theoryMax === '' ? undefined : Number(theoryMax);
        const lObt = labMarks === '' ? 0 : Number(labMarks);
        const lMax = labMax === '' ? undefined : Number(labMax);

        const theoryPercentage = (typeof tMax === 'number' && tMax > 0) ? Number(((tObt / tMax) * 100).toFixed(2)) : undefined;
        const labPercentage = (hasLab && typeof lMax === 'number' && lMax > 0) ? Number(((lObt / lMax) * 100).toFixed(2)) : undefined;

        return {
          name,
          theoryMarks: tObt,
          theoryMaxMarks: tMax,
          theoryPercentage,
          hasLab,
          labMarks: hasLab ? lObt : undefined,
          labMaxMarks: hasLab ? lMax : undefined,
          labPercentage
        };
      }).filter(s => s.name);
    }

    function makeSubjectRow(values = {}) {
      const div = document.createElement('div');
      div.className = 'subject-row';
      const hasLab = !!values.hasLab;
      div.innerHTML = `
        <input class="sub-name" value="${values.name ? escapeHtml(values.name) : ''}" placeholder="Subject name" />
        <input class="sub-theory-marks" placeholder="Theory Obt." type="number" value="${values.theoryMarks ?? ''}" required />
        <input class="sub-theory-max" placeholder="Theory Max" type="number" value="${values.theoryMaxMarks ?? ''}" />
        <span class="pct-chip sub-theory-pct">${Number.isFinite(values.theoryPercentage) ? (values.theoryPercentage.toFixed ? values.theoryPercentage.toFixed(2) : values.theoryPercentage) : '-'}</span>
        <label class="small-inline">
          <input class="sub-has-lab" type="checkbox" ${hasLab ? 'checked' : ''} /> Lab
        </label>
        <input class="sub-lab-marks" placeholder="Lab Obt." type="number" value="${values.labMarks ?? ''}" />
        <input class="sub-lab-max" placeholder="Lab Max" type="number" value="${values.labMaxMarks ?? ''}" />
        <span class="pct-chip sub-lab-pct">${hasLab && Number.isFinite(values.labPercentage) ? (values.labPercentage.toFixed ? values.labPercentage.toFixed(2) : values.labPercentage) : '-'}</span>
        <button type="button" class="btn small remove-subject">Remove</button>
      `;
      div.querySelector('.remove-subject').addEventListener('click', () => {
        div.remove();
        // Manually trigger an input event on the container to force totals recalculation
        const container = div.parentElement;
        if(container) container.dispatchEvent(new Event('input', { bubbles: true }));
      });
      return div;
    }
    
    // FAKE GLOBAL Functions for server errors (assumed to exist)
   

    (function init() {
      const app = document.getElementById('resultsApp');
      if (!app) return;
      const studentId = app.dataset.studentId;

      const addForm = document.getElementById('addResultForm');
      const addContainer = document.getElementById('addSubjectsContainer');
      attachRowRecalc(addContainer, 'add');
      qAll('.subject-row', addContainer).forEach(r => updateRowPercents(r));
      updateTotals(addContainer, 'add');

      document.getElementById('addSubjectBtn').addEventListener('click', () => {
        const row = makeSubjectRow({});
        addContainer.appendChild(row);
        updateRowPercents(row);
        updateTotals(addContainer, 'add');
      });

      addContainer.addEventListener('click', (e) => {
        if (e.target && e.target.classList.contains('remove-subject')) {
          e.target.closest('.subject-row').remove();
          updateTotals(addContainer, 'add');
        }
      });

      addForm.addEventListener('submit', async (ev) => {
        ev.preventDefault();
        const payload = {
          examType: document.getElementById('addExamType').value,
          year: document.getElementById('addYear').value,
          month: document.getElementById('addMonth').value,
          sgpa: document.getElementById('addSGPA').value || undefined,
          cgpa: document.getElementById('addCGPA').value || undefined,
          subjects: buildSubjectsArray(addContainer)
        };

        const res = await fetch(`/Result/${studentId}/add`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        if (!res.ok) {
           await handleServerError(res);
           return;
        }
        const data = await res.json();
        showFlashMessage('success', 'Result added successfully!');
        if (data.type === 'success') { setTimeout(() => window.location.reload(), 1500);}
      });

      let pendingDeleteId = null;

      // open modal when delete button is clicked
      document.body.addEventListener('click', (e) => {
        if (e.target && e.target.classList.contains('delete-btn')) {
          e.preventDefault();
          pendingDeleteId = e.target.dataset.resultId;
          document.getElementById('deleteModal').style.display = 'flex';
        }
      });

      // cancel button inside modal
      document.getElementById('cancelDeleteBtn').addEventListener('click', () => {
        pendingDeleteId = null;
        document.getElementById('deleteModal').style.display = 'none';
      });

      // confirm button inside modal
      document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
        if (!pendingDeleteId) return;

        const res = await fetch(`/Result/${studentId}/delete/${pendingDeleteId}`, { method: 'DELETE' });

        if (!res.ok) {
          await handleServerError(res);
          const data = await res.json().catch(() => ({ type: 'error', message: 'Failed to delete result.' }));
          showFlashMessage(data.type || 'error', data.message);
        } else {
          const data = await res.json();
          showFlashMessage('success', 'Result deleted successfully!');
          if (data.type === 'success') {
            setTimeout(() => window.location.reload(), 1500);
          }
        }

        // reset + close modal
        pendingDeleteId = null;
        document.getElementById('deleteModal').style.display = 'none';
      });

      const editModal = document.getElementById('editModal');
      const editForm = document.getElementById('editResultForm');
      const editContainer = document.getElementById('editSubjectsContainer');
      attachRowRecalc(editContainer, 'edit');

      document.body.addEventListener('click', async (e) => {
        if (e.target && e.target.classList.contains('edit-btn')) {
          const resultId = e.target.dataset.resultId;
          const card = document.querySelector(`.result-card[data-result-id="${resultId}"]`);
          if (!card) return;

          const examType = card.querySelector('header strong')?.textContent?.trim() || '';
          const headerMetaText = card.querySelector('header .meta')?.textContent || '';
          const parts = headerMetaText.split('â€”').map(s => s.trim());
          const monthText = parts[0] || '';
          const yearMatch = (parts[1]||'').match(/\d{4}/);
          const yearText = yearMatch ? yearMatch[0] : '';

          q('#editResultId').value = resultId;
          q('#editExamType').value = examType;
          q('#editMonth').value = monthText;
          q('#editYear').value = yearText;

          const footText = card.querySelector('tfoot th:last-child')?.innerHTML || '';
          const sgpa = (footText.match(/SGPA:\s*([0-9.-]+)/) || [])[1] || '';
          const cgpa = (footText.match(/CGPA:\s*([0-9.-]+)/) || [])[1] || '';
          q('#editSGPA').value = sgpa;
          q('#editCGPA').value = cgpa;

          const rows = card.querySelectorAll('.subjects-table tbody tr');
          editContainer.innerHTML = '';
          Array.from(rows).forEach(r => {
            const name = r.children[0].textContent.trim();
            const tCell = r.children[1].textContent.trim();
            const [tObtStr, tMaxStr] = tCell.split('/').map(s => s.trim());
            const lCell = r.children[3].textContent.trim();
            const hasLab = lCell !== '-';
            let lObtStr = '', lMaxStr = '';
            if (hasLab) {
              [lObtStr, lMaxStr] = lCell.split('/').map(s => s.trim());
            }

            const rowEl = makeSubjectRow({
              name,
              theoryMarks: tObtStr === '-' ? '' : tObtStr,
              theoryMaxMarks: tMaxStr === '-' ? '' : tMaxStr,
              hasLab,
              labMarks: lObtStr === '-' ? '' : lObtStr,
              labMaxMarks: lMaxStr === '-' ? '' : lMaxStr
            });
            editContainer.appendChild(rowEl);
          });
          qAll('.subject-row', editContainer).forEach(r => updateRowPercents(r));
          updateTotals(editContainer, 'edit');
          openModal(editModal);
        }
      });

      document.getElementById('editAddSubjectBtn').addEventListener('click', () => {
        const row = makeSubjectRow({});
        editContainer.appendChild(row);
        updateRowPercents(row);
        updateTotals(editContainer, 'edit');
      });

      editForm.addEventListener('submit', async (ev) => {
        ev.preventDefault();
        const resultId = document.getElementById('editResultId').value;
        const payload = {
          examType: document.getElementById('editExamType').value,
          year: document.getElementById('editYear').value,
          month: document.getElementById('editMonth').value,
          sgpa: document.getElementById('editSGPA').value || undefined,
          cgpa: document.getElementById('editCGPA').value || undefined,
          subjects: buildSubjectsArray(editContainer)
        };
        const res = await fetch(`/Result/${studentId}/edit/${resultId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        if (!res.ok) {
           await handleServerError(res);
           return;
        }
        const data = await res.json();
         showFlashMessage('success', 'Result updated successfully!');
        if (data.type === 'success') {
          setTimeout(() => window.location.reload(), 1500);
            
        }
      });

      function openModal(modal) {
        modal.style.display = 'flex';
        modal.setAttribute('aria-hidden', 'false');
      }
      function closeModal(modal) {
        modal.style.display = 'none';
        modal.setAttribute('aria-hidden', 'true');
      }
      qAll('.modal-close').forEach(btn => btn.addEventListener('click', () => closeModal(editModal)));
    })();
  </script>
</body>
</html>