<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Staff Face Attendance</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    :root {
      --bg: #f8fafc;
      --card: #ffffff;
      --primary: #2563eb;
      --success: #16a34a;
      --danger: #dc2626;
      --text: #111827;
      --muted: #6b7280;
      --shadow: rgba(0, 0, 0, 0.1);
    }

    body {
      font-family: Arial, sans-serif;
      background: var(--bg);
      color: var(--text);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      margin: 0;
    }

    h1 {
      margin-bottom: 1rem;
      color: var(--primary);
    }

    .camera-container {
      background: var(--card);
      padding: 1rem;
      border-radius: 12px;
      box-shadow: 0 4px 12px var(--shadow);
      text-align: center;
    }

    video {
      width: 400px;
      max-width: 100%;
      border-radius: 8px;
      border: 2px solid var(--primary);
    }

    #statusMessage {
      margin-top: 1rem;
      font-size: 1rem;
      font-weight: bold;
      color: var(--muted);
    }

    .success {
      color: var(--success);
    }

    .error {
      color: var(--danger);
    }
      #errorPopupContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            background: rgba(0, 0, 0, 0.4);
            font-family: 'Montserrat', sans-serif;
        }

        #errorPopupContainer * {
            box-sizing: border-box;
            font-family: inherit;
            margin: 0;
            padding: 0;
        }

        #errorPopupBox {
            max-width: 400px;
            width: 90%;
            padding: 30px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        #errorPopupBox h1 {
            font-size: 3rem;
            font-weight: 700;
            color: #e74c3c;
        }

        #errorPopupBox h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin: 10px 0;
        }

        #errorMessage {
            font-size: 1rem;
            color: #666;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #e74c3c;
            text-align: left;
            word-wrap: break-word;
        }

        #closeErrorPopup {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 24px;
            background-color: #3498db;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s ease, transform 0.2s ease;
            cursor: pointer;
        }

        #closeErrorPopup:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

            #flashMessageContainer {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9998;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 420px;
            padding: 0 1rem;
            pointer-events: none;
        }

        .flash-message {
            padding: 1rem 1.25rem;
            margin-bottom: 0.75rem;
            border-radius: 8px;
            font-weight: 600;
            width: 100%;
            text-align: center;
            pointer-events: all;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: fadeIn 0.4s ease;
        }

        .flash-success {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #10b981;
        }

        .flash-error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #ef4444;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
  </style>
</head>
<body>
  <div id="flashMessageContainer"></div>
  <h1>Staff Face Attendance</h1>

  <div class="camera-container">
    <video id="camera" autoplay playsinline></video>
    <p id="statusMessage">Loading models...</p>
  </div>

  <!-- Face API -->
  <script src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>
  <script>

    window.onload = async function() {
            const token = localStorage.getItem('token');
            try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
                        try {
                        const token = localStorage.getItem('token');
                        if (!token) {
                        console.error('No token found');
                        return;
                        }
                        // console.log('Token:', token);
                        // Decode JWT to get staffId
                        const payload = JSON.parse(atob(token.split('.')[1]));
                        const staffId = payload._id;
                        
                        const res = await fetch('/Manage/get-permissions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ staffId })
                        });

                        if (!res.ok) {
                        handleServerError(res);
                        return;
                        }

                        const data = await res.json();
                        const permissions = data.permissions || [];
                        // console.log('Permissions:', permissions);
                        // Hide all menu items not in permissions
                        
                        if (!permissions.includes('manage_staff_attendance')) {
                            showFlashMessage('error', 'You do not have permission to access this page.');
                            setTimeout(() => {
                                window.location.href = '/Staff/dashboard';
                            }, 1500);
                        }
                    } catch (err) {
                        console.error('Error fetching permissions:', err);
                    }
                }
    
    async function handleServerError(res) {
        const contentType = res.headers.get('Content-Type') || '';

        if (contentType.includes('text/html')) {
        const html = await res.text();
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;

        const popup = tempDiv.querySelector('#errorPopupContainer');
        const scripts = tempDiv.querySelectorAll('script');

        if (popup) {
            document.body.prepend(popup);
            scripts.forEach((script) => {
            const newScript = document.createElement('script');
            if (script.src) newScript.src = script.src;
            else newScript.textContent = script.textContent;
            document.body.appendChild(newScript);
            });
        } else {
            showFlashMessage('error', 'An unknown error occurred.');
        }
        } else {
        showFlashMessage('error', 'Server error: unexpected content type.');
        }
    } 

    function showFlashMessage(type, message, duration = 4000) {
        const container = document.getElementById('flashMessageContainer');
        const msg = document.createElement('div');
        msg.classList.add('flash-message');
        msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
        msg.textContent = message;

        container.appendChild(msg);

        setTimeout(() => {
        msg.style.opacity = '0';
        msg.style.transform = 'translateY(-10px)';
        setTimeout(() => msg.remove(), 500);
        }, duration);
    } 
    const video = document.getElementById('camera');
    const statusMessage = document.getElementById('statusMessage');

    // Start camera
    async function startCamera() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        video.srcObject = stream;
        statusMessage.textContent = "Camera is active. Detecting face...";
      } catch (error) {
        statusMessage.textContent = "Unable to access camera.";
        statusMessage.classList.add("error");
      }
    }

    // Load face-api.js models
    async function loadModels() {
      const MODEL_URL = '/models'; // 👉 ensure models are served from /public/models
      await Promise.all([
        faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),
        faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),
        faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL)
      ]);
      statusMessage.textContent = "✅ Models loaded. Initializing camera...";
    }

    // Face recognition & attendance marking
    let recognitionInterval = null; // store interval ID

    // Face recognition & attendance marking
    async function recognizeFace() {
    try {
        const detection = await faceapi
        .detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
        .withFaceLandmarks()
        .withFaceDescriptor();

        if (!detection) {
        statusMessage.textContent = "⚠️ No face detected";
        return;
        }

        const encoding = Array.from(detection.descriptor);

        // Step 1: Match with backend
        const faceRes = await fetch("/Face/match-face", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ encoding }),
        });

        if (!faceRes.ok) handleServerError(faceRes);

        const staffData = await faceRes.json();

        // Step 2: Mark attendance
        const attendanceRes = await fetch("/Manage/attendance/mark", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ staff: staffData._id }),
        });

        if (!attendanceRes.ok) {
            // const errData = await attendanceRes.json().catch(() => ({}));
            // const errorMsg = errData.error || "Attendance marking failed";
            return handleServerError(attendanceRes);
            };

        const result = await attendanceRes.json();
        statusMessage.textContent = `✅ Attendance marked for ${staffData.name} (${staffData.email})`;
        statusMessage.classList.remove("error");
        statusMessage.classList.add("success");

        // 👉 Stop recognition loop once attendance is marked
        if (recognitionInterval) {
        clearInterval(recognitionInterval);
        recognitionInterval = null;
        }

    } catch (err) {
        statusMessage.textContent = `❌ ${err.message}`;
        statusMessage.classList.remove("success");
        statusMessage.classList.add("error");
    }
    }

    // Initialize
    window.addEventListener("DOMContentLoaded", async () => {
    await loadModels();
    await startCamera();

    // 👉 store interval ID
    recognitionInterval = setInterval(recognizeFace, 7000);
    });

  </script>
</body>
</html>
