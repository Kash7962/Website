<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Students Payments</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&family=Inter:wght@400;600;700&display=swap" rel="stylesheet">

    <style>
        :root {
            --primary-color: #1e40af;
            --primary-dark: #1c3d90;
            --success-color: #16a34a;
            --success-dark: #15803d;
            --secondary-bg: #f8fafc; /* Lighter background for the page */
            --text-dark: #1e293b;
            --text-light: #64748b;
            --border-color: #e2e8f0;
            --card-shadow: 0 4px 12px rgba(0,0,0,0.06);
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--secondary-bg);
            color: var(--text-dark);
        }

        .container {
            max-width: 1200px; /* Wider for tables */
            margin: auto;
            padding: 2rem;
        }

        .page-header {
            margin-bottom: 2rem;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 1.5rem;
        }

        h1 {
            font-family: 'Inter', sans-serif;
            font-size: 2rem;
            font-weight: 700;
            color: var(--text-dark);
            text-align: left; /* Aligned with content */
        }

        .table-container {
            background: #fff;
            border: 1px solid var(--border-color);
            border-radius: 12px;
            box-shadow: var(--card-shadow);
            overflow-x: auto; /* Ensures table is responsive */
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 1rem 1.25rem;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
            font-size: 0.9rem;
            white-space: nowrap;
        }

        thead tr {
            background-color: #f1f5f9; /* Table header background */
        }

        th {
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            font-size: 0.8rem;
            color: var(--text-light);
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        tbody tr {
            transition: background-color 0.2s ease;
        }
        
        tbody tr:last-child td {
            border-bottom: none;
        }

        tbody tr:hover {
            background-color: #f8fafc;
        }
        
        .actions-cell {
            display: flex;
            gap: 0.75rem;
        }
        
        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }

        .btn-setDue {
            background-color: var(--primary-color);
            color: white;
        }
        .btn-setDue:hover {
            background-color: var(--primary-dark);
        }

        .btn-payment {
            background-color: var(--success-color);
            color: white;
        }
        .btn-payment:hover {
            background-color: var(--success-dark);
        }
        
          #errorPopupContainer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            background: rgba(0, 0, 0, 0.4);
            font-family: 'Montserrat', sans-serif;
        }

        #errorPopupContainer * {
            box-sizing: border-box;
            font-family: inherit;
            margin: 0;
            padding: 0;
        }

        #errorPopupBox {
            max-width: 400px;
            width: 90%;
            padding: 30px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(6px);
            border: 1px solid rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        #errorPopupBox h1 {
            font-size: 3rem;
            font-weight: 700;
            color: #e74c3c;
        }

        #errorPopupBox h2 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin: 10px 0;
        }

        #errorMessage {
            font-size: 1rem;
            color: #666;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
            border-left: 4px solid #e74c3c;
            text-align: left;
            word-wrap: break-word;
        }

        #closeErrorPopup {
            display: inline-block;
            margin-top: 10px;
            padding: 10px 24px;
            background-color: #3498db;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
            transition: background-color 0.3s ease, transform 0.2s ease;
            cursor: pointer;
        }

        #closeErrorPopup:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

            #flashMessageContainer {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9998;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 420px;
            padding: 0 1rem;
            pointer-events: none;
        }

        .flash-message {
            padding: 1rem 1.25rem;
            margin-bottom: 0.75rem;
            border-radius: 8px;
            font-weight: 600;
            width: 100%;
            text-align: center;
            pointer-events: all;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            animation: fadeIn 0.4s ease;
        }

        .flash-success {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #10b981;
        }

        .flash-error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #ef4444;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

    </style>
</head>
<body>
    <div id="flashMessageContainer"></div>

    <main class="container">
        <header class="page-header">
            <h1>Students Payments</h1>
        </header>

        <% if (students.length === 0) { %>
            <p style="text-align:center; padding: 3rem; color: var(--text-light);">No students found.</p>
        <% } else { %>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Course</th>
                            <th>Email & Phone</th>
                            <th>DOB</th>
                            <th>Guardian</th>
                            <th>Class</th>
                            <!-- <th>Address</th> -->
                            <th>Fees Due</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% students.forEach(student => { %>
                            <tr>
                                <td><%= student.firstName %> <%= student.middleName || '' %> <%= student.lastName %></td>
                                <td><%= student.course || 'N/A' %></td>
                                <td>
                                    <div><%= student.studentEmail %></div>
                                    <div style="color: var(--text-light);"><%= student.studentPhone %></div>
                                </td>
                                <td><%= student.dob ? new Date(student.dob).toLocaleDateString('en-IN') : 'N/A' %></td>
                                <td><%= student.guardian1Name %> (<%= student.guardian1Relation %>)</td>
                                <td><%= student.classAssigned %></td>
                                <!-- <td><%= `${student.address1}, ${student.city || ''}, ${student.state} - ${student.zipcode}` %></td> -->
                                <td>â‚¹<%= student.feesDue != null ? student.feesDue.toLocaleString('en-IN') : '0' %></td>
                                <td class="actions-cell">
                                    <button class="btn btn-setDue" data-id="<%= student._id %>">Set Due</button>
                                    <button class="btn btn-payment" data-id="<%= student._id %>">Manage</button>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        <% } %>
    </main>
    
    <script>
        // NOTE: The 'handleServerError' function expects an error popup with id 'errorPopupContainer'.
        // This should be included in your main layout or on this page if it's standalone.
        window.onload = async function() {
            const token = localStorage.getItem('token');
            try {
                    const res = await fetch('/Auth/verify-token', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        }
                    }); 
                    if (!res.ok){

                        const contentType = res.headers.get('Content-Type') || '';

                    if (contentType.includes('text/html')) {
                        const html = await res.text();
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;

                        const popup = tempDiv.querySelector('#errorPopupContainer');
                        const scripts = tempDiv.querySelectorAll('script');

                        if (popup) {
                        document.body.prepend(popup);
                        scripts.forEach((script) => {
                            const newScript = document.createElement('script');
                            if (script.src) newScript.src = script.src;
                            else newScript.textContent = script.textContent;
                            document.body.appendChild(newScript);
                        });
                        } else {
                        showFlashMessage('error', 'An unknown error occurred.');
                        }

                        // Add redirect after short delay for session errors
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    } else {
                        showFlashMessage('error', 'Server error: unexpected content type.');

                        // Optional: Redirect for other cases too
                        setTimeout(() => {
                        window.location.href = '/Staff/login';
                        }, 1500);
                    }
                    }
                    } catch (err) {
                    showFlashMessage('error', 'An unknown error occurred.');
                    }
                            try {
                    const token = localStorage.getItem('token');
                    if (!token) {
                    console.error('No token found');
                    return;
                    }
                    // console.log('Token:', token);
                    // Decode JWT to get staffId
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    const staffId = payload._id;
                    
                    const res = await fetch('/Manage/get-permissions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ staffId })
                    });

                    if (!res.ok) {
                    handleServerError(res);
                    return;
                    }

                    const data = await res.json();
                    const permissions = data.permissions || [];
                    // console.log('Permissions:', permissions);
                    // Hide all menu items not in permissions
                    
                    if (!permissions.includes('students_payment')) {
                        showFlashMessage('error', 'You do not have permission to access this page.');
                        setTimeout(() => {
                            window.location.href = '/Staff/dashboard';
                        }, 1500);
                    }

                } catch (err) {
                    console.error('Error fetching permissions:', err);
                }
        }
        async function handleServerError(res) {
            const contentType = res.headers.get('Content-Type') || '';

            if (contentType.includes('text/html')) {
            const html = await res.text();
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = html;

            const popup = tempDiv.querySelector('#errorPopupContainer');
            const scripts = tempDiv.querySelectorAll('script');

            if (popup) {
                document.body.prepend(popup);
                scripts.forEach((script) => {
                const newScript = document.createElement('script');
                if (script.src) newScript.src = script.src;
                else newScript.textContent = script.textContent;
                document.body.appendChild(newScript);
                });
            } else {
                showFlashMessage('error', 'An unknown error occurred.');
            }
            } else {
            showFlashMessage('error', 'Server error: unexpected content type.');
            }
        } 

        function showFlashMessage(type, message, duration = 4000) {
            const container = document.getElementById('flashMessageContainer');
            const msg = document.createElement('div');
            msg.classList.add('flash-message');
            msg.classList.add(type === 'success' ? 'flash-success' : 'flash-error');
            msg.textContent = message;

            container.appendChild(msg);

            setTimeout(() => {
            msg.style.opacity = '0';
            msg.style.transform = 'translateY(-10px)';
            setTimeout(() => msg.remove(), 500);
            }, duration);
        } 

        document.addEventListener('DOMContentLoaded', () => {
            // "Manage" button handler (renamed from Set Payment)
            document.querySelectorAll('.btn-payment').forEach(btn => {
                btn.addEventListener('click', () => {
                    const id = btn.dataset.id;
                    window.location.href = `/Payment/manage/${id}`;
                });
            });

            // "Set Due" button handler
            document.querySelectorAll('.btn-setDue').forEach(btn => {
                btn.addEventListener('click', () => {
                    const id = btn.dataset.id;
                    window.location.href = `/Payment/set-due/${id}`;
                });
            });
        });
    </script>
</body>
</html>